[
  
    {
      "title"    : "[15장] 장고 템플릿과 Jinja2",
      "category" : "두숟갈 스터디two-scoops",
      "tags"     : "Django, Jinja2",
      "url"      : "/%EB%91%90%EC%88%9F%EA%B0%88%20%EC%8A%A4%ED%84%B0%EB%94%94/two-scoops/2017/08/30/ch15-dtl-jinja2.html",
      "date"     : "2017-08-30 00:00:00 +0900",
      "content"   : "<h2 id=\"장고-템플릿과-jinja2\">장고 템플릿과 Jinja2</h2>\n<ul>\n  <li>장고 템플릿 시스템에서 <code class=\"highlighter-rouge\">장고 템플릿 언어(Django Template Language, DTL)</code>과 <code class=\"highlighter-rouge\">Jinja2</code>를 내장하여 지원하고 있다.</li>\n</ul>\n\n<h3 id=\"문법적-차이점\">문법적 차이점</h3>\n<ul>\n  <li>Jinja2는 DTL의 영향을 많이 받았기 때문에 문법적으로 매우 유사하다.</li>\n  <li>하지만 차이도 반드시 존재한다.</li>\n</ul>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">용례</th>\n      <th style=\"text-align: left\">DTL</th>\n      <th style=\"text-align: left\">Jinja2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\">메서드 호출</td>\n      <td style=\"text-align: left\">{{ user.get_info }}</td>\n      <td style=\"text-align: left\">{{ user.get_info() }}</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">인자 필터</td>\n      <td style=\"text-align: left\">{{ toppings | join:”, “ }}</td>\n      <td style=\"text-align: left\">{{ toppings | join(“, “) }}</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">인자 없는 루프</td>\n      <td style=\"text-align: left\">{% empty %}</td>\n      <td style=\"text-align: left\">{% else %}</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">루프 변수</td>\n      <td style=\"text-align: left\">{{ forloop }}</td>\n      <td style=\"text-align: left\">{{ loop }}</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">사이클</td>\n      <td style=\"text-align: left\">{% cycle “odd” “even” %}</td>\n      <td style=\"text-align: left\">{{ loop.cycle(“odd”, “even”) }}</td>\n    </tr>\n  </tbody>\n</table>\n\n<ul>\n  <li>시간이 지나면서 두 템플릿 언어는 서로 닮아가고 있으며 문법적으로 많은 공통점을 보이고 있다.</li>\n</ul>\n\n<h3 id=\"템플릿을-변경해야-할까\">템플릿을 변경해야 할까?</h3>\n<ul>\n  <li>장고 1.8 이후부터 settings.TEMPLATES 를 설정하여 특정 디렉토리의 템플릿에는 DTL을,</li>\n  <li>다른 디렉토리의 템플릿에는 Jinja2를 이용할 수 있게되었다.</li>\n  <li>따라서 DTL을 쓰는 중에 필요에 의해서 Jinja2의 장점을 이용할 수도 있고, Jinja2를 쓰는 중에 DTL을 사용할 수 있다. 즉, 다양한 템플릿 언어를 조화롭게 이용할 수 있기 때문에 변경을 고민할 필요가 없다.</li>\n</ul>\n\n<blockquote>\n  <p>하지만 템플릿 언어를 혼합해 쓰는 것은 정신적 부하를 가중시키는 위험을 초래한다. 따라서 위험을 없애기 위해 단 하나의 주템플릿 언어를 선택하여 이용하는 것을 권장한다.</p>\n</blockquote>\n\n<h3 id=\"장고-템플릿-언어dtl의-장점\">장고 템플릿 언어(DTL)의 장점</h3>\n<ul>\n  <li>이용을 위해 필요한 모든 것이 이미 장고 안에 포함되어 있고, DTL 기능이 공식 장고 문서에 훌륭하게 문서화되어 있다.</li>\n  <li>Janja2보다 더 많이 이용되면서 검증되었고 더 성숙하다.</li>\n  <li>대부분 DTL을 이용하고 있기 때문에 이를 Jinja2로 변경하려면 추가적인 작업이 필요하다.</li>\n</ul>\n\n<h3 id=\"jinja2의-장점\">Jinja2의 장점</h3>\n<ul>\n  <li>장고와 독립적으로 이용할 수 있다.</li>\n  <li>파이썬 문법에 좀 더 가깝기 때문에 문법이 직관적이다.</li>\n  <li>좀 더 명시적이고 명확하게 구성되어 있다. 예를 들면 템플릿상에서 함수 호출에 괄호가 이용된다.</li>\n  <li>일반적으로 더 빠르다. 템플릿에서 발생하는 병목 문제를 줄일 수 있다.</li>\n</ul>\n\n<hr />\n\n<h2 id=\"jinja2와-csrf\">Jinja2와 CSRF</h2>\n<ul>\n  <li>Jinja2는 DTL과는 다른 방식으로 장고의 CSRF 메커니즘에 접근한다.</li>\n  <li>Jinja2 템플릿에 CSRF를 포함시키기 위해 특별한 HTML이 있다.</li>\n</ul>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"nt\">&lt;div</span> <span class=\"na\">style=</span><span class=\"s\">\"display:none\"</span><span class=\"nt\">&gt;</span>\n\t<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"hidden\"</span> <span class=\"na\">name=</span><span class=\"s\">\"csrfmiddlewaretoken\"</span> <span class=\"na\">value=</span><span class=\"s\">\"{{ csrf_token }}\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n\n</code></pre>\n</div>\n\n<p><a href=\"http://localhost:4000\" class=\"a-tag-deco\">CSRF</a></p>\n\n<h2 id=\"jinja2-템플릿-태그-이용하기\">Jinja2 템플릿 태그 이용하기</h2>\n<ul>\n  <li>Jinja2에서 DTL을 사용하는 것은 불가능하지만,</li>\n  <li>1.함수로 변환하기, 2.확장 프로그램(writing-jinja2-extensions)을 통한 <code class=\"highlighter-rouge\">변환</code>으로 특정 템플릿 태그 기능을 사용할 수 있다.</li>\n</ul>\n\n<h2 id=\"jinja2에서-장고-스타일-필터-이용하기\">Jinja2에서 장고 스타일 필터 이용하기</h2>\n<ul>\n  <li>일반적으로 사용해 온 <code class=\"highlighter-rouge\">장고의 기본 템플릿 필터</code>는 기본적으로 함수이기 때문에 커스텀 <code class=\"highlighter-rouge\">Jinja2 환경에 템플릿 필터를 쉽게 포함</code>시킬 수 있다.</li>\n</ul>\n\n<p>[core/jinja2.py]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># [...] import 생략</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">environment</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">):</span>\n\t<span class=\"c\"># jinja2에서 Environment 클래스 인스턴스화 : 이후 해당 객체를 변형하지 말자!</span>\n\t<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Environment</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">)</span>\n\t<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"nb\">globals</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span>\n\t\t<span class=\"s\">'static'</span><span class=\"p\">:</span> <span class=\"n\">staticfiles_storage</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">,</span>\n\t\t<span class=\"s\">'url'</span><span class=\"p\">:</span> <span class=\"n\">reverse</span><span class=\"p\">,</span>\n\t\t<span class=\"c\"># 장고 기본 필터 사용 지정</span>\n\t\t<span class=\"s\">'dj'</span><span class=\"p\">:</span> <span class=\"n\">defaultfilters</span>\n\t<span class=\"p\">})</span>\n\t<span class=\"k\">return</span> <span class=\"n\">env</span>\n</code></pre>\n</div>\n\n<p>[Jinja2에서 장고 템플릿 필터 사용 예시]</p>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"nt\">&lt;table&gt;&lt;tbody&gt;</span>\n{% for purchase in purchase_list %}\n\t<span class=\"nt\">&lt;tr&gt;</span>\n\t\t<span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"{{ url(\"</span><span class=\"na\">purchase:detail</span><span class=\"err\">\",</span> <span class=\"na\">pk=</span><span class=\"s\">purchase.pk)</span> <span class=\"err\">}}\"</span><span class=\"nt\">&gt;</span>\n\t\t\t{{ purchase.title }}\n\t\t<span class=\"nt\">&lt;/a&gt;</span>\n\t<span class=\"nt\">&lt;/tr&gt;</span>\n\t<span class=\"nt\">&lt;tr&gt;</span>{{ dj.date(purchase.created, \"SHORT_DATE_FORMAT\") }}<span class=\"nt\">&lt;/tr&gt;</span>\n\t<span class=\"nt\">&lt;tr&gt;</span>{{ dj.floatformat(purchase.amount, 2) }}<span class=\"nt\">&lt;/tr&gt;</span>\n{% endfor %}\n<span class=\"nt\">&lt;/tbody&gt;&lt;/table&gt;</span>\n\n</code></pre>\n</div>\n\n<h2 id=\"jinja2-템플릿에서는-콘텍스트-프로세서가-호출되지-않음에-유의하자\">Jinja2 템플릿에서는 콘텍스트 프로세서가 호출되지 않음에 유의하자</h2>\n<ul>\n  <li><strong>콘텍스트 프로세서</strong> 란? 장고 템플릿을 이용할 때, settings.TEMPLATES의 context_processors 옵션에서 정의된 내장 함수의 리스트로, 요청 객체를 받아 콘텍스트에 추가될 아이템의 리스트들을 반환해 두는 것이다.</li>\n  <li>프로젝트에서 해당 콘텍스트 프로세서를 비중있게 이용하고 있지만, Jinja2 템플릿에서 이용할 경우 문제가 발생할 수 있다.</li>\n  <li>따라서 콘텍스트 프로세서를 통해 요청 객체를 변경하는 기능을 <code class=\"highlighter-rouge\">미들웨어</code>를 이용해 기능을 구현하는 방법을 구상 중이다.</li>\n</ul>\n\n<p>[advertisements/middleware.py]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># [...] import 생략</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">AdvertisementMiddleware</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">process_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n\t\t<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">Advertisement</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s\">'ice-cream'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n\t\t<span class=\"n\">ads</span> <span class=\"o\">=</span> <span class=\"n\">Advertisement</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"n\">subjects</span><span class=\"o\">=</span><span class=\"s\">'ice-cream'</span><span class=\"p\">)</span>\n\t\t\n\t\t<span class=\"c\"># 콘텍스트를 요청 객체에 추가한다.</span>\n\t\t<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">'context'</span><span class=\"p\">):</span>\n\t\t\t<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\t\t<span class=\"c\"># 콘텍스트를 오버라이딩하지 않고 새로 만든다.</span>\n\t\t<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span>\n\t\t\t<span class=\"s\">'ad'</span><span class=\"p\">:</span> <span class=\"n\">ads</span><span class=\"p\">[</span><span class=\"n\">random</span><span class=\"p\">,</span><span class=\"n\">randrange</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">)]</span>\n\t\t<span class=\"p\">})</span>\n</code></pre>\n</div>\n\n<p>[미들웨어를 이용해 구현한 콘텍스트를 템플릿에 사용]</p>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n{% set ctx = request.context %}\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"ice-cream-advertisement\"</span><span class=\"nt\">&gt;</span>\n\t<span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"{{ ctx.ad.url }}\"</span><span class=\"nt\">&gt;</span>\n\t\t<span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"stx.ad.image.url\"</span> <span class=\"nt\">/&gt;</span>\n\t<span class=\"nt\">&lt;/a&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "자바스크립트에 미디어쿼리를 사용하는 법, matchMedia()",
      "category" : "JavaScriptjavascript",
      "tags"     : "JavaScript, CSS",
      "url"      : "/javascript/2017/08/29/matchMedia.html",
      "date"     : "2017-08-29 00:00:00 +0900",
      "content"   : "<h2 id=\"자바스크립트에서-css-미디어쿼리-사용하기\">자바스크립트에서 CSS 미디어쿼리 사용하기</h2>\n<ul>\n  <li>웹사이트를 반응형으로 만들기위해서 <strong>CSS 미디어쿼리</strong> 를 사용해야 한다.</li>\n  <li>CSS 미디어쿼리를 사용하면 다양한 크기의 디바이스가 존재하는 상황에서도 모두 적절한 화면을 제공할 수 있다.</li>\n</ul>\n\n<h4 id=\"내-이야기\">내 이야기</h4>\n<ul>\n  <li>반응형에 자바스크립트가 적용되는 경우, oo 사이즈에서는 A 자바스크립트가 적용돼야하지만 xx 사이즈에서도 해당 자바스크립트가 적용될 경우 화면이 굉장히 부자연스러워질 수 있다.</li>\n  <li>나 같은 경우는 <code class=\"highlighter-rouge\">사이드바</code>가 (15인치 풀스크린)화면에 드러나면 그 만큼 화면이 옆으로 밀리고, 사이드바가 사라지게 되면 영역이 본래 크기로 돌아가게 하고 싶어서 자바스크립트를 사용했다.</li>\n  <li>적용이 잘된 것을 확인하고 꿀잠을 자려고 하는데!</li>\n  <li>잠을 자기 전엔 웹툰을 보는 것이 인지상정 아닌가? 다 구독하고 문득 생각나서 내 블로그로 이동했다.</li>\n  <li>이럴수가, 화면이 작아지면 <code class=\"highlighter-rouge\">사이드바</code>(좌우)가 <code class=\"highlighter-rouge\">드롭다운 형태</code>(상하)로 바뀌는데, 위아래로 메뉴가 이동할 때 마다 화면이 좌우로도 움직이더이다.</li>\n  <li>그 까닭은 자바스크립트를 화면이 클 때, 작을 때의 분기처리를 하지않았기 때문이었다.</li>\n  <li>그런데 자바스크립트는 @media를 어떻게 쓰는걸까?</li>\n</ul>\n\n<h4 id=\"javascript에도-css-미디어쿼리를-처리할-수-있는-matchmedia-함수가-존재한다\">JavaScript에도 CSS 미디어쿼리를 처리할 수 있는 matchMedia 함수가 존재한다.</h4>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>var m = matchMedia(\"CSS 미디어쿼리\");\n</code></pre>\n</div>\n\n<ul>\n  <li>위와 같이 CSS에서 사용하는 미디어쿼리문을 그대로 사용할 수 있다.</li>\n</ul>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>m.media // \"CSS 미디어쿼리\"\nm.matches // true\n</code></pre>\n</div>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">matchMedia()</code> 는 <strong>MediaQueryList</strong> 를 반환하는데 이 객체는 <code class=\"highlighter-rouge\">media</code> 와 <code class=\"highlighter-rouge\">metches</code> 라는 두 프로퍼티를 갖고있다.</li>\n  <li><code class=\"highlighter-rouge\">media</code> 는 미디어쿼리 문자열을 반환하고, <code class=\"highlighter-rouge\">matcheds</code> 는 현재 화면이 미디어쿼리 범위에 들어가면 <code class=\"highlighter-rouge\">true</code> 를 반환한다.</li>\n</ul>\n\n<p>[예제]</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">matchMedia</span><span class=\"o\">(</span><span class=\"s\">\"(max-width: 768px)\"</span><span class=\"o\">).</span><span class=\"na\">matches</span><span class=\"o\">){</span>\n  <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'</span><span class=\"o\">.</span><span class=\"na\">fa</span><span class=\"o\">-</span><span class=\"n\">bars</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">click</span><span class=\"o\">(</span><span class=\"n\">function</span> <span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span> <span class=\"o\">&gt;</span> <span class=\"n\">ul</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">is</span><span class=\"o\">(</span><span class=\"s\">\":visible\"</span><span class=\"o\">)</span> <span class=\"o\">===</span> <span class=\"kc\">true</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">css</span><span class=\"o\">({</span>\n      <span class=\"o\">});</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span> <span class=\"o\">&gt;</span> <span class=\"n\">ul</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">hide</span><span class=\"o\">();</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"s\">\"#container\"</span><span class=\"o\">).</span><span class=\"na\">addClass</span><span class=\"o\">(</span><span class=\"s\">\"sidebar-closed\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span> <span class=\"o\">&gt;</span> <span class=\"n\">ul</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">show</span><span class=\"o\">();</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">css</span><span class=\"o\">({</span>\n      <span class=\"o\">});</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"s\">\"#container\"</span><span class=\"o\">).</span><span class=\"na\">removeClass</span><span class=\"o\">(</span><span class=\"s\">\"sidebar-closed\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">});</span>\n<span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n  <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'</span><span class=\"o\">.</span><span class=\"na\">fa</span><span class=\"o\">-</span><span class=\"n\">bars</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">click</span><span class=\"o\">(</span><span class=\"n\">function</span> <span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span> <span class=\"o\">&gt;</span> <span class=\"n\">ul</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">is</span><span class=\"o\">(</span><span class=\"s\">\":visible\"</span><span class=\"o\">)</span> <span class=\"o\">===</span> <span class=\"kc\">true</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">css</span><span class=\"o\">({</span> <span class=\"c1\">// 사이드바가 없을 때</span>\n          <span class=\"err\">'</span><span class=\"n\">margin</span><span class=\"o\">-</span><span class=\"n\">left</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"o\">-</span><span class=\"mi\">210</span><span class=\"n\">px</span><span class=\"err\">'</span><span class=\"o\">,</span>\n          <span class=\"err\">'</span><span class=\"n\">transition</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mf\">0.5</span><span class=\"n\">s</span><span class=\"err\">'</span>\n      <span class=\"o\">});</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">content</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">css</span><span class=\"o\">({</span>\n        <span class=\"err\">'</span><span class=\"n\">margin</span><span class=\"o\">-</span><span class=\"n\">left</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mi\">10</span><span class=\"n\">px</span><span class=\"err\">'</span><span class=\"o\">,</span>\n        <span class=\"err\">'</span><span class=\"n\">width</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mf\">69.5</span><span class=\"o\">%</span><span class=\"err\">'</span><span class=\"o\">,</span>\n        <span class=\"err\">'</span><span class=\"n\">transition</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mf\">0.5</span><span class=\"n\">s</span><span class=\"err\">'</span>\n      <span class=\"o\">});</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">widget</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">css</span><span class=\"o\">({</span>\n        <span class=\"err\">'</span><span class=\"n\">width</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mi\">29</span><span class=\"o\">%</span><span class=\"err\">'</span>\n      <span class=\"o\">});</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span> <span class=\"o\">&gt;</span> <span class=\"n\">ul</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">hide</span><span class=\"o\">();</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"s\">\"#container\"</span><span class=\"o\">).</span><span class=\"na\">addClass</span><span class=\"o\">(</span><span class=\"s\">\"sidebar-closed\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span> <span class=\"o\">&gt;</span> <span class=\"n\">ul</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">show</span><span class=\"o\">();</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">css</span><span class=\"o\">({</span>\n          <span class=\"err\">'</span><span class=\"n\">margin</span><span class=\"o\">-</span><span class=\"n\">left</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"sc\">'0'</span><span class=\"o\">,</span>\n          <span class=\"err\">'</span><span class=\"n\">transition</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mf\">0.5</span><span class=\"n\">s</span><span class=\"err\">'</span>\n      <span class=\"o\">});</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">content</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">css</span><span class=\"o\">({</span>\n        <span class=\"err\">'</span><span class=\"n\">margin</span><span class=\"o\">-</span><span class=\"n\">left</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mi\">220</span><span class=\"n\">px</span><span class=\"err\">'</span><span class=\"o\">,</span>\n        <span class=\"err\">'</span><span class=\"n\">width</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mi\">59</span><span class=\"o\">%</span><span class=\"err\">'</span><span class=\"o\">,</span>\n        <span class=\"err\">'</span><span class=\"n\">transition</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mf\">0.5</span><span class=\"n\">s</span><span class=\"err\">'</span>\n      <span class=\"o\">});</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">widget</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">css</span><span class=\"o\">({</span>\n        <span class=\"err\">'</span><span class=\"n\">width</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mi\">25</span><span class=\"o\">%</span><span class=\"err\">'</span>\n      <span class=\"o\">});</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"s\">\"#container\"</span><span class=\"o\">).</span><span class=\"na\">removeClass</span><span class=\"o\">(</span><span class=\"s\">\"sidebar-closed\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">});</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<blockquote>\n  <p>자스알못이라 틀린 내용이 다소 포함될 수 있으니 양해부탁드립니다.</p>\n</blockquote>\n"
    } ,
  
    {
      "title"    : "[12장] 폼 패턴들",
      "category" : "두숟갈 스터디two-scoops",
      "tags"     : "Django",
      "url"      : "/%EB%91%90%EC%88%9F%EA%B0%88%20%EC%8A%A4%ED%84%B0%EB%94%94/two-scoops/2017/08/23/ch12-django-form-patterns.html",
      "date"     : "2017-08-23 00:00:00 +0900",
      "content"   : "<h2 id=\"패턴-1-간단한-모델폼과-기본-유효성-검사기\">패턴 1: 간단한 모델폼과 기본 유효성 검사기</h2>\n\n<h3 id=\"제네릭-뷰\">제네릭 뷰</h3>\n<ul>\n  <li>뷰에서 모델에 기반을 둔 ModelForm 을 자동 생성한다.</li>\n  <li>생성된 ModelForm 이 모델의 기본 필드 유효성 검사기를 이용하게 된다.</li>\n</ul>\n\n<h3 id=\"유효성-검사기\">유효성 검사기</h3>\n\n<p>[core/validators.py]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ValidationError</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">validate_tasty</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\" 단어가 'Tasty'로 시작되지 않으면 ValidationError 발생 \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s\">'Tasty'</span><span class=\"p\">):</span>\n        <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s\">'Must start with Tasty'</span>\n        <span class=\"k\">raise</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h3 id=\"모델-상속model-inheritance\">모델 상속(Model Inheritance)</h3>\n<ul>\n  <li>Abstract Base Classes</li>\n  <li>Multi-table Inheritance</li>\n  <li>Proxy Model</li>\n</ul>\n\n<h3 id=\"abstract-base-classes\">Abstract Base Classes</h3>\n<ul>\n  <li>가장 특별하지 않은 상속 방법</li>\n</ul>\n\n<p>[config/models.py]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.validators</span> <span class=\"kn\">import</span> <span class=\"n\">validate_tasty</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TastyTitleAbstractModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span>\n        <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">,</span>\n        <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validate_tasty</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n\t<span class=\"c\"># TastyTitleAbstractModel 을 추상화 모델로 만들어 준다.</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>부모 모델인 TastyTitleAbstractModel 이 실제로 또는 물리적으로 존재하지 않는 가상 클래스가 된다.</li>\n  <li>자식 모델들은 부모 모델의 필드와 속성 함수들을 다 물려받아 실체가 있는 DB 테이블이 된다.</li>\n  <li>즉, 자식 모델들이 부모 모델 없이 독립적인 DB 테이블로 존재하며, 자식과 부모의 상속 관계는 실재하지 않는 것이 된다.</li>\n  <li>공통된 필드가 많이 있는 모델 클래스들이 있을 때 유용하다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">core.models</span> <span class=\"kn\">import</span> <span class=\"n\">TastyTitleAbstractModel</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Cake</span><span class=\"p\">(</span><span class=\"n\">TastyTitleAbstractModel</span><span class=\"p\">):</span>\n    <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>TastyTitleAbstractModel 클래스를 상속받는 모델들은 <code class=\"highlighter-rouge\">title</code> 이 ‘Tasty’로 시작되지 않을 경우 유효성 검사 에러를 발생시킨다.</li>\n</ul>\n\n<p><img src=\"http://localhost:4000/assets/title_error.png\" alt=\"title-error\" class=\"center-image\" /></p>\n\n<hr />\n\n<h2 id=\"패턴-2-모델폼에서-커스텀-폼-필드-유효성-검사기-이용\">패턴 2: 모델폼에서 커스텀 폼 필드 유효성 검사기 이용</h2>\n\n<p>[flavors/forms.py]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">CakeForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ModelForm</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\" 커스텀 폼 \"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">CakeForm</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s\">\"title\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">vlidators</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">validate_tasty</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s\">\"color\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">vlidators</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">validate_tasty</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Cake</span>\n</code></pre>\n</div>\n\n<p>[flavors/views.py]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">CakeActionMixin</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Cake</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"s\">'title'</span><span class=\"p\">,</span>\n        <span class=\"s\">'color'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">success_msg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">NotImplemented</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">form_valid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">form</span><span class=\"p\">):</span>\n        <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">success_msg</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">CakeActionMixin</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">form_valid</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CakeCreateView</span><span class=\"p\">(</span><span class=\"n\">LoginRequiredMixin</span><span class=\"p\">,</span> <span class=\"n\">CakeActionMixin</span><span class=\"p\">,</span> <span class=\"n\">CreateView</span><span class=\"p\">):</span>\n    <span class=\"n\">success_msg</span> <span class=\"o\">=</span> <span class=\"s\">'created'</span>\n    <span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">CakeForm</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CakeUpdateView</span><span class=\"p\">(</span><span class=\"n\">LoginRequiredMixin</span><span class=\"p\">,</span> <span class=\"n\">UpdateView</span><span class=\"p\">):</span>\n    <span class=\"n\">success_msg</span> <span class=\"o\">=</span> <span class=\"s\">'updated'</span>\n    <span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">CakeForm</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CakeDetailView</span><span class=\"p\">(</span><span class=\"n\">DetailView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Cake</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>CakeCreateView, CakeUpdateView 에서 입력된 데이터 유효성 검사를 위해 CakeForm 이용</li>\n  <li>패턴1, 2: validate_tasty() 코드를 변경하지 않고 이용할 수 있다. 해당 코드를 새로운 곳에 임포트하는 것만으로 바로 이용할 수 있다.</li>\n</ul>\n\n<hr />\n\n<h2 id=\"패턴-3-유효성-검사의-클린-상태-오버라이딩-하기\">패턴 3: 유효성 검사의 클린 상태 오버라이딩 하기</h2>\n<ul>\n  <li>다중 필드에 대한 유효성 검사</li>\n  <li>이미 유효성 검사가 끝난 데이터베이스의 데이터가 포함된 유효성검사</li>\n  <li>커스텀 로직으로 clean() 또는 clean_<field name=\"\">() 을 오버라이딩 할 수 있는 최적의 경우</field></li>\n</ul>\n\n<h4 id=\"어째서-유효성-검사에-또-한-번의-유효성-검사를-거치는가\">어째서 유효성 검사에 또 한 번의 유효성 검사를 거치는가?</h4>\n<ul>\n  <li>clean() 메서드는 두 개 혹은 그 이상의 필드들에 대해 서로 간의 유효성 검사가 가능하다.</li>\n  <li>이미 유효성 검사를 일부 마친 데이터에 대해 불필요한 데이터베이스 연동을 줄일 수 있다.</li>\n</ul>\n\n<hr />\n\n<h2 id=\"패턴-4-폼-필드-해킹하기두-개의-cbv-두-개의-폼-한-개의-모델\">패턴 4: 폼 필드 해킹하기(두 개의 CBV, 두 개의 폼, 한 개의 모델)</h2>\n<ul>\n  <li>나중에 입력할 데이터를 위해 <code class=\"highlighter-rouge\">blank=True</code>가 명시돼있는 필드를 포함하여 레코드를 생성하는 경우가 있다.</li>\n</ul>\n\n<h4 id=\"myuser-model\">MyUser Model</h4>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MyUser</span><span class=\"p\">(</span><span class=\"n\">AbstractUser</span><span class=\"p\">):</span>\n\t<span class=\"n\">my_photo</span> <span class=\"o\">=</span> <span class=\"n\">CustomImageField</span><span class=\"p\">(</span>\n        <span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"s\">'user/</span><span class=\"si\">%</span><span class=\"s\">Y/</span><span class=\"si\">%</span><span class=\"s\">m/</span><span class=\"si\">%</span><span class=\"s\">d'</span><span class=\"p\">,</span>\n        <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\t<span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">EmailField</span><span class=\"p\">(</span>\n        <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\t<span class=\"n\">nickname</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span>\n        <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"p\">,</span>\n        <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"bp\">True</span>\n    <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>ModelForm 에서 사용자가 기본으로 username, password 필드를 입력해야하지만,</li>\n  <li>my_photo, email, nickname 필드는 입력하지 않아도 되도록 구성되어 있다.</li>\n  <li>사용자가 처음 username, password 필드만 입력한 상태로 이용하는 데 문제가 없지만,</li>\n  <li>나중에 사용자가 튜터 등록할 때, my_photo, email, nickname 필드를 추가적으로 업데이트하는 것이 가능하도록 구성한 것이다.</li>\n</ul>\n\n<h4 id=\"tutorregister-form\">TutorRegister Form</h4>\n\n<p>[나쁜 예제] - 따라하지 말 것! 모델 필드 정의를 반복해서 이용</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">TutorRegisterForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ModelForm</span><span class=\"p\">):</span>\n\t<span class=\"n\">my_photo</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\t<span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\t<span class=\"n\">nickname</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n\t<span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MyUser</span>\n</code></pre>\n</div>\n\n<p>[좋은 예제] - ModelForm __init__() 메서드에서 새로운 속성을 적용</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">TutorRegisterForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ModelForm</span><span class=\"p\">):</span>\n\t<span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MyUser</span>\n\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n\t\t<span class=\"c\"># 필드 오버로드 전 원래 __init__ 메서드 호출</span>\n\t\t<span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">TutorRegisterForm</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s\">\"my_photo\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s\">\"email\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s\">\"nickname\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n</code></pre>\n</div>\n\n<h4 id=\"상속을-통해-코드-줄이기\">상속을 통해 코드 줄이기</h4>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">SignUpForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ModelForm</span><span class=\"p\">):</span>\n\t<span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MyUser</span>\n\t\t<span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">'username'</span><span class=\"p\">,</span> <span class=\"s\">'password'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TutorRegisterForm</span><span class=\"p\">(</span><span class=\"n\">SignUpForm</span><span class=\"p\">):</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n\t\t<span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">TutorRegisterForm</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s\">\"my_photo\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s\">\"email\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s\">\"nickname\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\n\t<span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">SignUpForm</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n\t\t<span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">'username'</span><span class=\"p\">,</span> <span class=\"s\">'password'</span><span class=\"p\">,</span> <span class=\"s\">'my_photo'</span><span class=\"p\">,</span> <span class=\"s\">'email'</span><span class=\"p\">,</span> <span class=\"s\">'nickname'</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h4 id=\"폼-클래스를-이용한-뷰\">폼 클래스를 이용한 뷰</h4>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">SignUpView</span><span class=\"p\">(</span><span class=\"n\">CreateView</span><span class=\"p\">):</span>\n\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MyUser</span>\n\t<span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">SignUpForm</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TutorRegisterView</span><span class=\"p\">(</span><span class=\"n\">UpdateView</span><span class=\"p\">):</span>\n\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MyUser</span>\n\t<span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">TutorRegisterForm</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[10장] 클래스 기반 뷰",
      "category" : "두숟갈 스터디two-scoops",
      "tags"     : "Django",
      "url"      : "/%EB%91%90%EC%88%9F%EA%B0%88%20%EC%8A%A4%ED%84%B0%EB%94%94/two-scoops/2017/08/09/ch10-class-based-view.html",
      "date"     : "2017-08-09 00:00:00 +0900",
      "content"   : "<h2 id=\"장고의-뷰\">장고의 뷰</h2>\n<ul>\n  <li>장고의 뷰는 요청 객체를 받고 응답 객체를 반환하는 내장 함수이다.</li>\n  <li><code class=\"highlighter-rouge\">함수 기반 뷰</code>는 뷰 함수 자체가 내장 함수이고,</li>\n  <li><code class=\"highlighter-rouge\">클래스 기반 뷰</code>는 뷰 클래스가 내장 함수를 반환하는 as_view() 클래스 메서드를 제공한다.</li>\n  <li>요즘 대부분의 웹 프로젝트에서 제네릭 클래스 기반 뷰(GCBV)를 이용하여 장고의 장점을 최대한 살리고 있다.</li>\n</ul>\n\n<h3 id=\"클래스-기반-뷰를-이용할-때-가이드-라인\">클래스 기반 뷰를 이용할 때 가이드 라인</h3>\n<ul>\n  <li>뷰 코드 양은 적으면 적을수록 좋다. 즉, 뷰는 <code class=\"highlighter-rouge\">간단명료</code>해야 한다.</li>\n  <li>뷰 안에서 같은 코드를 반복적으로 이용하지 말자.</li>\n  <li><code class=\"highlighter-rouge\">뷰</code>는 <code class=\"highlighter-rouge\">프레젠테이션 로직</code>에서 관리하도록, <code class=\"highlighter-rouge\">비즈니스 로직</code>은 <code class=\"highlighter-rouge\">모델</code>에서 처리하자.</li>\n  <li>400, 404, 500 에러 핸들링에 클래스 기반 뷰는 이용하지 않는다.</li>\n</ul>\n\n<h4 id=\"프레젠테이션-로직과-비즈니스-로직\">프레젠테이션 로직과 비즈니스 로직</h4>\n<ul>\n  <li>프레젠테에션 로직: 말 그대로 보여주기 위한 로직, 화면상의 디자인 구성을 의한 로직을 일컫는다.</li>\n  <li>비즈니스 로직: 어떤 값을 얻기 위해 데이터의 처리를 수행하는 로직을 일컫는다.</li>\n</ul>\n\n<blockquote>\n  <p><strong>궁금한 점:</strong> 109p를 보면, 장고의 기본형에서 제네릭 클래스 기반 뷰를 위한 주요 믹스인이 빠져있다고 돼있습니다. 그 중에 LoginRequiredMixin이 있는데요, 하지만 장고 최신 버전에서는 장고 기본형에서 LoginRequiredMixin을 제공해줍니다. 이 책이 장고 구버전을 토대로 작성돼서 그런건지, 제네릭 클래스의 경우 장고 기본형에서 제공해주는 LoginRequiredMixin과 호환되지 않는 것인지 궁금합니다.</p>\n</blockquote>\n\n<blockquote>\n  <p><strong>➜</strong> 최신버전에서 제공해주는 장고 기본형 LoginRequiredMixin은 모듈 braces의 LoginRequiredMixin을 그대로 가져온 것입니다.</p>\n</blockquote>\n\n<hr />\n\n<h2 id=\"클래스-기반-뷰-ღෆ-믹스인\">클래스 기반 뷰 ღෆ 믹스인</h2>\n<ul>\n  <li>믹스인이란 실체화(인스턴스화)된 클래스가 아니라 상속해 줄 기능을 제공하는 클래스를 의미한다.</li>\n  <li>다중 상속을 해야 할 때, 믹스인을 쓰면 클래스에 더 나은 기능과 역할을 제공한다.</li>\n</ul>\n\n<h4 id=\"믹스인을-이용해서-뷰-클래스를-제작할-때-상속에-관한-규칙\">믹스인을 이용해서 뷰 클래스를 제작할 때, 상속에 관한 규칙</h4>\n<ol>\n  <li>장고가 제공하는 <code class=\"highlighter-rouge\">기본 뷰</code>는 항상 <code class=\"highlighter-rouge\">오른쪽</code>으로 진행한다</li>\n  <li><code class=\"highlighter-rouge\">믹스인</code>은 기본 뷰에서부터 <code class=\"highlighter-rouge\">왼쪽</code>으로 진행한다</li>\n  <li>믹스인은 파이썬의 <code class=\"highlighter-rouge\">기본 객체 타입을 상속</code>해야한다</li>\n</ol>\n\n<hr />\n\n<h2 id=\"gcbv를-언제-사용해야할까\">GCBV를 언제 사용해야할까?</h2>\n<p>- <strong>View :</strong> 어디에서든 이용 가능한 기본 뷰 <br />\n- <strong>RedirectView :</strong> 사용자를 다른 URL로 리다이렉트 <br />\n- <strong>TemplateView :</strong> 장고 HTML 템플릿을 보여줄 때 <br />\n- <strong>ListView :</strong> 객체 목록 <br />\n- <strong>DetailView :</strong> 객체를 보여줄 때 <br />\n- <strong>FormView :</strong> 폼 전송 <br />\n- <strong>CreateView :</strong> 객체를 만들 때 <br />\n- <strong>UpdatedView :</strong> 객체를 업데이트할 때 <br />\n- <strong>DeleteView :</strong> 객체를 삭제 <br /></p>\n\n<h3 id=\"인증된-사용자에게만-장고-cbv-혹은-gcbv-접근-가능하게-하기\">인증된 사용자에게만 장고 CBV 혹은 GCBV 접근 가능하게 하기</h3>\n<ul>\n  <li>django.contrib.auth.decorators.login_required <strong>데코레이터</strong>를 사용해도 되지만,</li>\n  <li>대부분의 예제들이 정형화된 틀에 박혀 있는 문제점이 있다.</li>\n  <li>데코레이터를 사용하지 않는 다른 방법으로는 <strong>django-brace</strong>에서 <strong>LoginRequiredMixin</strong>을 사용하는 것이다.</li>\n</ul>\n\n<p>[데코레이터 사용]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">CreateView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">method_decorator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">login_required</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Post</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PostCreate</span><span class=\"p\">(</span><span class=\"n\">CreateView</span><span class=\"p\">):</span>\n\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Post</span>\n\n\t<span class=\"nd\">@method_decorator</span><span class=\"p\">(</span><span class=\"n\">login_required</span><span class=\"p\">(</span><span class=\"n\">login_url</span><span class=\"o\">=</span><span class=\"s\">'/member/login/'</span><span class=\"p\">))</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">PostCreate</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>[믹스인 사용]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">CreateView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">brace.views</span> <span class=\"kn\">import</span> <span class=\"n\">LoginRequiredMixin</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Post</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PostCreate</span><span class=\"p\">(</span><span class=\"n\">LoginRequiredMixin</span><span class=\"p\">,</span> <span class=\"n\">CreateView</span><span class=\"p\">):</span>\n\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Post</span>\n</code></pre>\n</div>\n\n<hr />\n\n<h3 id=\"뷰에서-폼을-이용하여-커스텀-액션-구현하기\">뷰에서 폼을 이용하여 커스텀 액션 구현하기</h3>\n<ul>\n  <li>클래스 기반 뷰에서도 중복되는 폼 코드 사용 시, 장고 폼을 활용할 수 있다. 해당 폼 유효성 검사를 하기 위해서 <code class=\"highlighter-rouge\">form_valid()</code>가 자리잡게 된다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">CreateView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">brace.views</span> <span class=\"kn\">import</span> <span class=\"n\">LoginRequiredMixin</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Post</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PostCreate</span><span class=\"p\">(</span><span class=\"n\">LoginRequiredMixin</span><span class=\"p\">,</span> <span class=\"n\">CreateView</span><span class=\"p\">):</span>\n\t<span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">PostForm</span>\n\t<span class=\"c\"># success_url = '/post/' + post_pk + '/'</span>\n\n\t<span class=\"k\">def</span> <span class=\"nf\">form_valid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">form</span><span class=\"p\">):</span>\n\t\t<span class=\"c\"># 커스텀 로직</span>\n\t\t<span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">PostCrate</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">form_valid</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>form_valid()는 유효한 폼 양식 데이터가 POST 요청일 때 호출된다.</li>\n  <li>반환형은 django.http.HttpResponseRedirect 가 된다.</li>\n</ul>\n\n<h3 id=\"뷰-객체-이용하기\">뷰 객체 이용하기</h3>\n<ul>\n  <li>콘텐츠를 렌더링하는 데 클래스 기반 뷰를 사용한다면, 렌더링용 메서드와 속성을 제공하는 뷰 객체를 호출하는 방법을 고려해 볼 수 있다.</li>\n</ul>\n\n<blockquote>\n  <p><strong>궁금한 점:</strong> 121p 예제 10.11에서 폼을 사용한 부분이 어딘가요?</p>\n</blockquote>\n\n<blockquote>\n  <p><strong>➜</strong> 책이 잘못된 듯;</p>\n</blockquote>\n"
    } ,
  
    {
      "title"    : "[9장] 함수 기반 뷰",
      "category" : "두숟갈 스터디two-scoops",
      "tags"     : "Django",
      "url"      : "/%EB%91%90%EC%88%9F%EA%B0%88%20%EC%8A%A4%ED%84%B0%EB%94%94/two-scoops/2017/08/02/ch9-func-based-view.html",
      "date"     : "2017-08-02 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>함수 기반 뷰는 클래스 기반 뷰처럼 슈퍼클래스로부터 상속하는 기능이 없다. 하지만 함수 기반 뷰는 그 태생에서 오는 함수적인 특징이 장점이다.</p>\n</blockquote>\n\n<h4 id=\"함수-기반-뷰-가이드-라인\">함수 기반 뷰 가이드 라인</h4>\n<ul>\n  <li>뷰 코드는 작을수록 좋다.</li>\n  <li>뷰에서 절대 코드를 반보해서 사용하지 말자.</li>\n  <li>뷰는 프레젠테이션 로직에서 처리해야한다. (모델은 비즈니스 로직에서 처리해야한다.)</li>\n  <li>403, 404, 500을 처리하는 커스텀 코드를 쓰는 데 이용하라.</li>\n  <li>복잡하게 중첩된 if문을 피하자.</li>\n</ul>\n\n<h3 id=\"httprequest-객체-전달하기\">HttpRequest 객체 전달하기</h3>\n<ul>\n  <li>뷰에서 코드를 재사용할 경우 미들웨어(Middleware)나 콘텍스트 프로세서(context processors) 같은 글로벌 액션을 연동하는 방법이 있다. 하지만 해당 방법을 사용하지 않을 경우 재사용에 문제가 발생할 수 있다.</li>\n  <li>django.http.HttpRequest 객체를 주된 인자로 삼는 메서드의 인자를 단순하게 해준다. 즉 메서드의 인자를 관리하는 데 있어 더 적은 부하를 가져다준다.</li>\n  <li>이 방법의 또 다른 장점은 클래스 기반 뷰로 통합하기 쉽다는 점이다.</li>\n</ul>\n\n<h3 id=\"데코레이터\">데코레이터</h3>\n<ul>\n  <li>간단 표기법이란? 포현이나 가독성을 좋게 하기 위해 프로그래밍 언어에 추가되는 문법을 나타낸다.</li>\n  <li><code class=\"highlighter-rouge\">함수가 주는 단순 명료함</code> + <code class=\"highlighter-rouge\">데코레이터의 간단 표기법</code> = 언제 어디서나 사용가능하고 동시에 재사용이 가능한 매우 유용하고 강력한 도구가 된다.</li>\n</ul>\n\n<h4 id=\"데코레이터-남용하지-않기\">데코레이터 남용하지 않기</h4>\n<p>너무 많은 데코레이터의 집합은 데코레이터 자체를 난해하게 만들어, 복잡하게 얽혀있는 상속 과정을 지닌 뷰가 단순해 보일 정도가 된다.</p>\n"
    } ,
  
    {
      "title"    : "[8장] 함수 기반 뷰와 클래스 기반 뷰",
      "category" : "두숟갈 스터디two-scoops",
      "tags"     : "Django",
      "url"      : "/%EB%91%90%EC%88%9F%EA%B0%88%20%EC%8A%A4%ED%84%B0%EB%94%94/two-scoops/2017/08/02/ch8-fbv-and-cbv.html",
      "date"     : "2017-08-02 00:00:00 +0900",
      "content"   : "<p><br /></p>\n<h3 id=\"함수-기반-뷰fbv와-클래스-기반-뷰cbv는-각각-언제-사용할까\">함수 기반 뷰(FBV)와 클래스 기반 뷰(CBV)는 각각 언제 사용할까?</h3>\n<p>뷰를 구현할 때 마다 <code class=\"highlighter-rouge\">함수 기반 뷰로 하는 게 나을지, 클래스 기반 뷰로 하는 게 더 나을지</code>를 고민하자</p>\n\n<p><br /></p>\n<h4 id=\"클래스-기반-뷰를-사용할-때\">클래스 기반 뷰를 사용할 때</h4>\n<ul>\n  <li>대부분의 경우 선호</li>\n  <li>널리 사용되는 클래스 뷰들 중 하나가 이미 머리에 떠올랐다.</li>\n  <li>속성을 <strong>오버라이딩</strong> 하는 것만으로 클래스 기반 뷰가 가능하다.</li>\n  <li>다른 뷰를 생성하기 위해 <strong>서브클래스</strong> 를 만들어야 한다.</li>\n</ul>\n\n<h4 id=\"함수-기반-뷰를-사용할-때\">함수 기반 뷰를 사용할 때</h4>\n<ul>\n  <li>클래스 기반 뷰로 구현하기 위해 장고 소스 코드까지 들여다볼 정도로 <strong>난해</strong> 하다.</li>\n  <li>클래스 기반 뷰로 처리할 경우 극단적으로 <strong>복잡</strong> 해진다. 예를 들어 뷰가 한 개 이상의 폼을 처리할 경우</li>\n</ul>\n\n<blockquote>\n  <p><strong>개인 프로젝트에 적용해보기</strong> - 페이스북 소셜 로그인</p>\n</blockquote>\n\n<h4 id=\"fbv\">FBV</h4>\n<p>뷰 자체에서 페이스북 사용자 정보를 받고, 로그인까지 실행한다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">facebook_login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n\n    <span class=\"c\"># 페이스북 로그인 버튼의 URL 을 통하여 facebook_login view 가 처음 호출될 때, 'code' request GET parameter 받으며, 'code' 가 없으면 오류 발생한다.</span>\n    <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'code'</span><span class=\"p\">)</span>\n\n    <span class=\"c\">##</span>\n    <span class=\"c\"># 액세스 토큰 얻기</span>\n    <span class=\"c\">##</span>\n\n    <span class=\"c\"># code 인자를 받아서 Access Token 교환을 URL 에 요청후, 해당 Access Token 을 받는다.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_access_token</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">):</span>\n\n        <span class=\"c\"># Access Token 을 교환할 URL</span>\n        <span class=\"n\">exchange_access_token_url</span> <span class=\"o\">=</span> <span class=\"s\">'https://graph.facebook.com/v2.9/oauth/access_token'</span>\n\n        <span class=\"c\"># 이전에 요청했던 URL 과 같은 값 생성(Access Token 요청시 필요)</span>\n        <span class=\"n\">redirect_uri</span> <span class=\"o\">=</span> <span class=\"s\">'{}{}'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SITE_URL</span><span class=\"p\">,</span>\n            <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c\"># Access Token 요청시 필요한 파라미터</span>\n        <span class=\"n\">exchange_access_token_url_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s\">'client_id'</span><span class=\"p\">:</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">FACEBOOK_APP_ID</span><span class=\"p\">,</span>\n            <span class=\"s\">'redirect_uri'</span><span class=\"p\">:</span> <span class=\"n\">redirect_uri</span><span class=\"p\">,</span>\n            <span class=\"s\">'client_secret'</span><span class=\"p\">:</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">FACEBOOK_SECRET_CODE</span><span class=\"p\">,</span>\n            <span class=\"s\">'code'</span><span class=\"p\">:</span> <span class=\"n\">code</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">exchange_access_token_url_params</span><span class=\"p\">)</span>\n\n        <span class=\"c\"># Access Token 을 요청한다.</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n            <span class=\"n\">exchange_access_token_url</span><span class=\"p\">,</span>\n            <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">exchange_access_token_url_params</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n        <span class=\"c\"># 응답받은 결과값에 'access_token'이라는 key 가 존재하면,</span>\n        <span class=\"k\">if</span> <span class=\"s\">'access_token'</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n            <span class=\"c\"># access_token key 의 value 를 반환한다.</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s\">'access_token'</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"s\">'error'</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"nb\">Exception</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"nb\">Exception</span><span class=\"p\">(</span><span class=\"s\">'Unknown error'</span><span class=\"p\">)</span>\n\n    <span class=\"c\">##</span>\n    <span class=\"c\"># 액세스 토큰이 올바른지 검사</span>\n    <span class=\"c\">##</span>\n    <span class=\"k\">def</span> <span class=\"nf\">debug_token</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">):</span>\n        <span class=\"n\">app_access_token</span> <span class=\"o\">=</span> <span class=\"s\">'{}|{}'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">FACEBOOK_APP_ID</span><span class=\"p\">,</span>\n            <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">FACEBOOK_SECRET_CODE</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">debug_token_url</span> <span class=\"o\">=</span> <span class=\"s\">'https://graph.facebook.com/debug_token'</span>\n        <span class=\"n\">debug_token_url_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s\">'input_token'</span><span class=\"p\">:</span> <span class=\"n\">token</span><span class=\"p\">,</span>\n            <span class=\"s\">'access_token'</span><span class=\"p\">:</span> <span class=\"n\">app_access_token</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">debug_token_url</span><span class=\"p\">,</span> <span class=\"n\">debug_token_url_params</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"s\">'error'</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s\">'data'</span><span class=\"p\">]:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">DebugTokenException</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n\n    <span class=\"c\">##</span>\n    <span class=\"c\"># 에러 메세지를 request 에 추가, 이전 페이지로 redirect</span>\n    <span class=\"c\">##</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_message_and_redirect_referer</span><span class=\"p\">():</span>\n        <span class=\"n\">error_message</span> <span class=\"o\">=</span> <span class=\"s\">'Facebook login error'</span>\n        <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">error_message</span><span class=\"p\">)</span>\n\n        <span class=\"c\"># 이전 URL 로 리다이렉트</span>\n        <span class=\"k\">return</span> <span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">[</span><span class=\"s\">'HTTP_REFERER'</span><span class=\"p\">])</span>\n\n    <span class=\"c\">##</span>\n    <span class=\"c\"># 발급받은 Access Token 을 이용하여 User 정보에 접근</span>\n    <span class=\"c\">##</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_user_info</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">):</span>\n        <span class=\"n\">url_user_info</span> <span class=\"o\">=</span> <span class=\"s\">'https://graph.facebook.com/v2.9/{user_id}'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n        <span class=\"n\">url_user_info_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s\">'access_token'</span><span class=\"p\">:</span> <span class=\"n\">token</span><span class=\"p\">,</span>\n            <span class=\"s\">'fields'</span><span class=\"p\">:</span> <span class=\"s\">','</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span>\n                <span class=\"s\">'id'</span><span class=\"p\">,</span>\n                <span class=\"s\">'name'</span><span class=\"p\">,</span>\n                <span class=\"s\">'email'</span><span class=\"p\">,</span>\n            <span class=\"p\">])</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url_user_info</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">url_user_info_params</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"c\">##</span>\n    <span class=\"c\"># 페이스북 로그인을 위해 정의한 함수 실행하기</span>\n    <span class=\"c\">##</span>\n\n    <span class=\"c\"># code 가 없으면 에러 메세지를 request 에 추가하고 이전 페이지로 redirect</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">code</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">add_message_and_redirect_referer</span><span class=\"p\">()</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"n\">get_access_token</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">)</span>\n        <span class=\"n\">debug_result</span> <span class=\"o\">=</span> <span class=\"n\">debug_token</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"p\">)</span>\n        <span class=\"n\">user_info</span> <span class=\"o\">=</span> <span class=\"n\">get_user_info</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"n\">debug_result</span><span class=\"p\">[</span><span class=\"s\">'data'</span><span class=\"p\">][</span><span class=\"s\">'user_id'</span><span class=\"p\">],</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">access_token</span><span class=\"p\">)</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create_facebook_user</span><span class=\"p\">(</span><span class=\"n\">user_info</span><span class=\"p\">)</span>\n\n        <span class=\"n\">django_login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"s\">'books:main'</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">GetAccessTokenException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">add_message_and_redirect_referer</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"n\">DebugTokenException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">add_message_and_redirect_referer</span><span class=\"p\">()</span>\n\n</code></pre>\n</div>\n\n<h4 id=\"cbv\">CBV</h4>\n<p><code class=\"highlighter-rouge\">apiView</code>를 상속해서 token 값을 반환한다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">FaceBookLogin</span><span class=\"p\">(</span><span class=\"n\">APIView</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"n\">access_token_test</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"n\">debug_result</span> <span class=\"o\">=</span> <span class=\"n\">debug_token</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">debug_result</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">get_user_info</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">):</span>\n            <span class=\"n\">url_user_info</span> <span class=\"o\">=</span> <span class=\"s\">'https://graph.facebook.com/v2.9/{user_id}'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n            <span class=\"n\">url_user_info_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"s\">'access_token'</span><span class=\"p\">:</span> <span class=\"n\">token</span><span class=\"p\">,</span>\n                <span class=\"s\">'fields'</span><span class=\"p\">:</span> <span class=\"s\">','</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span>\n                    <span class=\"s\">'id'</span><span class=\"p\">,</span>\n                    <span class=\"s\">'name'</span><span class=\"p\">,</span>\n                    <span class=\"s\">'picture'</span><span class=\"p\">,</span>\n                <span class=\"p\">])</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url_user_info</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">url_user_info_params</span><span class=\"p\">)</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n        <span class=\"n\">user_info</span> <span class=\"o\">=</span> <span class=\"n\">get_user_info</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"n\">debug_result</span><span class=\"p\">[</span><span class=\"s\">'data'</span><span class=\"p\">][</span><span class=\"s\">'user_id'</span><span class=\"p\">],</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">access_token</span><span class=\"p\">)</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">MyUser</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create_facebook_user</span><span class=\"p\">(</span><span class=\"n\">user_info</span><span class=\"p\">)</span>\n        <span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">get_user_token</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">({</span><span class=\"s\">'token'</span><span class=\"p\">:</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">})</span>\n</code></pre>\n</div>\n\n<h4 id=\"각-뷰를-사용한-후-느낀점\">각 뷰를 사용한 후 느낀점</h4>\n<ul>\n  <li>클래스 기반 뷰가 더 명료하고, 짧은 코드로 많은 기능을 수행할 수 있었다.</li>\n  <li>하지만 함수 기반 뷰를 사용해보고 동작하는 플로우를 알고 있었기 때문에 클래스 기반 뷰를 용이하게 활용할 수 있었고, 그 장점이 돋보일 수 있었던 것 같다.</li>\n</ul>\n\n<hr />\n\n<h3 id=\"urlconf로부터-뷰-로직-분리하기\">URLConf로부터 뷰 로직 분리하기</h3>\n<p><strong>URL</strong>은 최대한 유연하고 느슨하게 구성되어야 한다. 따라서 장고는 단순하고 명료하게 URL 라우트를 구성하는 방법을 제공한다.</p>\n<ul>\n  <li>뷰 모듈은 뷰 로직을 포함해야한다.</li>\n  <li>URL 모듈을 URL 로직을 포함해야한다.</li>\n</ul>\n\n<h4 id=\"느슨한-결합loose-coupling을-해야하는-이유\">느슨한 결합(loose coupling)을 해야하는 이유</h4>\n<ul>\n  <li>뷰와 url, 모델 사이에 상호 단단하게 종속적인 결합을 이뤘을 경우,</li>\n  <li>뷰에서 정의된 내용이 재사용되기 어렵다.</li>\n  <li>url의 무한 확장성을 파괴시킨다. 따라서 CBV의 최대 장점인 클래스 상속이 불가능해진다.</li>\n</ul>\n\n<h4 id=\"느슨한-결합-유지하기\">느슨한 결합 유지하기</h4>\n<p>[app-name/views.py]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"n\">import</span><span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"k\">class</span> <span class=\"nc\">TasteListView</span><span class=\"p\">(</span><span class=\"n\">ListView</span><span class=\"p\">):</span>\n\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Tasting</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TasteDetailView</span><span class=\"p\">(</span><span class=\"n\">DetailView</span><span class=\"p\">):</span>\n\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Tasting</span>\n\n<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<p>[app-name/urls.py]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"n\">import</span><span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"n\">url</span><span class=\"p\">(</span>\n\t\t<span class=\"n\">regex</span><span class=\"o\">=</span><span class=\"s\">r'^$'</span><span class=\"p\">,</span>\n\t\t<span class=\"n\">view</span><span class=\"o\">=</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">TasteListVeiw</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span>\n\t\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'list'</span><span class=\"p\">,</span>\n\t<span class=\"p\">),</span>\n\t<span class=\"n\">url</span><span class=\"p\">(</span>\n\t\t<span class=\"n\">regex</span><span class=\"o\">=</span><span class=\"s\">r'^(?P&lt;pk&gt;</span><span class=\"err\">\\</span><span class=\"s\">d+)/$'</span><span class=\"p\">,</span>\n\t\t<span class=\"n\">view</span><span class=\"o\">=</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">TasteDetailVeiw</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span>\n\t\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'detail'</span><span class=\"p\">,</span>\n\t<span class=\"p\">),</span>\n\n\t<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<ul>\n  <li>이로써 파일이 분리됐고, 오히려 코드는 더 늘어났다.</li>\n</ul>\n\n<h5 id=\"이-방식이-과연-괜찮은가\">이 방식이 과연 괜찮은가?</h5>\n<ul>\n  <li>뷰들 사이에서 인자나 속성이 <code class=\"highlighter-rouge\">중복 사용되지 않음</code>으로써 반복되는 작업을 줄일 수 있다.</li>\n  <li>URLConf로부터 모델과 템플릿 이름을 전부 제거했다. <code class=\"highlighter-rouge\">View는 View여야하고 URLConf는 URLConf</code>여야 하기 때문이다. 또한 하나 이상의 URLConf에서 뷰들이 호출될 수 있게 되었다.</li>\n  <li>다른 클래스에서 우리의 뷰를 얼마든지 상속해서 쓸 수 있게되어 클래스 기반이라는 것에 대한 장점을 살리게 된다.</li>\n  <li>URLConf는 한 번에 한 가지씩 업무를 명확하고 매끄럽게 처리해야 한다. 즉, URLConf는 URL 라우팅이라는 한 가지 명확한 작업만 처리해야하고 위 코드는 그것이 가능하다.</li>\n</ul>\n\n<blockquote>\n  <p>늘 URLConf로부터 로직을 분리 운영하도록 하자!</p>\n</blockquote>\n\n<hr />\n\n<h3 id=\"url-namespace\">URL namespace</h3>\n<ul>\n  <li>URL 이름공간은 앱 레벨 또는 인스턴스 레벨에서의 구분자를 제공한다.</li>\n  <li>‘appname_list, appname_detail 등’과 같이 뷰 이름을 따라서 URL 이름을 짓지만, namescape를 이용한 경우 ‘list’, ‘detail’과 같은 명확한 이름을 짓게된다.</li>\n  <li>또한 앱 이름을 입력하거나 부를 필요가 더 이상 없으니 시간이 절약되는 효과도 있다.</li>\n</ul>\n\n<h4 id=\"검색-업그레이드-리팩터링-쉽게-하기\">검색, 업그레이드, 리팩터링 쉽게 하기</h4>\n<ul>\n  <li>‘appname_list, appname_detail’ 같은 코드나 이름은 검색 결과가 나왔을 때 이것이 뷰 이름인지, URL 이름인지 알 수가 없다.</li>\n  <li>반면에 ‘appname:list, appname:detail’이라는 이름은 검색 결과를 좀 더 명확하게 해준다.</li>\n  <li>따라서 새로운 서드 파티 라이브러리와 상호 연동 시에 앱과 프로젝트를 좀 더 쉽게 업그레이드하고 리팩터링하게 만들어 준다.</li>\n</ul>\n\n<hr />\n\n<h3 id=\"장고의-뷰와-함수\">장고의 뷰와 함수</h3>\n<ul>\n  <li>기본적으로 장고의 뷰는 HTTP를 요청하는 객체를 받아서 HTTP를 응답하는 객체로 변경하는 함수다.</li>\n  <li>클래스 기반 뷰의 경우 함수 기반 뷰와 매우 다를 것으로 착각하기 쉽지만, URLConf에서 View.as_view()라는 클래스 메서드는 실제로 호출 가능한 뷰 인스턴스를 반환한다. 즉, 요청/응답 과정을 처리하는 콜백 함수 자체가 함수 기반 뷰와 동일하게 작동한다.</li>\n</ul>\n\n<h4 id=\"뷰의-기본-형태\">뷰의 기본 형태</h4>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># 함수 기반 뷰</span>\n<span class=\"k\">def</span> <span class=\"nf\">function_based_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n\t<span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s\">\"FBV\"</span><span class=\"p\">)</span>\n\n<span class=\"c\"># 클래스 기반 뷰</span>\n<span class=\"k\">class</span> <span class=\"nc\">ClassBasedView</span><span class=\"p\">(</span><span class=\"n\">View</span><span class=\"p\">):</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n\t\t<span class=\"c\"># 비지니스 로직</span>\n\t<span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s\">\"CBV\"</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n<ul>\n  <li>클래스 기반 뷰를 이용할 때 객체 상속을 이용함으로써 코드를 재사용하기 쉬워지고 디자인을 좀 더 유연하게 할 수 있다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "도커 명령어",
      "category" : "도커docker",
      "tags"     : "Docker",
      "url"      : "/%EB%8F%84%EC%BB%A4/docker/2017/07/21/docker-command.html",
      "date"     : "2017-07-21 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>Project Root Directory 바로 하위 Dockerfile 은 eb deploy 할 때, 자동으로 docker build 가 실행된다.</p>\n</blockquote>\n\n<h3 id=\"sudo-없이-명령어-사용하기\">sudo 없이 명령어 사용하기</h3>\n<ul>\n  <li>docker는 기본적으로 root 권한이 필요하다.</li>\n  <li>root가 아닌 사용자가 sudo 없이 명령어를 사용하려면 해당 사용자를 docker 그룹에 추가해야한다.</li>\n</ul>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&gt;&gt;&gt; sudo usermod -aG docker $USER(현재 사용자) / bbungsang('bbungsang'이라는 사용자)\n</code></pre>\n</div>\n\n<h3 id=\"설치-확인하기\">설치 확인하기</h3>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&gt;&gt;&gt; docker version\n</code></pre>\n</div>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">Client</code>와 <code class=\"highlighter-rouge\">Server</code>가 각각 존재하고 있음을 확인할 수 있다.</li>\n  <li>도커 커맨드를 입력하면 도커 클라이언트가 도커 서버로 명령을 전송하고 결과를 받아서 터미널에 출력해주는 것이다.</li>\n</ul>\n\n<h3 id=\"컨테이너-실행하기\">컨테이너 실행하기</h3>\n\n<ul>\n  <li>docker 실행 명령어</li>\n</ul>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&gt;&gt;&gt; docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]\n</code></pre>\n</div>\n\n<ul>\n  <li>‘ubuntu:16.04 컨테이너를 생성하고 컨테이너 내부에 진입하기</li>\n</ul>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&gt;&gt;&gt; docker run ubuntu:16.04\n# 정상적으로 실행됐지만 무엇을 하라고 명령어를 따로 전달하지 않았기 때문에 생성 혹은 (존재할 경우)실행되자마자 종료된다.\n\n&gt;&gt;&gt; docker run --rm -it ubuntu:16.04 /bin/bash\n# -rm : 프로세스 종료시 컨테이너 자동 제거\n# -it : -i와 -t를 동시에 사용한 것, 터미널에서 키보드 입력을 위한 옵션\n# /bin/bash : 컨테이너 내부에 들어가기 위해 bash 쉘 실행\n\n&gt;&gt;&gt; exit\n# bash 쉘 종료, 컨테이너도 같이 종료된다.\n</code></pre>\n</div>\n\n<h3 id=\"기본-명령어\">기본 명령어</h3>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&gt;&gt;&gt; docker ps\n# 컨테이너 목록 확인\n\n&gt;&gt;&gt; docker stop [OPTIONS] CONTAINER [CONTAINER...]\n# 실행 중인 컨테이너 중지, 띄어쓰기로 구분하여 여러개 중지가 가능하다.\n\n&gt;&gt;&gt; docker rm [OPTIONS] CONTAINER [CONTAINER...]\n# 컨데이너 제거, 여러개 제거 가능\n\n&gt;&gt;&gt; docker images [OPTIONS] [REPOSITORY[:TAG]]\n# 이미지 목록 확인\n\n&gt;&gt;&gt; docker pull [OPTIONS] NAME[:TAG|@DIGEST]\n# 이미지 다운로드\n\n&gt;&gt;&gt; docker rmi [OPTIONS] IMAGE [IMAGE...]\n# 이미지 삭제\n</code></pre>\n</div>\n\n<h2 id=\"도커-실행-후-자동-서버-실행-스크립트\">도커 실행 후 자동 서버 실행 스크립트</h2>\n\n<h3 id=\"dockerfiledockerubuntu--변하지-않을-과정으로-확정된-부분을-미리-생성한-것이다\">[.dockerfile/Docker.ubuntu] : 변하지 않을 과정으로, 확정된 부분을 미리 생성한 것이다.</h3>\n\n<ul>\n  <li>해당 스크립트에서는 y/n 에 대해 대답할 수 없기 때문에 -y 옵션을 줘야한다.</li>\n</ul>\n\n<pre><code class=\"language-docker\"># ubuntu 에서 시작\nFROM            ubuntu:16.04\n# 관리자\nMAINTAINER      bbungsang@gmail.com\n\nRUN             apt-get -y update\nRUN             apt-get install -y python-pip\nRUN             apt install -y git vim\n</code></pre>\n\n<ul>\n  <li>의존성 패키지 설치 후, pyenv 설치</li>\n</ul>\n\n<pre><code class=\"language-docker\">RUN             apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \\\nlibreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils\nRUN             curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash\n</code></pre>\n\n<ul>\n  <li>~/.bash_profile 파일 설정 추가 후, 파이썬 3.6.1 설치</li>\n</ul>\n\n<pre><code class=\"language-docker\">RUN             echo 'export PATH=\"/home/ubuntu/.pyenv/bin:$PATH\"' &gt;&gt; ~/.bash_profile\nRUN             echo 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.bash_profile\nRUN             echo 'eval \"$(pyenv virtualenv-init -)\"' &gt;&gt; ~/.bash_profile\nRUN             . ~/.bash_profile\nENV             PATH /root/.pyenv/bin:$PATH\n\nRUN             pyenv install 3.6.1\n</code></pre>\n\n<ul>\n  <li>zhs 설치 후, pyenv를 ~/.zshrc 에 적용, 가상환경 생성</li>\n</ul>\n\n<pre><code class=\"language-docker\">RUN             apt-get -y install zsh\nRUN             wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh || true\nRUN             chsh -s /usr/bin/zsh\n\nRUN             echo 'export PATH=\"/home/ubuntu/.pyenv/bin:$PATH\"' &gt;&gt; ~/.zshrc\nRUN             echo 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.zshrc\nRUN             echo 'eval \"$(pyenv virtualenv-init -)\"' &gt;&gt; ~/.zshrc\n\n# 가상환경 'elass' 생성\nRUN             pyenv virtualenv 3.6.1 elass\n</code></pre>\n\n<ul>\n  <li>uWSGI, Nginx, supervisor 설치</li>\n</ul>\n\n<pre><code class=\"language-docker\">##\n# uWSGI install\n#   virtualenv 내부에서 pip isntall 을 해줘야한다.\n#   local 에서는 pyenv virtualenv elass 명령어를 실행하면 자동으로 가상환경이 적용되었지만,\n#   도커에서는 그럴 수 없으므로, 직접 찾아서 작업할 수 있도록 경로를 다 기입해야 한다.\n#   가상환경 내부 binary 의 pip 를 실행해서 install uwsgi\n##\nRUN             /root/.pyenv/versions/elass/bin/pip install uwsgi\nRUN             apt-get -y install nginx\nRUN             apt-get -y install supervisor\n</code></pre>\n"
    } ,
  
    {
      "title"    : "WSGI와 uWSGI",
      "category" : "서버server",
      "tags"     : "Nginx, WSGI",
      "url"      : "/%EC%84%9C%EB%B2%84/server/2017/07/20/wsgi.html",
      "date"     : "2017-07-20 00:00:00 +0900",
      "content"   : "<h2 id=\"cgicommon-gateway-interface\">CGI(Common Gateway Interface)</h2>\n<ul>\n  <li><code class=\"highlighter-rouge\">웹 서버</code>는 Static Contents, 즉 내용에 변화가 없는 그대로의 정적인 것을 전달하는 역할을 한다.</li>\n  <li>만약 클라이언트로부터 요청을 전달받을 때마다 달라지는 현재 시간 혹은 예약 현황 등 (Dynamic Contents)을 응답해야한다면, 해당 요청에 맞게 데이터를 만들어주는 <code class=\"highlighter-rouge\">백엔드</code>에게 요청을 전달해야한다.</li>\n  <li>요청에 따라서 데이터를 만들어주는 것을 <code class=\"highlighter-rouge\">프로그램</code>(장고 어플리케이션)이라 부르며, <strong>CGI는 웹서버와 프로그램 사이에서 Interface(규칙)을 제공</strong> 한다.</li>\n</ul>\n\n<h2 id=\"wsgiweb-server-gateway-interface\">WSGI(Web Server Gateway Interface)</h2>\n<ul>\n  <li>CGI의 일종으로, 웹 서버와 <code class=\"highlighter-rouge\">파이썬으로 작성된</code> Web Application 또는 Framework의 인터페이스를 정의해놓은 규칙이다.</li>\n  <li>CGI가 느리고 제약 사항이 많았으며 Python App에서는 CGI, mod_python, Fast CGI 등 한정적인 인터페이스만을 사용하기 때문에 WSGI가 <code class=\"highlighter-rouge\">웹 서버와 파이썬 어플리케이션의 표준 인터페이스</code>로 개발되었다.</li>\n</ul>\n\n<h3 id=\"web-server-와-web-app\">Web Server 와 Web App</h3>\n<ul>\n  <li>Web Server : Apache, Nginx 등</li>\n  <li>Web App : Django, Flask 등</li>\n  <li>웹 서버는 웹 어플리케이션을 실행한다. Request는 App 단에서 실행되며, Response는 Callback 함수를 통해 서버로 되돌려보내진다.</li>\n</ul>\n\n<p><img src=\"http://localhost:4000/assets/wsgi.png\" alt=\"wsgi structure\" class=\"center-image\" /></p>\n\n<h3 id=\"wsgi-왜-필요할까\">WSGI, 왜 필요할까?</h3>\n<ul>\n  <li>WSGI는 많은 요청을 다룰 수 있도록 설계되어있다. 하지만 Framework는 스스로 그 많은 요청을 실행하고 처리하지 못하기 때문에 WSGI라는 중간 단계를 거칠 수 밖에 없다.</li>\n  <li>또한 WSGI는 Python Web의 개발 속도를 올려준다. 즉, Python Web은 불가피하게 CGI를 사용할 수 밖에 없는데, 그 중에서 WSGI는 기초적인 것들만 알아도 사용할 수 있기 때문에 별도로 사용법을 익혀야하는 시간을 줄일 수 있다.</li>\n</ul>\n\n<h2 id=\"uwsgi\">uWSGI</h2>\n<ul>\n  <li>Python WSGI의 종류(그 밖에 Bjoern, Mod_wsgi, Cunicorn가 있다.) 중 하나이며,</li>\n  <li>Hosting Server에서 Full Stack 개발이 가능하도록 개발이 되었기 때문에 확장성이 뛰어나며 강력하다.</li>\n  <li>Objective-C, C, C++ 등과 다양한 언어 위에서 작동하지만 너무 무거울 수 있다.</li>\n</ul>\n\n<h3 id=\"왜-nginx와-같이-사용하는가\">왜 Nginx와 같이 사용하는가?</h3>\n<ul>\n  <li>uWSGI만으로 서비스를 제공하는 것이 가능한가? 가능하다!</li>\n  <li>그렇다면 왜 Nginx와 같이 사용하는가? Nginx가 가진 향상된 Static Contents(CSS, JavaScript 등) 핸들링을 통해서 서버에 발생되는 부하를 줄일 수 있다.</li>\n</ul>\n\n<p><a href=\"http://localhost:4000/서버/server/2017/07/20/nginx-1.html\" class=\"a-tag-deco\">Nginx란?</a></p>\n"
    } ,
  
    {
      "title"    : "NGINX (1)",
      "category" : "서버server",
      "tags"     : "Nginx, WSGI",
      "url"      : "/%EC%84%9C%EB%B2%84/server/2017/07/20/nginx-1.html",
      "date"     : "2017-07-20 00:00:00 +0900",
      "content"   : "<h2 id=\"웹web이란\">웹(Web)이란?</h2>\n<ul>\n  <li><code class=\"highlighter-rouge\">www</code> 는 ‘World Wide Web’의 약자로 네트워크 체계 중 하나인 <code class=\"highlighter-rouge\">인터넷</code> 에서 동작하는 통신 규약 중 하나이다.</li>\n  <li>즉 인터넷은 네트워크 체계 중 하나이고, 웹은 인터넷에서 작동되는 하나의 개념인 것이다. (인터넷에서 작동되는 규약으로는 FTP, EMAIL 등이 있다.)</li>\n  <li><code class=\"highlighter-rouge\">인터넷 != 웹</code> 이지만 대부분 <code class=\"highlighter-rouge\">인터넷 == 웹</code> 으로 알고 있는 까닭은 웹이 가장 성공한 인터넷 서비스이기 때문이다.</li>\n</ul>\n\n<h2 id=\"http\">HTTP</h2>\n<ul>\n  <li>웹 서버(백엔드)와 웹 클라이언트(프론트엔드)가 서로 정보를 주고 받기 위한 약속(protocol)이다.</li>\n  <li>어떻게 요청을 해야하고, 응답은 어떻게 해야하는지에 대한 규칙을 정해둔 것이다.</li>\n</ul>\n\n<h2 id=\"web-serverhttp-server서버-어플리케이션\">Web Server(=Http Server)(!=서버 어플리케이션)</h2>\n<ul>\n  <li>웹 브라우저와 같은 클라이언트로부터 HTTP 요청을 받아들이고, HTML 문서와 같은 웹 페이지를 반환하는 프로그램이다.</li>\n  <li>대표적인 Web Server로 <code class=\"highlighter-rouge\">Apache</code> 가 있지만 <code class=\"highlighter-rouge\">Nginx</code> 가 Apache의 독주에 제동을 걸고 있다.</li>\n</ul>\n\n<h2 id=\"nginx\">NGINX</h2>\n<ul>\n  <li>아파치에 비해 <strong>더 적은 자원으로 더 빠르게</strong> 데이터를 서비스 할 수 있다.</li>\n</ul>\n\n<p><img src=\"http://localhost:4000/assets/nginx.png\" alt=\"nginx logo\" class=\"center-image\" /></p>\n\n<h3 id=\"1-nginx-support-플러그인-설치\">1. Nginx Support 플러그인 설치</h3>\n<ul>\n  <li><strong>ini(initialization)</strong> : 설정 파일에 대한 표준, 텍스트 파일로 이루어져 있고, .ini 라는 파일 확장자가 따라오지만 .cfg 또는 .conf 등의 다른 확장자를 사용하기도 한다.</li>\n</ul>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>매개변수 : 이름 = 값\n섹션 : [섹션] 매개 변수는 임의의 이름으로 지정된 여러 개의 섹션으로 구분할 수 있다.\n주석 : ;\n</code></pre>\n</div>\n<h4 id=\"서버인스턴스-nginx-uwsgi-django-동작-구조\">서버인스턴스-Nginx-<a href=\"http://localhost:4000/server/2017/07/20/wsgi.html\">uWSGI</a>-Django 동작 구조</h4>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>EC2 -(http)-&gt; Django\nEC2 -(http)-&gt; uwsgi -(WSGI)-&gt; Django\nEC2 -(http)-&gt; Nginx -(uWSGI's UnixSocket)-&gt; uWSGI -(WSGI)-&gt; Django\n</code></pre>\n</div>\n\n<h3 id=\"서버에서-nginx-관련-설정하기\">서버에서 Nginx 관련 설정하기</h3>\n<ul>\n  <li>Nginx 설정은 Nginx가 어떻게 동작해야 하는가를 지정하는 기능이다.</li>\n  <li>설정 파일은 대부분 conf 디렉토리 아래에 위치한다.</li>\n</ul>\n\n<h4 id=\"설정-파일의-역할\">설정 파일의 역할</h4>\n<ul>\n  <li>nginx.conf : 메인 설정 파일</li>\n  <li>sites-available : 비활성화된 모든 사이트들의 설정 파일이 위치</li>\n  <li>sites-enable : Symbolic link로 서빙할 (활성화된)사이트만 위치</li>\n</ul>\n\n<h4 id=\"가상서버-설정-파일-작성\">가상서버 설정 파일 작성</h4>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># sudo vi /etc/nginx/sites-available/mysite</span>\n\n<span class=\"c\">##</span>\n<span class=\"c\"># server 블록</span>\n<span class=\"c\">#\t- 하나의 웹사이트를 선언하는데 사용된다.</span>\n<span class=\"c\">#\t- 가상 호스팅(Virtual Host)의 개념이다.</span>\n<span class=\"c\"># - 예를 들어 하나의 서버로 http://bbungsang.kr 과 http://bbungsang.net 을 동시에 운영하고 싶을 경우 사용할 수 있다.</span>\n<span class=\"c\">##</span>\n<span class=\"n\">server</span> <span class=\"p\">{</span>\n\t<span class=\"n\">listen</span> <span class=\"mi\">80</span><span class=\"p\">;</span>\n\t<span class=\"n\">server_name</span> <span class=\"n\">localhost</span><span class=\"p\">;</span>\n\t<span class=\"n\">charset</span> <span class=\"n\">utf</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"p\">;</span>\n\t<span class=\"n\">client_max_body_size</span> <span class=\"mi\">128</span><span class=\"n\">M</span><span class=\"p\">;</span>\n\n\t<span class=\"c\">##</span>\n\t<span class=\"c\"># location 블록</span>\n\t<span class=\"c\">#\t- server 블록 안에 있으면서 특정 URL을 처리하는 방법을 정의한다.</span>\n\t<span class=\"c\">##</span>\n\t<span class=\"n\">location</span> <span class=\"o\">/</span> <span class=\"p\">{</span>\n\t\t<span class=\"c\"># EC2 -(http)-&gt; Nginx -(uWSGI's UnixSocket)-&gt; uWSGI -(WSGI)-&gt; Django</span>\n\t\t<span class=\"c\"># socket 요청을 받겠다고 설정한 것, Nginx가 socket에 정보를 전달하고 해당 정보를 socket이 uWSGI에 전달</span>\n\t\t<span class=\"n\">uwsgi_pass</span>\t<span class=\"n\">unix</span><span class=\"p\">:</span><span class=\"o\">///</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">ec2</span><span class=\"o\">.</span><span class=\"n\">sock</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">include</span>\t\t<span class=\"n\">uwsgi_params</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "도커(Docker)란?",
      "category" : "도커docker",
      "tags"     : "Docker",
      "url"      : "/%EB%8F%84%EC%BB%A4/docker/2017/07/03/what-is-docker.html",
      "date"     : "2017-07-03 00:00:00 +0900",
      "content"   : "<h4 id=\"도커는-리눅스-컨테이너-기반의-오픈소스-가상화-플랫폼이다\">도커는 리눅스 컨테이너 기반의 오픈소스 가상화 플랫폼이다.</h4>\n\n<h2 id=\"컨테이너\">컨테이너</h2>\n<ul>\n  <li>일반적으로 알고있는 컨테이너와 같이 다양한 프로그램 및 실행 환경을 <strong>컨테이너</strong> 로 <code class=\"highlighter-rouge\">추상화</code>하고, 각각 <strong>동일한 인터페이스</strong> 를 제공하여 프로그램의 배포 및 관리를 단순하게 해준다.</li>\n  <li>즉, <strong>격리된 공간</strong> 에서 프로세스가 동작하는 <code class=\"highlighter-rouge\">가상화</code> 기술이다.</li>\n</ul>\n\n<p><img src=\"http://localhost:4000/assets/docker-works.png\" alt=\"docker container\" class=\"center-image\" /></p>\n\n<h4 id=\"기존-가상화-기술\">[기존 가상화 기술]</h4>\n<ul>\n  <li><strong>OS</strong> 를 가상화, VMware, VirtualBox 등</li>\n  <li><em>전가상화(Full Virtualization)</em> : 호스트 OS 위에 게스트 OS 전체를 가상화하여 사용하는 방식, 무겁고 느리다.</li>\n</ul>\n\n<h4 id=\"클라우드-서비스-가상화-기술\">[클라우드 서비스 가상화 기술]</h4>\n<ul>\n  <li><strong>CPU</strong> 를 가상화, KVM, Xen 등</li>\n  <li><em>반가상화(Paravirtualization)</em> : 게스트 OS가 필요하지만 전체 OS를 가상화하는 방식은 아니다.</li>\n</ul>\n\n<blockquote>\n  <p>하지만 전가상화, 반가상화 모두 추가적인 OS를 설치하여 가상화하는 방법이기 때문에 성능적인 문제가 발생한다. ➜ <strong>프로세스 격리</strong> 방식 등장!</p>\n</blockquote>\n\n<h4 id=\"도커-가상화-기술\">[도커 가상화 기술]</h4>\n<ul>\n  <li><strong>프로세스 격리</strong>, CPU나 메모리는 딱 프로세스가 필요한 만큼만 추가로 사용하고 성능적으로 거의 손실이 없다.</li>\n  <li>서버 하나에 여러 개의 컨테이너를 실행할 경우, 서로 영향을 미치지 않고 독립적으로 실행되어 굉장히 가벼운 가상머신을 사용하는 듯한 느낌을 준다.</li>\n  <li>새로운 컨테이너를 만드는 데 걸리는 시간은 거의 1~2초 가량, 실행 중인 컨테이너에 접속하여 ‘apt-get’ 또는 ‘yum’ 으로 패키지를 설치할 수 있으며, 사용자 추가 및 여러 개의 프로세스를 백그라운드로 실행 가능하다.</li>\n</ul>\n\n<h2 id=\"이미지\">이미지</h2>\n<ul>\n  <li>컨테이너 실행에 필요한 파일과 설정 값 등을 포함하고 있는 것으로 상태값을 가지지 않으며 변하지 않는다.</li>\n  <li><code class=\"highlighter-rouge\">컨테이너 = 이미지를 실행한 상태</code>, 같은 이미지에서 여러 개의 컨테이너를 생성할 수 있고, 컨테이너의 상태가 바뀌거나 삭제되더라도 이미지는 변하지 않고 그대로 남아있다.</li>\n  <li>이미지는 컨테이너를 실행하기 위한 모든 정보를 가지고 있기 때문에 컴파일 및 여러 패키지 설치가 필요없다.</li>\n  <li>서버가 추가되더라도 만들어 놓은 이미지를 다운받고 컨테이너를 생성만하면 된다.</li>\n  <li>이미지는 ‘Docker hub’에 등록하거나 ‘Docker Registry 저장소’를 직접 만들어 관리할 수 있다.</li>\n</ul>\n\n<blockquote>\n  <p>물리적으로 서버를 줄이면 해당 서버의 데이터가 통째로 날아갈 수도 있기 때문에 서버 개수와 데이터를 저장하는 공간을 별도로 해야한다.</p>\n</blockquote>\n\n<h3 id=\"레이어-저장-방식\">레이어 저장 방식</h3>\n<ul>\n  <li>이미지는 컨테이너 실행을 위한 모든 정보를 가지고 있어서 용량이 엄청나다.</li>\n  <li>하지만 처음 이미지를 다운 받을 때에만 크게 부담이 작용할 뿐, <strong>레이어(Layer)</strong> 라는 개념을 사용함으로써 <strong>파일 추가/수정</strong> 시,  <strong>새로운 레이어만 다운</strong> 받고 이후의 레이어가 이전 레이어를 <strong>참조</strong> 하는 형태로 작용하기 때문에 굉장히 효율적으로 이미지 관리가 가능하다.</li>\n  <li>이미지는 <strong>URL 방식</strong>으로 관리되며 <strong>태그</strong>를 붙일 수 있다.</li>\n  <li>태그 기능을 잘 이용하면 테스트나 롤백도 쉽게 할 수 있다.</li>\n</ul>\n\n<blockquote>\n  <p>배포용 컨테이너의 경우, 이미지는 로컬에서 다 만들어서 넘겨주기  때문에 zsh, git 등과 같은 패키지가 필요하지 않다.</p>\n</blockquote>\n\n<h3 id=\"이미지-생성\">이미지 생성</h3>\n<ul>\n  <li>도커는 이미지를 만들기 위해 <code class=\"highlighter-rouge\">Dockerfile</code>이라는 파일 자체 <strong>DSL(Domain-Specific-Language)</strong> 를 이용하여 이미지 생성 과정을 적는다.</li>\n  <li>서버에 어떤 프로그램을 설치하기 위해 메모장에 따로 적어두고 각각 실행할 필요가 없다. <code class=\"highlighter-rouge\">Dockerfile</code>에 전부 기입하고 그 자체로 관리하면 된다.</li>\n  <li>해당 파일은 소스와 함께 버전 관리가 가능하며 원하면 누구나 이미지 생성 과정을 보고 수정할 수 있다.</li>\n</ul>\n\n<blockquote>\n  <p>로컬에서 도커로 서비스가 작동되면, 서버에서도 동일하게 작동한다.</p>\n</blockquote>\n\n<p>[도커 명령어]</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code># 이미지 생성\n&gt;&gt;&gt; docker run ubuntu:16.04\n# 생성한 이미지 실행\n&gt;&gt;&gt; docker run --rm -it ubuntu:16.04 /bin/bash\n#\n&gt;&gt;&gt; docker ps\n&gt;&gt;&gt; docker cp . &lt;image-name&gt;:/srv/used-book-store\n&gt;&gt;&gt; docker stop &lt;imgae-name&gt;\n&gt;&gt;&gt; docker run --rm -it updated_ubuntu /bin/zsh\n&gt;&gt;&gt; docker build -t updated ubuntu . # Dockerfile 명령어가 순차적으로 실행, 그 결과가 &gt;&gt;&gt; updated_ubuntu 라는 이미지로 형성\n&gt;&gt;&gt; docker run --rm -it updated_ubuntu /bin/bash\n</code></pre>\n</div>\n\n<p><img src=\"http://localhost:4000/assets/docker-logo.png\" alt=\"docer logo\" class=\"center-image\" /></p>\n\n<blockquote>\n  <p>최근 도커 사용 경향 (≧ω≦)ゞ <br /></p>\n  <ul>\n    <li>서버 1개가 받아들이는 용량은 한정되어있다. 따라서 호스트 안 쪽에서 여러 컨테이너가 작동될 수 있지만, 최근 컨테이너 하나만 작동시키는 경향을 따르고 있다. 즉, <strong>서버 1개에 1개의 프로세서</strong>가 작동시키는 방식이 대세이다. <br /></li>\n    <li>클라이언트로부터 장고가 받는 요청, 장고가 백엔드 처리하는 것, 백엔드를 데이터베이스에 요청 처리하는 것 등 각각의 부하가 다른다. 도커는 이에 따라서 자동으로 스케일링이 되도록한다. <br /></li>\n    <li>스케일링이란? 서버 1개가 받아들이는 용량은 한정, 클라이언트의 요청은 갑자기 늘기도 줄기도 한다. 요청이 늘어나면 물리적인 서버를 늘려야하고, 어느 순간 줄어들면 줄여야한다. 하지만 이 작업은 몹시 어려운 일이다. AWS, Azure 와 같은 클라우드가 늘리고 줄이는 일을 자동으로 처리해주기 때문에 일반 어플리케이션 개발자도 쉽게 서버 관리에 접근할 수 있다.</li>\n  </ul>\n</blockquote>\n"
    } ,
  
    {
      "title"    : "[AWS] 4. AWS 서버 다루기",
      "category" : "AWSaws",
      "tags"     : "aws, django",
      "url"      : "/aws/2017/06/30/(4)Amazon-linux-server.html",
      "date"     : "2017-06-30 00:00:00 +0900",
      "content"   : "<h2 id=\"aws-서버-실행하기\">AWS 서버 실행하기</h2>\n\n<p>서버 실행 at 터미널</p>\n<blockquote>\n  <p>ssh -i ~/.ssh/bbungsang.pem ubuntu@ec2-11-111-111-11.ap-northeast-2.compute.amazonaws.com</p>\n</blockquote>\n\n<p><br /></p>\n\n<h5 id=\"--해당-서버에-처음-접속한-것이라면-마치-처음으로-우분투-리눅스-운영체제를-실행하는-것과-같은-것이므로-필요한-패키지를-설치해야한다\">- 해당 서버에 처음 접속한 것이라면 마치 처음으로 우분투 리눅스 운영체제를 실행하는 것과 같은 것이므로 필요한 패키지를 설치해야한다.</h5>\n\n<h4 id=\"python-pip-설치\">python-pip 설치</h4>\n<p>sudo apt-get install python-pip</p>\n\n<h4 id=\"zsh-설치\">zsh 설치</h4>\n<p>sudo apt-get install zsh</p>\n\n<h4 id=\"oh-my-zsh-설치\">oh-my-zsh 설치</h4>\n<p>sudo curl -l http://install.ohmyz.sh | sh</p>\n\n<h4 id=\"default-shell-변경\">Default shell 변경</h4>\n<p>sudo chsh ubuntu -s /usr/bin/zsh</p>\n\n<h4 id=\"pyenv-requirements-설치\">pyenv requirements 설치</h4>\n<p>sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \\\nlibreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils</p>\n\n<h4 id=\"pyenv-설치\">pyenv 설치</h4>\n<p>curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</p>\n\n<h4 id=\"pyenv-설정을-zshrc-에-기록\">pyenv 설정을 .zshrc 에 기록</h4>\n<p>vi ~/.zshrc <br />\nexport PATH=”/home/ubuntu/.pyenv/bin:$PATH” <br />\neval “$(pyenv init -)” <br />\neval “$(pyenv virtualenv-init -)”</p>\n\n<h3 id=\"aws-cli-통해서-로컬에-인스턴스-파일-전송하기\">aws cli 통해서 로컬에 인스턴스 파일 전송하기</h3>\n<p>로컬 컴퓨터와 Linux 인스턴스 간에 파일을 전송하는 방법은 SCP(Secure Copy)를 사용하는 것이다.</p>\n\n<ol>\n  <li>\n    <p>(선택사항) <code class=\"highlighter-rouge\">aws ec2 get-console-output --instance-id &lt;해당 인터페이스의 아이디&gt;</code> 을 통해 얻은 SSH HOST KEY FINGERPRINTS 와 aws 페이지의 finger prints 와 비교한다.</p>\n  </li>\n  <li>\n    <p>명령 쉘에서 지정한 private key 파일의 위치로 이동한다.</p>\n  </li>\n  <li>\n    <p>chomod 를 사용하여 private key 파일을 공개적으로 볼 수 있는지 확인한다. <code class=\"highlighter-rouge\">chmod 400 my-key-pair.pem</code></p>\n  </li>\n  <li>\n    <p>인스턴스의 Public DNS 를 사용하여 인스턴스 파일을 전송한다.</p>\n    <ul>\n      <li><code class=\"highlighter-rouge\">scp -i ~/.ssh/bbungsang.pem -r /home/bbungsang/deploy-ec2 ubuntu@ec2-11-111-111-11.ap-northeast-2.compute.amazonaws.com:/srv/deploy_ec2</code></li>\n      <li>그 전에, AWS 서버의 root 위치의 /srv/ 의 사용자 권한을 살펴보고 권한자가 root 라면, <code class=\"highlighter-rouge\">sudo chown -R ubuntu:ubuntu /srv/</code> 를 통해서 권한을 바꿔준다. 이를 통해서 ubuntu 계정이 접근하면, 쓰기 권한을 받을 수 있다.</li>\n    </ul>\n  </li>\n</ol>\n\n<blockquote>\n  <p>명령어 살펴보기  (๑•̀ㅂ•́)و✧</p>\n  <ul>\n    <li>scp -i ~/.ssh/bbungsang.pem -r /home/bbungsang/deploy-ec2 ubuntu@ec2-11-111-111-11.ap-northeast-2.compute.amazonaws.com:/srv/deploy_ec2</li>\n    <li>scp 는 원래 파일 1개만 업로드한다. 하지만 폴더 자체를 업로드하고 싶다면, 옵션 사항을 주면 된다.</li>\n    <li><strong>-r .</strong> : <code class=\"highlighter-rouge\">r</code> 은 recursive <code class=\"highlighter-rouge\">.</code> 은 앞에 설정한 현재 폴더를 가리킨다.</li>\n    <li>현재 폴더의 모든 내용을 ubuntu server 의 deploy_ec2 라는 폴더 안에 업로드한다는 의미를 가지고 있다.</li>\n  </ul>\n</blockquote>\n\n<h3 id=\"간단한-명령어로-로컬-인스턴스-파일-전송하기\">간단한 명령어로 로컬 인스턴스 파일 전송하기</h3>\n<p>[~/.zshrc]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"n\">alias</span> <span class=\"n\">con</span><span class=\"o\">-</span><span class=\"n\">ec2</span><span class=\"o\">=</span><span class=\"s\">\"ssh -i ~/.ssh/bbungsang.pem ubuntu@ec2-11-111-111-11.ap-northeast-2.compute.amazonaws.com\"</span>\n<span class=\"n\">alias</span> <span class=\"n\">delete</span><span class=\"o\">-</span><span class=\"n\">ec2</span><span class=\"o\">=</span><span class=\"s\">\"scp -i ~/.ssh/bbungsang.pem /home/bbungsang/deploy-ec2 ubuntu@ec2-11-111-111-11.ap-northeast-2.compute.amazonaws.com rm -rf /srv/deploy_ec2\"</span>\n<span class=\"n\">alias</span> <span class=\"n\">scp</span><span class=\"o\">-</span><span class=\"n\">ec2</span><span class=\"o\">-</span><span class=\"n\">ori</span><span class=\"o\">=</span><span class=\"s\">\"scp -i ~/.ssh/bbungsang.pem -r /home/bbungsang/deploy-ec2 ubuntu@ec2-11-111-111-11.ap-northeast-2.compute.amazonaws.com:/srv/deploy_ec2\"</span>\n<span class=\"n\">alias</span> <span class=\"n\">scp</span><span class=\"o\">-</span><span class=\"n\">ec2</span><span class=\"o\">=</span><span class=\"s\">\"delete-ec2 &amp;&amp; scp-ec2-ori\"</span>\n</code></pre>\n</div>\n<ul>\n  <li>‘con-ec2’, ‘scp-ec2’ 의 간단한 명령어를 통해서 서버 실행과 인스턴스 파일 업로드가 가능해진다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[AWS] 3. SSH을 이용하여 Linux 인스턴스에 연결하기",
      "category" : "AWSaws",
      "tags"     : "aws, django, ssh",
      "url"      : "/aws/2017/06/29/(3)SSH-Linux-%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%89%E1%85%B3%E1%84%90%E1%85%A5%E1%86%AB%E1%84%89%E1%85%B3.html",
      "date"     : "2017-06-29 00:00:00 +0900",
      "content"   : "<h2 id=\"ssh-를-사용하여-linux-인스턴스에-연결하기\">SSH 를 사용하여 Linux 인스턴스에 연결하기</h2>\n<p>그 전에 SSH 클라이언트를 설치한다. Linux 의 경우 기본적으로 포함되어 있다.</p>\n<ol>\n  <li>private key(.pem) 와 <em>user_name@public_dns_name</em> 을 지정한다.</li>\n  <li>Amazon Linux 의 경우, 사용자 이름은 <code class=\"highlighter-rouge\">ec2_user</code> Ubuntu 의 경우, 사용자 이름은 <code class=\"highlighter-rouge\">ubuntu</code> 또는 <code class=\"highlighter-rouge\">root</code> 이다.</li>\n</ol>\n\n<blockquote>\n  <p>Ubuntu 기준</p>\n</blockquote>\n\n<p><code class=\"highlighter-rouge\">ssh -i /path/key_pair_name.pem ubuntu@ec2-198-51-100-1.compute-1.amazonaws.com(형태의 public_dns_name)</code>\n<br /><br />\n[UNPROTECTED PRIVATE KEY FILE ERROR]</p>\n<div class=\"language-text highlighter-rouge\"><pre class=\"highlight\"><code>WARNING: UNPROTECTED PRIVATE KEY FILE!\n\n[...]\n</code></pre>\n</div>\n<ul>\n  <li>이와 같은 에러를 뿜뿜할 경우, chmod 400 으로 소유주만 읽을 수 있도록 권한을 설정한다.</li>\n  <li><code class=\"highlighter-rouge\">chmod 400 bbungsang.pem</code></li>\n</ul>\n\n<p>다시 <code class=\"highlighter-rouge\">ssh -i /path/key_pair_name.pem ubuntu@ec2-198-51-100-1.compute-1.amazonaws.com</code> 을 입력하면, 아마존 웹 서버 구동 성공!!</p>\n\n<h2 id=\"aws-명령어-입력하기\">AWS 명령어 입력하기</h2>\n<ul>\n  <li>지금까지 UI 를 통해서 만든 인스턴스와 같이 AWS 에서 제공해주는 기능을 커맨드 라인을 통해서 실행할 수 있다.</li>\n  <li>이를 위해서는 <code class=\"highlighter-rouge\">aws cli</code> 를 설치해야 한다.  (cli = command line interface)</li>\n</ul>\n\n<blockquote>\n  <p>finger printer(지문)</p>\n  <ul>\n    <li>공개키로 만들어낸 특정 문자열, 본래 공개키의 길이는 엄청 길다. 이를 사람이 눈으로 보고 비교할 만큼 쉽게 쓰기 위해서 있는 것이다.</li>\n    <li>EC2 Key Pair 에 명시되어 있다.</li>\n  </ul>\n</blockquote>\n\n<ul>\n  <li>aws ec2 get-console-output –instance-id <해당 인터페이스의=\"\" 아이디=\"\"></해당></li>\n  <li>하지만 에러가 난다. UI 상에선 로그인 과정을 거쳐서 특정 유저에게 접근 권한을 부여하지만, 커맨드 라인에서는 이와 같은 과정이 없기 때문에 access key 가 필요하다.</li>\n</ul>\n\n<blockquote>\n  <p>access key 생성</p>\n  <ul>\n    <li>AWS 페이지의 I AM 에서 Add User 를 통해서 유저를 생성한다.</li>\n    <li>[Set permissions for EC2-User] : Attach existing policies directly 클릭</li>\n    <li>[Policy type] 목록 : AmazonEC2FullAccess 선택</li>\n    <li>secret key 는 생성 후 단 한 번만 제공해준다. 따라서 따로 저장해두는 것을 권장한다.</li>\n    <li>[커맨드 라인] : aws configure 을 입력 후,</li>\n  </ul>\n</blockquote>\n\n<blockquote>\n  <div class=\"language-text highlighter-rouge\"><pre class=\"highlight\"><code>AWS Access Key ID : 생성된 access key\nAWS Secret Access Key : 생성된 secret key\nDefault region name : ap-northeast-2\nDefault output format : json\n</code></pre>\n  </div>\n</blockquote>\n"
    } ,
  
    {
      "title"    : "[AWS] 2. EC2 인스턴스 생성하기",
      "category" : "AWSaws",
      "tags"     : "aws, django, key pair",
      "url"      : "/aws/2017/06/29/(2)EC2-%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%89%E1%85%B3%E1%84%90%E1%85%A5%E1%86%AB%E1%84%89%E1%85%B3-%E1%84%89%E1%85%A2%E1%86%BC%E1%84%89%E1%85%A5%E1%86%BC%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5.html",
      "date"     : "2017-06-29 00:00:00 +0900",
      "content"   : "<h2 id=\"개념-짚고가기\">개념 짚고가기</h2>\n<ul>\n  <li><strong>Ubuntu Linux</strong> : 서버의 <code class=\"highlighter-rouge\">OS</code></li>\n  <li><strong>Nginx</strong> : <code class=\"highlighter-rouge\">웹 서버</code>, 클라이언트로부터 HTTP 요청을 받아 정적인 페이지를 돌려준다.</li>\n  <li><strong>Django</strong> : <code class=\"highlighter-rouge\">웹 어플리케이션</code>, 웹 요청에 대해 동적데이터를 돌려준다.</li>\n  <li><strong>uWSGI</strong> : 웹 서버에서 받은 요청을 웹 어플리케이션에서 처리하도록 도와준다.</li>\n</ul>\n\n<h2 id=\"instance-생성하기\">Instance 생성하기</h2>\n<blockquote>\n  <h4 id=\"ec2elastic-compute-cloud\">EC2(Elastic Compute Cloud)</h4>\n  <p>아마존이 가지고 있는 컴퓨팅 자원 중에서 일부분만 사용자에게 제공하여 웹 규모의 작업을 할 수 있도록 한다.</p>\n</blockquote>\n\n<p><br /></p>\n<h4 id=\"key-pairs-생성\">Key Pairs 생성</h4>\n\n<ul>\n  <li>\n    <p>AWS services ➜ EC2 ➜ Launch Instance</p>\n  </li>\n  <li>Step1: Choose an Amazon Machine Image\n    <ul>\n      <li>Ubuntu Server 16.04 (HVM), SSD Volume Type 을 선택한다.</li>\n    </ul>\n  </li>\n  <li>Step2: Choose an Instance Type\n    <ul>\n      <li>t2.micro 을 선택을 끝으로 Review and Launch 클릭</li>\n    </ul>\n  </li>\n  <li>Step7에서 Launch 클릭: Select an existing key pair or create a new key pair\n    <ul>\n      <li>인스턴스에 접근하기 위해서 public key 와 private key(key pair) 가 필요하다. <br /></li>\n      <li>public key 의 경우 해당 서버에 이미 저장되어 있을 것이다. <br /></li>\n      <li>key pair 를 만든 순간 private 키를 단 한 번만 제공한다. 따라서 local에 저장해놓는 것을 권장한다. <br /></li>\n      <li>Create a new key pair ➜ Key pair name(아무거나) ➜ Download Key Pair(다운로드 폴더에 <code class=\"highlighter-rouge\">Key-pair-name.pem</code>의 형태로 저장될 것이다.)</li>\n    </ul>\n  </li>\n  <li>다운받은 .pem 파일을 ~/.ssh 폴더에 넣기\n    <ul>\n      <li>mv bbungsang.pem ~/.ssh</li>\n    </ul>\n  </li>\n  <li>Launch Instances 클릭하면, 생성되는 중인 인스턴스를 확인할 수 있다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[AWS] 1. 장고 settings 설정하기",
      "category" : "AWSaws",
      "tags"     : "aws, django, json",
      "url"      : "/aws/2017/06/29/(1)django-settings-%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5.html",
      "date"     : "2017-06-29 00:00:00 +0900",
      "content"   : "<h2 id=\"1-가상-환경-만든-후-장고-프로젝트-실행하기\">1. 가상 환경 만든 후, 장고 프로젝트 실행하기</h2>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span> <span class=\"n\">pyenv</span> <span class=\"n\">virtualenv</span> <span class=\"mf\">3.4</span><span class=\"o\">.</span><span class=\"mi\">3</span> <span class=\"n\">deploy</span><span class=\"o\">-</span><span class=\"n\">ec2</span>\n<span class=\"c\"># 해당 디렉토리 이동 후 가상 환경 적용</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">pyenv</span> <span class=\"n\">local</span> <span class=\"n\">deploy</span><span class=\"o\">-</span><span class=\"n\">ec2</span>\n<span class=\"c\"># 장고 설치 후 프로젝트 생성하기</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">django</span><span class=\"o\">-</span><span class=\"n\">admin</span> <span class=\"n\">startproject</span> <span class=\"n\">deploy</span><span class=\"o\">-</span><span class=\"n\">ec2</span>\n</code></pre>\n</div>\n<p><br /></p>\n<h2 id=\"2-settings-설정하기\">2. settings 설정하기</h2>\n<h4 id=\"디렉토리-구조\">디렉토리 구조</h4>\n\n<pre><code class=\"language-txt\">project_folder/\n    .config_secret/\n        settings_common.json\n        settings_debug.json\n        settings_deploy.json\n    .config\n        # 기존 settings.py 는 제거한다.\n        settings\n            __init__\n            base.py\n            debug.py\n        [...]\n    django_app/\n    [...]\n</code></pre>\n<p><br /></p>\n<h4 id=\"config_secret-의-json-파일\">.config_secret 의 json 파일</h4>\n<ul>\n  <li><code class=\"highlighter-rouge\">배포 환경</code>과 <code class=\"highlighter-rouge\">로컬 환경</code>에서 사용할 시크릿 값 설정</li>\n  <li>\n    <주의> json 파일의 경우, 마지막 항목에 `,`를 붙이지 않는다.\n</주의>\n  </li>\n  <li><a href=\"\">settings_common.json/settings_debug.json/\nsettings_deploy.json</a></li>\n</ul>\n\n<p><br /></p>\n<h4 id=\"기존의-settingspy-를-가져오되-아래와-같이-설정을-추가\">기존의 settings.py 를 가져오되 아래와 같이 설정을 추가</h4>\n<p><strong>[base.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span>\n<span class=\"n\">BASE_DIR</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">__file__</span><span class=\"p\">))))</span>\n<span class=\"n\">ROOT_DIR</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">)</span>\n\n<span class=\"c\"># .config_secret 디렉토리, 하위 파일 경로 설정</span>\n<span class=\"n\">CONFIG_SECRET_DIR</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">ROOT_DIR</span><span class=\"p\">,</span> <span class=\"s\">'.config_secret'</span><span class=\"p\">)</span>\n<span class=\"n\">CONFIG_SECRET_COMMON_FILE</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">CONFIG_SECRET_DIR</span><span class=\"p\">,</span> <span class=\"s\">'settings_common.json'</span><span class=\"p\">)</span>\n<span class=\"n\">CONFIG_SECRET_DEBUG_FILE</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">CONFIG_SECRET_DIR</span><span class=\"p\">,</span> <span class=\"s\">'settings_debug.json'</span><span class=\"p\">)</span>\n<span class=\"n\">CONFIG_SECRET_DEPLOY_FILE</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">CONFIG_SECRET_DIR</span><span class=\"p\">,</span> <span class=\"s\">'settings_deploy.json'</span><span class=\"p\">)</span>\n\n<span class=\"c\"># config_secret 변수에 CONFIG_SECRET_COMMON_FILE 경로의 파일을 읽은 값을 할당</span>\n<span class=\"n\">config_secret_common</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">CONFIG_SECRET_COMMON_FILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n\n<span class=\"c\"># SECURITY WARNING: keep the secret key used in production secret!</span>\n<span class=\"c\"># config_secret_common 내의 django 키값 안의 secret_key 값 할당</span>\n<span class=\"n\">SECRET_KEY</span> <span class=\"o\">=</span> <span class=\"n\">config_secret_common</span><span class=\"p\">[</span><span class=\"s\">'django'</span><span class=\"p\">][</span><span class=\"s\">'secret_key'</span><span class=\"p\">]</span>\n\n<span class=\"c\"># debug.py 에서 명시해주므로 아래 코드는 주석 처리한다.</span>\n<span class=\"c\"># DEBUG = True</span>\n<span class=\"c\"># ALLOWED_HOSTS = []</span>\n</code></pre>\n</div>\n<p><strong>[debug.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">.base</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">config_secret_debug</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">CONFIG_SECRET_DEBUG_FILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n\n<span class=\"n\">DEBUG</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n<span class=\"n\">ALLOWED_HOSTS</span> <span class=\"o\">=</span> <span class=\"n\">config_secret_debug</span><span class=\"p\">[</span><span class=\"s\">'django'</span><span class=\"p\">][</span><span class=\"s\">'allowed_hosts'</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n<ul>\n  <li><em>DEBUG</em> 와 <em>ALLOWED_HOSTS</em> 에 따라서 runserver 명령어가 달라진다.</li>\n  <li><code class=\"highlighter-rouge\">./manage.py runserver</code> ➜ <br />\n<code class=\"highlighter-rouge\">./manage.py runserver --settings=config.settings.base</code> ➜ <br />\n<code class=\"highlighter-rouge\">./manage.py runserver --settings=config.settings.debug</code></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[인스타그램] 로그인 기능 구현하기",
      "category" : "인스타그램instargram",
      "tags"     : "django, instargram",
      "url"      : "/%EC%9D%B8%EC%8A%A4%ED%83%80%EA%B7%B8%EB%9E%A8/instargram/2017/06/16/instargram-memberapp-login.html",
      "date"     : "2017-06-16 00:00:00 +0900",
      "content"   : "<h1 id=\"로그인-기능-구현하기\">로그인 기능 구현하기</h1>\n<p>폼 -&gt; 뷰 -&gt; URL -&gt; 템플릿 순서로 구현하려고 한다.</p>\n\n<blockquote>\n  <p>고려해야할 부분</p>\n  <ol>\n    <li>아이디와 비밀번호를 입력할 폼 작성</li>\n    <li>POST 요청이 아닐 경우, 빈 로그인 폼을 받아서 로그인 페이지에 넘긴다.</li>\n    <li>사용자가 폼을 입력하지 않으면, 입력 요청 메세지를 띄우며 다음 페이지로 이동을 막는다.</li>\n    <li>입력한 아이디와 비밀번호가 데이터베이스의 데이터와 일치하지 않을 경우, 에러 메세지를 뿜뿜하며 다음 페이지로 이동을 막고, 일치할 경우, 장고 로그인 메서드를 실행하고 post_list 페이지로 이동.</li>\n    <li>이미 로그인한 상태에서 로그인 페이지로 이동한 것이라면 post_list 페이지로 되돌린다.</li>\n  </ol>\n</blockquote>\n\n<h3 id=\"1-장고-폼에서-위젯을-생성하고-데이터-유효성-및-하자-여부-검사하기\">1. 장고 폼에서 위젯을 생성하고, 데이터 유효성 및 하자 여부 검사하기</h3>\n<ul>\n  <li>LoginForm, SignupForm과 앞으로 더 필요할 수 있는 폼들을 파이썬 패키지를 생성하여 하위 항목으로 둔다. 왜? 하나의 파일에 모든 폼 클래스를 작성하면, 코드가 길어져서 보기에 불편함을 겪을 수 있기 때문이다.</li>\n  <li>member 앱 디렉토리에 forms 패키지를 생성하고 login.py를 생성하여 아래와 같이 작성한다.</li>\n</ul>\n\n<p>[forms/login.py] : 폼 위젯 만들기</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">forms</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">LoginForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n\n  <span class=\"c\"># 문자열을 받는 폼 필드에 최대 길이 30자, 문자열을 받는 위젯의 속성을 포함하여 username 에 할당</span>\n  <span class=\"c\"># 즉, username 이 곧 하나의 필드가 된다.</span>\n  <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span>\n    <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n    <span class=\"n\">widget</span><span class=\"o\">=</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">TextInput</span><span class=\"p\">(</span>\n      <span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s\">'placeholder'</span><span class=\"p\">:</span> <span class=\"s\">'아이디를 입력해주세요.'</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">)</span> <span class=\"c\"># 이 괄호 끝에 튜플이나 딕셔너리처럼 습관적으로 ','을 넣었었는데, 그 뒤 password 필드를 무시하게 되는 일이 발생했었다.</span>\n\n  <span class=\"c\"># username 과 같이 입력 받을 password 필드 정의, 위젯의 경우, 패스워드는 문자열이 드러나면 곤란하기 때문에 forms.PasswordInput() 을 통해 문자열을 가려준다.</span>\n  <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span>\n      <span class=\"n\">widget</span><span class=\"o\">=</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">PasswordInput</span><span class=\"p\">(</span>\n          <span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"p\">{</span>\n              <span class=\"s\">'placeholder'</span><span class=\"p\">:</span> <span class=\"s\">'비밀번호를 입력해주세요.'</span>\n          <span class=\"p\">}</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h4 id=\"장고가-제공하는-유효성-검사기\">장고가 제공하는 유효성 검사기</h4>\n<ul>\n  <li>clean() 메서드는 단일 인수를 사용하여 잘못된 입력에 대해 ValidationError를 발생시키는 간단한 함수이다.</li>\n  <li>일반적으로 <code class=\"highlighter-rouge\">is_valid()</code> 를 호출할 때 실행되고, <code class=\"highlighter-rouge\">cleaned_data</code> 에 딕셔너리 { ‘html-form-name’: ‘html-form-value’ } 의 형태로 할당된다.</li>\n  <li>양식을 처리하면서 세 가지 유형 to_python(), validate(), run_validators() 을 순차적으로 실행한다.</li>\n  <li>처리 중인 데이터에 문제가 있으면 ValidationError 생성자에 관련 정보를 전달하여 클리닝 메서드가 ValidationError 를 발생시킨다.</li>\n  <li>\n    <p>ValidationError 가 발생하지 않으면 정리된 데이터를 파이썬 객체로 반환해야 한다.</p>\n  </li>\n  <li><strong>clean() 메서드</strong>\n    <ul>\n      <li>to_python(), validate(), run_validators() 를 올바른 순서로 실행하고 오류 전파</li>\n      <li>ValidationError를 발생시키는 메서드가 있으면 유효성 검사가 중지되고 해당 오류가 발생, 깨끗한 데이터를 반환한 다음 폼의 cleaned_data 사전에 삽입</li>\n      <li>self.cleaned_data에서 필드 값을 찾고 이 시점에 파이썬 객체가 된다.</li>\n    </ul>\n  </li>\n  <li><strong>authenticate() 메서드</strong>\n    <ul>\n      <li>자격 증명이 유효한 경우, User 객체를 반환, 유효하지 않으면 None을 반환한다.</li>\n      <li>request 는 authenticate() 를 통과한 옵션 HttpRequest 다.</li>\n    </ul>\n  </li>\n  <li>authenticate() 를 통해 인증에 성공하면, cleaned_data 에 ‘user’ 를 키값으로 User 객체를 할당한다.</li>\n</ul>\n\n<p>[forms/login.py] : 데이터 유효성 및 하자 여부 검사하기</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\">#...</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth</span> <span class=\"kn\">import</span> <span class=\"n\">authenticate</span>\n\n<span class=\"c\">#...</span>\n<span class=\"k\">def</span> <span class=\"nf\">clean</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\n    <span class=\"c\"># is_valid() 가 실행되면서 사용자로 부터 폼에서 입력 받은 {'username': '사용자가 입력한 값', 'password': '사용자가 입력한 값'}이 cleaned_data 사전에 삽입될 것이다.</span>\n    <span class=\"c\"># cleaned_data 사전으로 부터 username 과 password key 의 value 를 각각의 변수에 할당한다.  </span>\n    <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"username\"</span><span class=\"p\">)</span>\n    <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"password\"</span><span class=\"p\">)</span>\n\n    <span class=\"c\"># value 가 유효하면 User 객체를 user 에 할당하고 유효하지 않으면 None 이 할당된다.</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">authenticate</span><span class=\"p\">(</span>\n        <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">username</span><span class=\"p\">,</span>\n        <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">password</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c\"># None 이 아니면(무효하지 않으면), cleaned_data 사전에 'user' 를 key 로 User 객체를 value 로 삽입한다.</span>\n    <span class=\"k\">if</span> <span class=\"n\">user</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s\">'user'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">user</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span><span class=\"p\">(</span>\n            <span class=\"s\">'Login credentials not valid!'</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"c\"># {'username': '사용자가 입력한 값', 'password': '사용자가 입력한 값', 'user': User 객체} 를 반환한다.    </span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span>\n</code></pre>\n</div>\n\n<h3 id=\"2-post-요청이-아닐-경우-빈-로그인-폼을-받아서-로그인-페이지로-넘기기\">2. POST 요청이 아닐 경우, 빈 로그인 폼을 받아서 로그인 페이지로 넘기기</h3>\n<ul>\n  <li>이 부분은 뷰가 처리한다.</li>\n</ul>\n\n<p>[member/views.py] 에서 로그인을 위해 사용된 모듈</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span><span class=\"p\">,</span> <span class=\"n\">redirect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">member.forms.login</span> <span class=\"kn\">import</span> <span class=\"n\">LoginForm</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth</span> <span class=\"kn\">import</span> <span class=\"n\">login</span> <span class=\"k\">as</span> <span class=\"n\">django_login</span><span class=\"p\">,</span> <span class=\"n\">logout</span> <span class=\"k\">as</span> <span class=\"n\">django_logout</span><span class=\"p\">,</span>\n</code></pre>\n</div>\n\n<p>[member/views.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s\">'POST'</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n  <span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">LoginForm</span><span class=\"p\">()</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"s\">'form'</span><span class=\"p\">:</span> <span class=\"n\">form</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">'member/login.html'</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h3 id=\"3-사용자가-폼을-입력하지-않으면-입력-요청-메세지를-띄우며-다음-페이지-이동-막기\">3. 사용자가 폼을 입력하지 않으면, 입력 요청 메세지를 띄우며 다음 페이지 이동 막기</h3>\n<ul>\n  <li>이 부분은 장고에서 알아서 해준다. 친절한 장고씨♡</li>\n</ul>\n\n<h3 id=\"4-입력한-아이디와-비밀번호가-데이터베이스-데이터와-일치하지-않으면-에러-메세지-뿜뿜-하지만-일치하면-로그인-하기\">4. 입력한 아이디와 비밀번호가 데이터베이스 데이터와 일치하지 않으면, 에러 메세지 뿜뿜! 하지만 일치하면, 로그인 하기</h3>\n<ul>\n  <li>뷰에서 is_valid() 가 실행되면서 폼의 authenticate() 를 통해 데이터가 일치하면 User 객체를, 데이터가 없거나 일치하지 않으면 None 을 반환한다.</li>\n  <li>None 일 경우 ‘Login credentials not valid!’ 메세지를 띄우며 에러를 일으킨다.</li>\n</ul>\n\n<p>[member/views.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s\">'POST'</span><span class=\"p\">:</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">LoginForm</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n\n      <span class=\"c\"># User 객체를 얻어서</span>\n      <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s\">'user'</span><span class=\"p\">]</span>\n\n      <span class=\"c\"># 장고 로그인 메서드의 인자로 전달하여 로그인을 실행한다.</span>\n      <span class=\"n\">django_login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">)</span>\n      <span class=\"k\">return</span> <span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"s\">'post:post_list'</span><span class=\"p\">)</span>\n    <span class=\"c\">#...</span>\n</code></pre>\n</div>\n\n<h3 id=\"5-이미-로그인한-상태에서-로그인-페이지로-이동한-것이라면-post_list-페이지로-튕겨내기\">5. 이미 로그인한 상태에서 로그인 페이지로 이동한 것이라면 post_list 페이지로 튕겨내기</h3>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n  <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">LoginForm</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n    <span class=\"c\">#...</span>\n  <span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_authenticated</span><span class=\"p\">():</span>\n      <span class=\"k\">return</span> <span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"s\">'post:post_list'</span><span class=\"p\">)</span>\n    <span class=\"c\">#...</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[인스타그램] post앱 뷰, URL, 템플릿(2) - post_detail",
      "category" : "인스타그램instargram",
      "tags"     : "django, instargram",
      "url"      : "/%EC%9D%B8%EC%8A%A4%ED%83%80%EA%B7%B8%EB%9E%A8/instargram/2017/06/15/instargram-postapp-view-url-template(2).html",
      "date"     : "2017-06-15 00:00:00 +0900",
      "content"   : "<h3 id=\"post_detail-뷰-구상하기\">post_detail 뷰 구상하기</h3>\n<ul>\n  <li>Post 모델에 해당 데이터가 존재하면, 인자로 받은 pk와 동일한 값이 포함된 Row 데이터를 post 변수에 할당한다.</li>\n  <li>데이터가 존재하지 않으면, post/post_list.html 로 돌아간다.</li>\n  <li>render() 를 통하여 post 의 값을 딕셔너리 형태로 post_detail.html 에 전달한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">post_detail</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">post_pk</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">post_pk</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">DoseNotExist</span><span class=\"p\">:</span>\n\n        <span class=\"c\"># redirect('post:post_list') 과 같은 역할을 한다.</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s\">'post:post_list'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n\n    <span class=\"c\"># 템플릿을 반환하는 방법은 간단하게 render() 를 사용하는 방식과, template_get() 을 사용하는 약간 복잡한 방법이 있다.</span>\n    <span class=\"c\">### 1. render()</span>\n    <span class=\"s\">'''\n    return render(\n        request,\n        'post/post_detail.html',\n        {\n            'post': post,\n        },\n    )\n    '''</span>\n\n    <span class=\"c\">### 2. template_get()</span>\n    <span class=\"s\">'''\n    template_get() 에 의해 반환된 템플릿 객체는 render(context=None, request=None) 를 제공해야한다.\n    context 는 반드시 딕셔너리 형태여야 한다.\n    render() 를 사용해서 template 을 string 으로 변환되면 HttpResponse 형태로 반환한다.\n    '''</span>\n\n    <span class=\"c\"># get_template() 를 통해 post/post_detail.html 템플릿을 로드한다.</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"s\">'post/post_detail.html'</span><span class=\"p\">)</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">'post'</span><span class=\"p\">:</span> <span class=\"n\">post</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c\"># 템플릿 객체를 render() 를 통해서 string 으로 변환하고 render_to_string 변수에 할당한다.</span>\n    <span class=\"n\">render_to_string</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">render_to_string</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h3 id=\"post_detail-url-구상하기\">post_detail URL 구상하기</h3>\n<ul>\n  <li>Post 모델로부터 불러온 pk 값을 매개로 정규표현식을 통해 post_detail URL 을 만든다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">...</span>\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"o\">...</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^(?P&lt;post_pk&gt;</span><span class=\"err\">\\</span><span class=\"s\">d+)/$'</span><span class=\"p\">,</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">post_detail</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'post_detail'</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n<span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<h3 id=\"기본-골격이-되는-부모페이지-basehtml\">기본 골격이 되는 부모페이지 base.html</h3>\n<ul>\n  <li>templates 디렉토리 하위에 common 디렉토리 생성 후, base.html 을 생성한다.</li>\n</ul>\n\n<p>[common/base.html]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"o\">...</span> <span class=\"n\">html</span> <span class=\"err\">구성하는</span> <span class=\"err\">기본</span> <span class=\"err\">태그들</span>\n<span class=\"o\">&lt;</span><span class=\"n\">body</span><span class=\"o\">&gt;</span>\n  <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"n\">block</span> <span class=\"n\">content</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n  <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"n\">endblock</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">body</span><span class=\"o\">&gt;</span>\n\n</code></pre>\n</div>\n<ul>\n  <li>base.html 을 상속 받을 페이지에 ‘extends’를 통해서 상속시킨다.</li>\n</ul>\n\n<p>[post_list.html], [post_detail] 등 자식 페이지들</p>\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n{% extends 'common/base.html' %}\n{% block content %}\n  #... 깃 코드 참조\n{% endblock %}\n\n</code></pre>\n</div>\n\n<h3 id=\"post_list와-post_detail이-공통으로-사용할-페이지-posthtml\">post_list와 post_detail이 공통으로 사용할 페이지 post.html</h3>\n<ul>\n  <li>tempaltes 디렉토리 아래 include 디렉토리 생성 후, post.html 작성</li>\n</ul>\n\n<p>[include/post.html]</p>\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>#... 템플릿 언어를 활용해서 작성, 깃 코드 참조\n</code></pre>\n</div>\n\n<p>[post_list.html], [post_detail] 에 include</p>\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n...\n{% include 'include/post.html' %}\n\n</code></pre>\n</div>\n<ul>\n  <li>‘include’를 통해 post.html 을 포함시킨다.</li>\n</ul>\n\n<blockquote>\n  <p>Git Code Address ヾ(๑ㆁᗜㆁ๑)ﾉ</p>\n  <ul>\n    <li><a href=\"https://github.com/bbungsang/Instargram-project/blob/master/instargram/post/views.py\">post/veiws.py</a></li>\n    <li><a href=\"https://github.com/bbungsang/Instargram-project/blob/master/instargram/post/urls.py\">post/urls.py</a></li>\n    <li><a href=\"https://github.com/bbungsang/Instargram-project/tree/master/instargram/templates\">templates</a></li>\n  </ul>\n</blockquote>\n"
    } ,
  
    {
      "title"    : "[인스타그램] post앱 뷰, URL, 템플릿(1) - post_list",
      "category" : "인스타그램instargram",
      "tags"     : "django, instargram",
      "url"      : "/%EC%9D%B8%EC%8A%A4%ED%83%80%EA%B7%B8%EB%9E%A8/instargram/2017/06/15/instargram-postapp-view-url-template(1).html",
      "date"     : "2017-06-15 00:00:00 +0900",
      "content"   : "<h2 id=\"첫번째-뷰-url-템플릿-설정하기\">첫번째 뷰, URL, 템플릿 설정하기</h2>\n<h3 id=\"첫번째-뷰-구상하기\">첫번째 뷰 구상하기</h3>\n<ul>\n  <li>Post 모델의 데이터를 전부 불러와서 리스트 형태로 화면에 순차적으로 출력</li>\n</ul>\n\n<p>[post/views.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n\n<span class=\"c\"># 1. Post 모델을 호출할 것이므로 models.py 의 Post 를 임포트한다.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Post</span>\n\n<span class=\"c\"># 2. url 로 부터 전달되어 실행할 함수를 작성한다.</span>\n<span class=\"k\">def</span> <span class=\"nf\">post_list</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n\n  <span class=\"c\"># 3. Post 모델의 모든 데이터를 이터레이터 형태로 받아와서 posts 변수에 할당</span>\n  <span class=\"n\">posts</span> <span class=\"o\">=</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"nb\">all</span><span class=\"p\">()</span>\n\n  <span class=\"c\"># 4. 함수 내부에서 정의된 값을 템플릿에 넘겨주기 위해 딕셔너리 형태의 context 정의.</span>\n  <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'posts'</span><span class=\"p\">:</span> <span class=\"n\">posts</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c\"># 5. render() 의 첫번째 인자: 외부로 부터 요청된 값인 request, 두번째 인자: 값을 받아서 보여줄 템플릿, 세번째 인자: context</span>\n  <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span>\n    <span class=\"n\">request</span><span class=\"p\">,</span>\n    <span class=\"s\">'post/post_list.html'</span><span class=\"p\">,</span>\n    <span class=\"n\">context</span>\n  <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h3 id=\"첫번째-url-구상하기\">첫번째 URL 구상하기</h3>\n<ul>\n  <li>등록한 어플리케이션의 뷰를 사용하기 위해서는 프로젝트 urls.py 에 include 시켜줘야한다. 이 경우 어플리케이션을 생성할 때마다 1번만 해주면 된다.</li>\n</ul>\n\n<p>[config/urls.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">include</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^admin/'</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^post/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s\">'post.urls'</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<p>[post/urls.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n\n<span class=\"c\"># 뷰의 key로 앱 이름 'post'를 지정해준다.</span>\n<span class=\"n\">app</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'post'</span>\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\n  <span class=\"c\"># /post/의 URL로 post_list라는 이름의 뷰가 할당되고, 뷰를 식별하기 위해 이름을 붙임</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">post_list</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">post_list</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<h3 id=\"첫번째-템플릿-구상하기\">첫번째 템플릿 구상하기</h3>\n<ul>\n  <li>여러 어플리케이션이 공통으로 템플릿을 이용할 수 있도록 루트 폴더 아래 템플릿 폴더를 지정할 것이다. 이를 위해서 우선 settings.py에서 템플릿을 인식할 폴더의 위치를 아래와 같이 명시해줘야 한다.</li>\n</ul>\n\n<p>[config/settins.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">...</span>\n<span class=\"c\"># root-dir/templates</span>\n<span class=\"n\">TEMPLATE_DIR</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"s\">'templates'</span><span class=\"p\">)</span>\n\n<span class=\"n\">TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"c\">#...</span>\n    <span class=\"s\">'DIRS'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"n\">TEMPLATE_DIR</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n    <span class=\"c\">#...</span>\n  <span class=\"p\">}</span>\n  <span class=\"c\">#...</span>\n</code></pre>\n</div>\n<ul>\n  <li>이제 /post/ 의 URL로 접속하면 화면이 잘 뜬다. 하지만 이미지를 못 불러온다. 이미지를 불러올 수 있도록 몇 가지 설정해야 할 부분이 있다.</li>\n</ul>\n\n<ol>\n  <li>Pillow 설치하기(Ubuntu 기준)</li>\n</ol>\n\n<ul>\n  <li>Pillow 를 설치하기 전에 설치해야 할 것</li>\n  <li>$sudo apt-get install libtiff5-dev libjpeg8-dev zlib1g-dev \\\nlibfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python-tk</li>\n  <li>사전 설치작업 완료 후, Pillow 설치하기\n    <ul>\n      <li>$ pip install Pillow</li>\n    </ul>\n  </li>\n</ul>\n\n<ol>\n  <li>루트 폴더 아래 <code class=\"highlighter-rouge\">media</code> 폴더 생성 후, settings.py 에서 경로 설정과 urls.py 에 media 의 파일을 읽어올 수 있도록 아래와 같이 지정해준다.</li>\n</ol>\n\n<p>[config/settings.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">...</span>\n<span class=\"c\"># root-dir/media</span>\n<span class=\"n\">MEDIA_ROOT</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"s\">'media'</span><span class=\"p\">)</span>\n\n<span class=\"n\">MEDIA_URL</span> <span class=\"o\">=</span> <span class=\"s\">'/media/'</span>\n<span class=\"o\">...</span>\n</code></pre>\n</div>\n<p>[config/urls.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">...</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls.static</span> <span class=\"kn\">import</span> <span class=\"n\">static</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"o\">...</span>\n<span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">static</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">MEDIA_URL</span><span class=\"p\">,</span> <span class=\"n\">document_root</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">MEDIA_ROOT</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n<ul>\n  <li>이미지 출력 성공!</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[인스타그램] post앱 모델",
      "category" : "인스타그램instargram",
      "tags"     : "django, instargram",
      "url"      : "/%EC%9D%B8%EC%8A%A4%ED%83%80%EA%B7%B8%EB%9E%A8/instargram/2017/06/14/instargram-postapp-models.html",
      "date"     : "2017-06-14 00:00:00 +0900",
      "content"   : "<h3 id=\"0-어플리케이션-post를-생성하고-settingspy에-등록\">0. 어플리케이션 ‘post’를 생성하고, settings.py에 등록</h3>\n\n<h3 id=\"1-모델-설계하기\">1. 모델 설계하기</h3>\n<ul>\n  <li><a href=\"https://github.com/bbungsang/Instargram-project/blob/master/database-structure.pdf\">Click!</a></li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">36</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n    <span class=\"n\">photo</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">()</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">modified_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">like_user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span>\n        <span class=\"n\">User</span><span class=\"p\">,</span>\n        <span class=\"n\">through</span><span class=\"o\">=</span><span class=\"s\">'PostLike'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PostLike</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n    <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Post</span><span class=\"p\">)</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Comment</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n    <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Post</span><span class=\"p\">)</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">modified_ad</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">like_user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span>\n        <span class=\"n\">User</span><span class=\"p\">,</span>\n        <span class=\"n\">through</span><span class=\"o\">=</span><span class=\"s\">'CommentLike'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CommentLike</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n    <span class=\"n\">comment</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Comment</span><span class=\"p\">)</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Tag</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre>\n</div>\n\n<h3 id=\"2-설계한-모델과-필드를-작성하고-마이그레이션-시도\">2. 설계한 모델과 필드를 작성하고 마이그레이션 시도</h3>\n<ul>\n  <li>아래와 같은 에러 발생</li>\n</ul>\n\n<div class=\"language-text highlighter-rouge\"><pre class=\"highlight\"><code>'Post.author' clashes with reverse accessor for 'Post.like_user'\n'Post.like_user' clashes with reverse accessor for 'Post.author'\n'Comment.author' clashes with reverse accessor for 'Comment.like_user'\n'Comment.like_user' clashes with reverse accessor for 'Comment.author'\n</code></pre>\n</div>\n<ul>\n  <li>이와 같은 에러는 지극히 개인적으로 해석한 바, Post/Comment 모델이 User 모델에 ForeignKey 와 ManyToMany 를 걸고 있고, 이로써 Post/Comment 모델과 User 모델에 생성된 <code class=\"highlighter-rouge\">reverse relation</code> 에 FK에 대한 post_set/comment_set 속성, MTM에 대한 post_set/comment_set 속성이 각각 생성될 것이다. 즉, reverse relation 의 중복된 속성명에 대한 충돌이 일어난 것.</li>\n  <li>따라서 둘 중 하나에 post_set/comment_set의 이름을 바꿔줘야한다. MTM을 건 각각의 like_user 에 related_name 을 줌으로써 이 충돌을 방지한다.</li>\n  <li><a href=\"https://github.com/bbungsang/Instargram-project/blob/master/clash-error.pdf\">Click!</a></li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\">#...</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n    <span class=\"n\">photo</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">()</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">modified_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">like_user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span>\n        <span class=\"n\">User</span><span class=\"p\">,</span>\n        <span class=\"n\">through</span><span class=\"o\">=</span><span class=\"s\">'PostLike'</span><span class=\"p\">,</span>\n        <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s\">'like_posts'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n<span class=\"c\">#...</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Comment</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n    <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Post</span><span class=\"p\">)</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">modified_ad</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">like_user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span>\n        <span class=\"n\">User</span><span class=\"p\">,</span>\n        <span class=\"n\">through</span><span class=\"o\">=</span><span class=\"s\">'CommentLike'</span><span class=\"p\">,</span>\n        <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s\">'like_comments'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n<span class=\"c\">#...</span>\n</code></pre>\n</div>\n<ul>\n  <li>마이그레이션 에러를 극복했다!</li>\n</ul>\n\n<h3 id=\"3-post에-comment를-추가할-수-있는-함수-구현\">3. Post에 Comment를 추가할 수 있는 함수 구현</h3>\n<ul>\n  <li>처음에 함수 인스턴스까지 생각하고 애초에 모델에 적용했어야 했던게 맞는 건지, 하다가 필요한 기능이 생기면 그 때 적용해도 되는 건지 아직은 감이 안 잡히지만,</li>\n  <li>댓글 추가할 수 있는 함수를 모델 첫 번째 마이그레이션을 마친 후 구현한다.</li>\n  <li>한 Post 에 Comment 를 추가하는 방식이므로, Post 모델에서 Comment 모델을 역참조하여 해당 데이터를 가져올 수 있도록 한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">add_comment</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">post_set</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">author</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">content</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n<ul>\n  <li>외부에서 user 값과 content 값을 받아서 Comment 모델에 데이터를 삽입한다.</li>\n</ul>\n\n<h3 id=\"4-좋아요-개수를-세는-인스턴스를-프로퍼티로-표현\">4. 좋아요 개수를 세는 인스턴스를 프로퍼티로 표현</h3>\n<ul>\n  <li>그 전에 프로퍼티의 개념이 잘 안서서 개념을 우선 정리해보겠다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Monster</span><span class=\"p\">():</span>\n    <span class=\"n\">angelmon</span> <span class=\"o\">=</span> <span class=\"s\">'엔젤몬'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">digimon</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,):</span>\n        <span class=\"k\">return</span> <span class=\"s\">'{}은 디지몬입니다.'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">monster</span> <span class=\"o\">=</span> <span class=\"n\">Monster</span><span class=\"p\">(</span><span class=\"s\">'파닥몬'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">monster</span><span class=\"o\">.</span><span class=\"n\">digimon</span><span class=\"p\">()</span>\n<span class=\"c\"># out : '파닥몬은 디지몬입니다.'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">monster</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"c\"># out : '파닥몬'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">monster</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">'아구몬'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">monster</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"c\"># out : '아구몬'</span>\n</code></pre>\n</div>\n<ul>\n  <li>위와 같이 객체를 monster 변수에 할당하고 해당 객체가 갖고 있는 속성을 이용해서 바로 접근과 변경이 가능하다.</li>\n  <li>파이썬은 다른 객체 지향 언어와 달리 private, protected 개념이 구체적으로 없는 것으로 알고 있다.</li>\n  <li>접근 제한에 대한 개념이 뚜렷한 언어의 경우, getter와 setter를 통해 데이터에 접근하고, 변경이나 삭제를 할 수 있다.</li>\n  <li>하지만 파이썬은 그렇지 않은데 왜 굳이 property 를 사용하는지 이해가 안됐다. 알아본 결과,</li>\n  <li>첫째, 추후 추가적인 무엇인가 필요한 경우, property에 추가하면 기존 코드가 손상되지 않는다.</li>\n  <li>둘째, 데이터 바인딩하기 좋다. 는 까닭으로 사용한다고 한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Monster</span><span class=\"p\">():</span>\n    <span class=\"n\">angelmon</span> <span class=\"o\">=</span> <span class=\"s\">'엔젤몬'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">digimon</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s\">'{}은 진화하면 {}이 됩니다.'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">angelmon</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">monster</span> <span class=\"o\">=</span> <span class=\"n\">Monster</span><span class=\"p\">(</span><span class=\"s\">'파닥몬'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">monster</span><span class=\"o\">.</span><span class=\"n\">digimon</span><span class=\"p\">()</span>\n<span class=\"c\"># out : can't set attribute</span>\n</code></pre>\n</div>\n<ul>\n  <li>name을 프로퍼티로 지정하고나니 일반적인 인스턴스 접근 방식으로는는 can’t set attribute 라는 에러를 뿜뿜하며 접근할 수 없었다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">monster</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"c\"># out : '파닥몬'</span>\n</code></pre>\n</div>\n<ul>\n  <li>이렇게 얻은 ‘파닥몬’의 문자열 데이터는 클래스 멤버인 self.name에 직접 접근한 것이 아니라 프로퍼티로 같은 데이터 값의 사본을 출력해준 것이다.</li>\n  <li>솔직히 기존 코드가 손상됨으로써 오는 피해가 얼마나 막대한지 실감은 안 난다. 하지만 그렇다고 하니 비로소 납득하고 property 로 좋아요 개수를 세는 데이터에 접근해보겠다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># Post 에 대한 좋아요 개수와 Comment 에 대한 좋아요 개수 둘 다 필요하므로 두 모델에 추가했다.</span>\n<span class=\"nd\">@property</span>\n<span class=\"k\">def</span> <span class=\"nf\">like_count</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">like_users</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n<ul>\n  <li><a href=\"\">프로퍼티 확장하기</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[인스타그램] 커스텀 유저 돌리기",
      "category" : "인스타그램instargram",
      "tags"     : "django, instargram",
      "url"      : "/%EC%9D%B8%EC%8A%A4%ED%83%80%EA%B7%B8%EB%9E%A8/instargram/2017/06/14/instargram-custom-user.html",
      "date"     : "2017-06-14 00:00:00 +0900",
      "content"   : "<h3 id=\"커스텀-유저로-돌리기\">커스텀 유저로 돌리기</h3>\n<ul>\n  <li>장고가 제공하는 User 모델을 활용하기 위해 기존 User 모델을 그대로 활용하는 방법, 커스텀 User를 활용하는 방법이 있다.</li>\n  <li><code class=\"highlighter-rouge\">기존 User 모델을 그대로 활용하는 방법</code> 중 User에 OneToOneField를 거는 방식은 유저 정보(필드)가 방대할 때, 인증에 필요한 최소한의 필수 정보만 사용하다가 필요한 시기에 필요한 정보만 활용할 수 있도록 다른 모델에 몰아넣거나(OneToOne기법),</li>\n  <li>기존 User 정보가 존재하며 해당 데이터를 보존해야 할 경우 사용한다.</li>\n  <li>데이터가 없는 경우 일반적으로 커스텀 유저를 권장하기 때문에 커스텀 유저의 개념을 짚고 활용해보겠다.</li>\n</ul>\n\n<h4 id=\"abstractuser-모델-상속한-사용자-정의-user-모델-사용하기\">AbstractUser 모델 상속한 사용자 정의 User 모델 사용하기</h4>\n<ul>\n  <li>이 기법의 사용 여부는 프로젝트 시작 전에 하는 것이 좋다. 추후에 settings.AUTH_USER_MODEL 변경시 데이터베이스 스키마를 알맞게 재수정해야 하는데 사용자 모델 필드에 추가나 수정으로 끝나지 않고 완전히 새로운 사용자 객체를 생성하는 일이 된다.</li>\n  <li>이 기법은 기존 장고의 User 모델을 그대로 사용하므로 기본 로그인 인증 처리 부분은 장고의 것을 이용하면서 사용자 정의 필드를 추가할 때 유용하다.</li>\n  <li><code class=\"highlighter-rouge\">member</code> 어플리케이션을 생성한다.</li>\n  <li>settings.py 에 등록 후, member/models.py 작성</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractUser</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">AbstractUser</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre>\n</div>\n\n<p>[config/settins.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># Custom User</span>\n<span class=\"n\">AUTH_USER_MODEL</span> <span class=\"o\">=</span> <span class=\"s\">'member.User'</span>\n</code></pre>\n</div>\n\n<p>[post/models.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n\n<span class=\"n\">User</span> <span class=\"o\">-&gt;</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">AUTH_USER_MODEL</span>\n</code></pre>\n</div>\n<ul>\n  <li>post/models.py 에서 User 객체를 썻던 부분을 settings.AUTH_USER_MODEL로 바꿔준다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "TryHelloWorld 알고리즘 레벨 1-7",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/06/12/tryhelloworld-algorithm-level1-7.html",
      "date"     : "2017-06-12 00:00:00 +0900",
      "content"   : "<h2 id=\"피보나치-수\">피보나치 수</h2>\n<p>피보나치 수는 F(0) = 0, F(1) = 1일 때, 2 이상의 n에 대하여 F(n) = F(n-1) + F(n-2) 가 적용되는 점화식입니다.\n2 이상의 n이 입력되었을 때, fibonacci 함수를 제작하여 n번째 피보나치 수를 반환해 주세요.\n예를 들어 n = 3이라면 2를 반환해주면 됩니다.</p>\n\n<h3 id=\"내-풀이\">내 풀이</h3>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">-</span><span class=\"n\">a</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">num</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span>\n        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<h3 id=\"다른-사람-풀이\">다른 사람 풀이</h3>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span>\n</code></pre>\n</div>\n<h2 id=\"약수의-합\">약수의 합</h2>\n<p>어떤 수를 입력받아 그 수의 약수를 모두 더한 수 sumDivisor 함수를 완성해 보세요.\n예를 들어 12가 입력된다면 12의 약수는 [1, 2, 3, 4, 6, 12]가 되고, 총 합은 28이 되므로 28을 반환해 주면 됩니다.</p>\n\n<h3 id=\"내-풀이-1\">내 풀이</h3>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"nb\">reduce</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sumDivisor</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"n\">divisor</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">divisor</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">reduce</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">divisor</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h3 id=\"다른-사람-풀이-1\">다른 사람 풀이</h3>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">sumDivisor</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">([</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">num</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">num</span><span class=\"o\">%</span><span class=\"n\">i</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "TryHelloWorld 알고리즘 레벨 1-6",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/06/11/tryhelloworld-algorithm-level1-6.html",
      "date"     : "2017-06-11 00:00:00 +0900",
      "content"   : "<h2 id=\"최대공약수와-최소공배수\">최대공약수와 최소공배수</h2>\n<p>두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환해주는 gcdlcm 함수를 완성해 보세요.<br />\n배열의 맨 앞에 최대공약수, 그 다음 최소공배수를 넣어 반환하면 됩니다.<br />\n예를 들어 gcdlcm(3,12) 가 입력되면, [3, 12]를 반환해주면 됩니다.</p>\n\n<h4 id=\"내-풀이\">내 풀이</h4>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">fractions</span> <span class=\"kn\">import</span> <span class=\"n\">gcd</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">gcdlcm</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">gcd</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">),</span> <span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">gcd</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">gcdlcm</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<h4 id=\"다른-사람-풀이\">다른 사람 풀이</h4>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">gcdlcm</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">),</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">while</span> <span class=\"n\">t</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">c</span> <span class=\"o\">%</span> <span class=\"n\">d</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">t</span>\n    <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">answer</span>\n</code></pre>\n</div>\n\n<h3 id=\"행렬의-덧셈\">행렬의 덧셈</h3>\n<p>행렬의 덧셈은 행과 열의 크기가 같은 두 행렬의 같은 행, 같은 열의 값을 서로 더한 결과가 됩니다.<br />\n2개의 행렬을 입력받는 sumMatrix 함수를 완성하여 행렬 덧셈의 결과를 반환해 주세요.<br /></p>\n\n<p>예를 들어 2x2 행렬인 A = ((1, 2), (2, 3)), B = ((3, 4), (5, 6)) 가 주어지면, 같은 2x2 행렬인 ((4, 6), (7, 9))를 반환하면 됩니다.(어떠한 행렬에도 대응하는 함수를 완성해주세요.)</p>\n\n<h4 id=\"내-풀이-1\">내 풀이</h4>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">sumMatrix</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">B</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">[[]</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">))]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)):</span>\n    \t<span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])):</span>\n        \t<span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">])</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sumMatrix</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]],</span> <span class=\"p\">[[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">],[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">]]))</span>\n</code></pre>\n</div>\n\n<h4 id=\"다른-사람-풀이-1\">다른 사람 풀이</h4>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">sumMatrix</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">B</span><span class=\"p\">):</span>\n  <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">))]</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">answer</span>\n</code></pre>\n</div>\n\n<h3 id=\"느낀점\"><em>느낀점</em></h3>\n<ul>\n  <li>최대공약수, 최소공배수 문제의 경우, 수학적 접근이 미숙해서 결국 검색으로 gcd 모듈이 있다는 것을 알게되어 사용하였다.</li>\n  <li>모듈에 의존하기보다는 코드가 길어지더라도 원리를 알고 직접 풀어보는 시간을 갖는 것이 중요한 것 같다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "여자개발자모임터 10주년 | 김경희, 김계옥, 장미영님",
      "category" : "개발자 멘토링mentoring",
      "tags"     : "",
      "url"      : "/%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%98%ED%86%A0%EB%A7%81/mentoring/2017/06/10/mentoring2.html",
      "date"     : "2017-06-10 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>2017/06/10 여자개발자모임터 10주년</p>\n</blockquote>\n\n<h3 id=\"김경희-우아한-형제들수석연구원\">김경희 (우아한 형제들)수석연구원</h3>\n<h4 id=\"내가-처음-가본-길이-누군가의-이정표가-된다--우아한-엄마-개발자로-사는-법\">내가 처음 가본 길이 누군가의 이정표가 된다 : 우아한 엄마 개발자로 사는 법</h4>\n<ul>\n  <li>회사의 주요 도메인 로직에 대한 파악을 완벽하게 했고, 모든 업무에 대한 이해도와 적응이 빨라서 재택 근무를 가능하게 했던 요인이 되었다.</li>\n</ul>\n\n<h4 id=\"아이들에게-엄마-직업-알게하기\">아이들에게 엄마 직업 알게하기</h4>\n<ul>\n  <li>아이와 함께하는 홈페이지 개발하기</li>\n</ul>\n\n<p><br /></p>\n\n<h3 id=\"김계옥이프로님\">김계옥(이프로)님</h3>\n<ul>\n  <li>좋은팀, 좋은 동료가 인재를 불러온다.</li>\n</ul>\n\n<h4 id=\"진정한-고수\">진정한 고수</h4>\n<ul>\n  <li>지식 공유에 관대</li>\n  <li>자신의 지식에 대해 겸손</li>\n  <li>나만의 전문 영역을 꾸준히 넓히고 자신을 드러내지 않으며 자기 자리에서 묵묵히</li>\n</ul>\n\n<p><br /></p>\n\n<h3 id=\"장미영님아키텍쳐\">장미영님(아키텍쳐)</h3>\n<ul>\n  <li>클라이언트가 요가한 기능을 개발자로서 객관적이고 논리적으로 실현 가능한지 구체적인 로직을 전달할 수 있어야 한다.</li>\n  <li>이 모듈들이 왜 붙어야하며 장차 어떠한 방향의 발전 가능성이 있는지 설명할 줄 알아야한다.</li>\n  <li>그 당시에는 상대방이 받아들이지 않을지라도 그 순간순간이 나에게 훈련이 될 수 있는 요소이다.</li>\n  <li>내가 만든 모듈에 타인이 만든 모듈을 붙이고 발생하는 문제에 대해 포용적으로 받아들이고 맡은 시스템에 애정을 가져야한다.</li>\n  <li>표준을 절대적이라고 생각할 것이 아니라 이런 저런 부분을 생각해보고 그림으로 그려서 논리적으로 정리해보는 것이 중요하다.</li>\n</ul>\n\n<p><br /></p>\n\n<blockquote>\n  <p>최근 협업을 진행하면서 협업의 어렵고 답답한 요소가 많다는 것을 느꼈다. 고구마 연속으로 10개 먹은 심정이 지속됐는데, 이 글을 정리하면서 천천히 답답함을 해소할 수 있었다.</p>\n</blockquote>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>협업 방해 요소\n1. 신뢰 부족\n2. 대화 부족\n3. 무관심\n</code></pre>\n</div>\n\n<ul>\n  <li>서로 신뢰가 부족하면 문제에 직면했을 때 상의를 하지 않게된다. 나 같은 경우는 스스로의 열등감 + 상대방이 보인 태도로 대화를 중단했었다. 내가 의견을 내면 상대방은 그 의견을 주관적인 기준(?) ‘잘 하는 사람’에게 물어보고, 그 사람의 동의를 구하면 내 의견을 반영토록 하였다. 그리고 잘 풀리지 않는 코드에 대해서 나와 상의를 하지 않았다. 이 까닭이 ‘내가 여자라서?’, ‘개발 공부한지 얼마 안돼서?’라는 의심을 하게됐고 이는 상대방을 편견에 입각하여 바라보게 되는 촉진제가 되었다.</li>\n  <li>하지만 이에 치우쳐 부정적인 생각 + 부정적인 생각, 감정의 골은 깊어질 수 밖에 없다.</li>\n  <li><code class=\"highlighter-rouge\">과연 나는 상대방에게 신뢰를 줄만한가?</code> 를 생각하게 되었다. ‘내가 현재 프로젝트의 주요 로직을 파악하고 완벽하게 이해하고 있는가?, 내가 개발한 모듈이 왜 필요하며 장차 어떤 방향의 발전 가능성이 있는지 설명할 수 있는가?’에 대한 답을 할 수 없었다.</li>\n  <li>프로가 되기 위해서는 이 모든 순간을 스스로를 훈련 시키고 발전할 수 있는 요소로 여겨야하며, 묵묵히 내 자리에서 나만의 전문 영역을 꾸준히 넓혀야 한다는 말이 스스로를 되돌아보고 깊게 반성하게 하였다.</li>\n  <li>‘상대방을 답답하게 여기고, 나 혼자 개발하고 있어, 나를 무시하다니’ 등 일련의 모든 것이 나의 자만이고 아집이었다는 것을 깨닫게 해주었다.</li>\n  <li>지금 프로젝트를 사랑하자! 상대를 탓하기 보단 나는 과연 잘 하고 있는지를 생각해보고 내 자리에서 묵묵히 겸손하게 꾸준히  해나가자!</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "제너레이터(Generator)",
      "category" : "파이썬 문법basic",
      "tags"     : "Python, Iterator, Generator",
      "url"      : "/%ED%8C%8C%EC%9D%B4%EC%8D%AC%20%EB%AC%B8%EB%B2%95/basic/2017/06/09/python-basic-generator.html",
      "date"     : "2017-06-09 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>٩(๑òωó๑)۶ 아, 아, 마이크 테스트<br />\n이 마크다운은 빌루바노빅의 ‘Introducing Python’을 토대로 작성되었습니다.\n제 기준 헷갈리는 개념을 위주로 다른 문서를 참고하여 이해하기 쉽도록 내용을 더하였습니다.</p>\n</blockquote>\n\n<p><br /></p>\n<h2 id=\"제너레이터\">제너레이터</h2>\n<ul>\n  <li>파이썬의 <code class=\"highlighter-rouge\">iterator</code>를 생성하는 객체로, 전체 시퀀스를 한 번에 메모리에 저장하고 정렬할 필요 없이 잠재적으로 아주 큰 시퀀스를 순회할 수 있다.</li>\n  <li><code class=\"highlighter-rouge\">iterator</code>는 next()를 이용해 데이터에 순차적으로 접근이 가능한 객체이다.</li>\n  <li>대표적인 제너레이터 중 하나로 <code class=\"highlighter-rouge\">range()</code> 가 있다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"mi\">5050</span>\n</code></pre>\n</div>\n<ul>\n  <li>순회할 때마다 호출된 항목을 기억하고 다음 값을 반환한다. 즉 제너레이터는 이전 호출에 대한 메모리가 없는 일반 함수와 달리 이전 호출에 대해 기억하고 이전 값을 적용하여 반환한다.</li>\n  <li>제너레이터 컴프리헨션에 대한 코드가 긴 경우에는 제너레이터 함수를 사용하면 된다. 제너레이터 함수는 일반 함수지만 return 으로 값을 반환하지 않고, yield 로 값을 반환한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">my_range</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">last</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>   <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">first</span>\n<span class=\"o\">...</span>   <span class=\"k\">while</span> <span class=\"n\">number</span> <span class=\"o\">&lt;</span> <span class=\"n\">last</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">yield</span> <span class=\"n\">number</span>\n<span class=\"o\">...</span>     <span class=\"n\">number</span> <span class=\"o\">+=</span> <span class=\"n\">step</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_range</span>\n<span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">my_range</span> <span class=\"n\">at</span> <span class=\"mh\">0x10193e268</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ranger</span> <span class=\"o\">=</span> <span class=\"n\">my_range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ranger</span>\n<span class=\"o\">&lt;</span><span class=\"n\">generator</span> <span class=\"nb\">object</span> <span class=\"n\">my_range</span> <span class=\"n\">at</span> <span class=\"mh\">0x101a0a168</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">ranger</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>   <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n<span class=\"mi\">2</span>\n<span class=\"mi\">3</span>\n<span class=\"mi\">4</span>\n</code></pre>\n</div>\n\n<p><br /><br /></p>\n<h4 id=\"제너레이터-컴프리헨션\">제너레이터 컴프리헨션</h4>\n<ul>\n  <li>제너레이터 함수를 더 쉽게 사용할 수 있도록 한다. 리스트 컴프리헨션과 비슷하지만 [] 대신 () 를 사용한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">generator</span> <span class=\"nb\">object</span> <span class=\"o\">&lt;</span><span class=\"n\">genexpr</span><span class=\"o\">&gt;</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f6105d90960</span><span class=\"o\">&gt;</span>\n</code></pre>\n</div>\n\n<p><br /><br /></p>\n<h3 id=\"왜-제너레이터를-사용하는가\">왜 제너레이터를 사용하는가?</h3>\n<p># 출처: http://bluese05.tistory.com/56</p>\n<h4 id=\"1-메모리를-효율적으로-사용할-수-있다\">1. 메모리를 효율적으로 사용할 수 있다.</h4>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getsizeof</span><span class=\"p\">(</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"p\">)</span>    <span class=\"c\"># list</span>\n<span class=\"mi\">536</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getsizeof</span><span class=\"p\">(</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"p\">)</span>\n<span class=\"mi\">4280</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getsizeof</span><span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">)</span>    <span class=\"c\"># generator</span>\n<span class=\"mi\">80</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getsizeof</span><span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n<span class=\"mi\">80</span>\n</code></pre>\n</div>\n<ul>\n  <li>리스트의 경우 사이즈가 커질수록 메모리 사용량이 늘어난다. 하지만 제너레이터의 경우 사이즈가 커져도 메모리 사용량이 동일하다.</li>\n  <li>리스트는 안에 속한 모든 데이터를 메모리에 적재하기 때문에 리스트의 크기 만큼 메모리 사이즈가 늘어나게 되고, 제너레이터는 데이터를 next()를 통해 차례로 값에 접근할 때마다 메모리에 적재하기 때문에 메모리 사이즈가 일정한 것이다.</li>\n</ul>\n\n<h4 id=\"2-lazy-evaluation-계산-결과가-필요할-때까지-계산을-늦추는-효과를-볼-수-있다\">2. <strong>Lazy evaluation 계산 결과가 필요할 때까지 계산을 늦추는 효과를 볼 수 있다.</strong></h4>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\">### 1초간 sleep을 수행한 후 x 값을 return ###</span>\n<span class=\"k\">def</span> <span class=\"nf\">sleep_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n  <span class=\"k\">print</span> <span class=\"s\">\"sleep...\"</span>\n  <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"c\">### list 생성 ###</span>\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">sleep_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n  <span class=\"k\">print</span> <span class=\"n\">i</span>\n<span class=\"c\">## result : ##</span>\n<span class=\"c\"># sleep...</span>\n<span class=\"c\"># sleep...</span>\n<span class=\"c\"># sleep...</span>\n<span class=\"c\"># 0</span>\n<span class=\"c\"># 1</span>\n<span class=\"c\"># 2</span>\n\n<span class=\"c\">### generator 생성 ###</span>\n<span class=\"n\">generator</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">sleep_function</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">generator</span><span class=\"p\">:</span>\n  <span class=\"k\">print</span> <span class=\"n\">i</span>\n<span class=\"c\">## result : ##</span>\n<span class=\"c\"># sleep...</span>\n<span class=\"c\"># 0</span>\n<span class=\"c\"># sleep...</span>\n<span class=\"c\"># 1</span>\n<span class=\"c\"># sleep...</span>\n<span class=\"c\"># 2</span>\n</code></pre>\n</div>\n<ul>\n  <li>리스트 컴프리헨션은 리스트의 모든 값을 먼저 수행하기 떄문에 리스트 값이 매우 큰 경우 그 만큼 부담으로 작용된다.</li>\n  <li>하지만 제너레이터 컴프리헨션은 실제 값을 로딩하지 않고 반복문이 수행 될 때마다 하나씩 sleep_func()을 수행하며 값을 불러온다. 즉, <strong>수행 시간이 긴 연산을 필요한 순간까지 늦출 수 있다</strong> 는 점이 있다.</li>\n</ul>\n\n<h4 id=\"이러한-특징을-이용하면-피보나치-수열을-간결한-문법과-더불어-효율적으로-작성할-수-있다\">이러한 특징을 이용하면 피보나치 수열을 간결한 문법과 더불어 효율적으로 작성할 수 있다.</h4>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n            <span class=\"k\">break</span>\n        <span class=\"k\">yield</span> <span class=\"n\">a</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span>\n        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">fib</span> <span class=\"o\">=</span> <span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">fib</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "컴프리헨션(Comprehension)",
      "category" : "파이썬 문법basic",
      "tags"     : "Python, List, Dictionary, Comprehension",
      "url"      : "/%ED%8C%8C%EC%9D%B4%EC%8D%AC%20%EB%AC%B8%EB%B2%95/basic/2017/06/09/python-basic-comprehension.html",
      "date"     : "2017-06-09 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>٩(๑òωó๑)۶ 아, 아, 마이크 테스트<br />\n이 마크다운은 빌루바노빅의 ‘Introducing Python’을 토대로 작성되었습니다.\n제 기준 헷갈리는 개념을 위주로 다른 문서를 참고하여 이해하기 쉽도록 내용을 더하였습니다.</p>\n</blockquote>\n\n<p><br /></p>\n<h2 id=\"컴프리헨션\">컴프리헨션</h2>\n<ul>\n  <li>사전적 의미 : 이해력</li>\n  <li>컴퓨터적 의미 : 함축, 하나 이상의 이터레이터(리스트, 튜플…)로 부터 코드를 절약한 자료구조를 만드는 방법</li>\n</ul>\n\n<p><br /></p>\n<h4 id=\"리스트-컴프리헨션\">리스트 컴프리헨션</h4>\n<blockquote>\n  <p>1부터 5까지 정수 리스트를 만드는 데에는 아래와 같은 방법들이 있다.</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># 1. 일반 루프 방식</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>   <span class=\"n\">num_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num_list</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n\n<span class=\"c\"># 2. 리스트 컴프리헨션 사용</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num_list</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n<ul>\n  <li>이들 접근 방식은 동일한 결과를 생성한다. 하지만 <strong>리스트 컴프리헨션</strong> 을 사용해서 리스트를 만드는 것이 조금 더 파이써닉한 방법이라고 할 수 있다.\n<br /><br /></li>\n</ul>\n\n<blockquote>\n  <p>[표현식 for 항목 in 순회 가능한 객체]</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">num</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)]</span>\n</code></pre>\n</div>\n<ul>\n  <li>리스트에 대한 값을 생성하는 <code class=\"highlighter-rouge\">첫 번째 num</code> 변수(표현식)는 루프의 결과에 주어진 연산식을 적용하여 num_list 변수에 넣어준다.</li>\n  <li><code class=\"highlighter-rouge\">두 번째 num</code> 변수는 단순히 for문의 일부이다.\n<br /><br /></li>\n</ul>\n\n<blockquote>\n  <p>[표현식 for 항목 in 순회 가능한 객체 if 조건]</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">num</span> <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num_list</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n<ul>\n  <li><code class=\"highlighter-rouge\">num % 2 == 1</code> 은 홀수일 때 True 짝수일 때 False를 도출하여 True 값인 홀수를 생성한다.\n<br /><br /></li>\n</ul>\n\n<blockquote>\n  <p>하나 이상의 중첩 for문도 사용할 수 있다.</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cells</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">rows</span> <span class=\"k\">for</span> <span class=\"n\">col</span> <span class=\"ow\">in</span> <span class=\"n\">cols</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">cell</span> <span class=\"ow\">in</span> <span class=\"n\">cells</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>   <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cell</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p><br /></p>\n<h4 id=\"딕셔너리-컴프리헨션\">딕셔너리 컴프리헨션</h4>\n<ul>\n  <li>딕셔너리 형태로 값을 반환받는 것을 제외하고 리스트 컴프리헨션과 거의 흡사하다.</li>\n</ul>\n\n<blockquote>\n  <p>{키표현식 : 값표현식 for 항목 in 순회 가능한 객체}</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s\">'letters'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">letter_counts</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">letter</span><span class=\"p\">:</span> <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">letter</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">letter</span> <span class=\"ow\">in</span> <span class=\"n\">word</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">letter_counts</span>\n<span class=\"p\">{</span><span class=\"s\">'l'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'e'</span> <span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'t'</span> <span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'r'</span> <span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'s'</span> <span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n</code></pre>\n</div>\n<ul>\n  <li>첫 번째 letter 변수는 Key로서 for문으로부터 순차적으로 문자열을 받는다.</li>\n  <li>word.count(letter) 는 Value로서 첫 번째 letter 변수에서 받은 문자열을 세어 정수로 반환한다.</li>\n  <li>하지만 이 방식으로 문자열을 셀 경우, ‘e’와 ‘t’는 두 번씩 순회하며 세기 때문에 시간 낭비를 초래할 수 있다.</li>\n  <li><code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">letter:</span><span class=\"w\"> </span><span class=\"err\">word.count(letter)</span><span class=\"w\"> </span><span class=\"err\">for</span><span class=\"w\"> </span><span class=\"err\">letter</span><span class=\"w\"> </span><span class=\"err\">in</span><span class=\"w\"> </span><span class=\"err\">set(word)</span><span class=\"p\">}</span></code> 면 시간 낭비를 줄이고 조금 더 파이써닉하게 처리할 수 있다.</li>\n</ul>\n\n<p><br /></p>\n<h4 id=\"결론\"><em>결론</em></h4>\n<ul>\n  <li>컴프리헨션은 이전 예제보다 간단하지 않지만, 더 많은 것을 간단한 원리로 표현할 수 있도록 해준다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[장고 기본편] 6. Migrations",
      "category" : "여행 블로그 만들기travel",
      "tags"     : "Django, AskDjango, Migrations, Fields",
      "url"      : "/%EC%97%AC%ED%96%89%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/travel/2017/06/08/askdjango-Migrations.html",
      "date"     : "2017-06-08 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>| ٩(๑òωó๑)۶ 아, 아, 마이크 테스트 |<br />\n이 마크다운은 이진석 선생님의 ‘Ask Django VOD 장고 기본편(Feat.여행 블로그 만들기)’를 토대로 작성되었습니다.</p>\n</blockquote>\n\n<p><br /></p>\n<h1 id=\"migrations\">Migrations</h1>\n<ul>\n  <li>초기에 테이블 최초 생성만 가능하고 변경된 내용은 반영하지 않는 <code class=\"highlighter-rouge\">syncdb</code> 명령어가 있었지만, django-south 프로젝트가 킥스타터 펀딩을 통해, Django 1.7에 마이그레이션을 포함하였다.</li>\n  <li>모델 변경내역 히스토리 관리가 가능</li>\n  <li>모델의 변경내열을 데이터베이스 스키마(데이터베이스 데이터 구조)로 반영시키는 효율적인 방법을 제공</li>\n</ul>\n\n<p><br /></p>\n<h4 id=\"관련-명령어\">관련 명령어</h4>\n<p># ‘python manage.py’ 는 공통이므로 생략하겠습니다.</p>\n<ul>\n  <li><code class=\"highlighter-rouge\">makemigrations &lt;app-name&gt;</code> : 마이그레이션 파일(초안) 생성</li>\n  <li><code class=\"highlighter-rouge\">migrate &lt;app-name&gt;</code> : 해당 마이그레이션 파일을 DB에 반영</li>\n</ul>\n\n<div class=\"language-text highlighter-rouge\"><pre class=\"highlight\"><code>[모델 내역 #4]            \n[모델 내역 #3]                        [DB Schema #3]\n[모델 내역 #2] ---&gt; [변경 내역 #2] ---&gt; [DB Schema #2]\n[모델 내역 #1]      [변경 내역 #1]      [DB Schema #1]\n&lt;Django 모델&gt;     &lt;마이그레이션파일&gt;       &lt;데이터베이스&gt;\n</code></pre>\n</div>\n<ul>\n  <li>내역이 하나 생기면 알아서 데이터베이스에 반영되면 좋겠지만, 장고는 2단계를 거친다.</li>\n  <li>1단계: makemigrations 명령으로 (어떤식으로 데이터베이스 내용을 변경시키겠다는)작업지시서 생성\n    <ul>\n      <li>이 작업 후에 개발자는 필히 해당 파일을 열어서 확인하는 과정이 필요하다.</li>\n      <li>반영이 안 된 마이그레이션은 제거해도 무관하다.</li>\n    </ul>\n  </li>\n  <li>2단계: migrate 명령으로 데이터베이스에 반영</li>\n  <li>왜 굳이 2단계인가?\n    <ul>\n      <li>모델 내역 그대로 데이터베이스 반영되는 것은 매우 위험한 일이 될 수 있다.</li>\n      <li>어떤 작업을 수행할 것인지에 대한 내역서를 만드는 것은 일종의 안정장치이다.</li>\n    </ul>\n  </li>\n  <li><code class=\"highlighter-rouge\">showmigrations &lt;app-name&gt;</code> : 마이그레이션 적용 현황</li>\n  <li><code class=\"highlighter-rouge\">sqlmigrate &lt;app-name&gt; &lt;migration-number&gt;</code> : 지정 마이그레이션에 대한 SQL을 볼 수 있다.</li>\n</ul>\n\n<p><br /></p>\n<h6 id=\"마이그레이션-되돌리기\">마이그레이션 되돌리기</h6>\n<ol>\n  <li><code class=\"highlighter-rouge\">./manage.py migrate &lt;app-name&gt; &lt;migration-number&gt;</code> 명령어 입력.</li>\n  <li>되돌린만큼의 마이그레이션을 삭제한다.</li>\n  <li><code class=\"highlighter-rouge\">./manage.py showmigrations</code>을 통해서 지워졌는지 확인</li>\n</ol>\n\n<p><br /></p>\n<h4 id=\"migrate-forwardbackward\"><strong>Migrate</strong> (Forward/Backward)</h4>\n<blockquote>\n  <p>Forward/Backward 명령어가 따로 있는 것이 아니라 <code class=\"highlighter-rouge\">migrate</code> 명령어 하나로 다 해결할 수 있다.</p>\n</blockquote>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">./manage.py migrate &lt;app-name&gt;</code>\n    <ul>\n      <li>미적용 마이그레이션 파일부터 최근 마이그레이션 파일까지 “Forward 마이그레이션”이 순차적으로 수행</li>\n    </ul>\n  </li>\n  <li><code class=\"highlighter-rouge\">./manage.py migrate &lt;app-name&gt; &lt;migration-file-name&gt;</code>\n    <ul>\n      <li>지정된 마이그레이션 파일이 현재 적용된 마이그레이션보다 이전이라면 이후의 마이그레이션을 취소하고 마지막 상태의 마이그레이션을 지정된 마이그레이션으로 사용하겠다는 뜻(Backward)</li>\n      <li>그 반대로 이후의 마이그레이션이라면 해당 마이그레이션만 수행하겠다는 의미이다.(Forward)</li>\n    </ul>\n  </li>\n  <li><code class=\"highlighter-rouge\">./manage.py migrate zero</code>\n    <ul>\n      <li>모든 마이그레이션을 취소하겠다는 의미이다.</li>\n    </ul>\n  </li>\n</ul>\n\n<p><br /></p>\n<h3 id=\"id-필드\"><strong>id 필드</strong></h3>\n<ul>\n  <li>모든 데이터베이스 테이블에는 각 Row의 식별기준인 <code class=\"highlighter-rouge\">기본키(Primary Key)</code>가 필요하다.\n    <ul>\n      <li>즉, 중복되는 데이터가 없다.(데이터베이스의 무결성)</li>\n    </ul>\n  </li>\n  <li>Django 에서는 기본키로 id 필드(AutoField)가 디폴드로 지정되어 있다.</li>\n  <li>기본키는 줄여서 <code class=\"highlighter-rouge\">pk</code>로 접근 가능</li>\n</ul>\n\n<p><br /></p>\n<h3 id=\"기존에-없는-필수필드를-추가하고-마이그레이션-할-때\">기존에 없는 필수필드를 추가하고 마이그레이션 할 때</h3>\n<ul>\n  <li>여기에서 필수필드란? blank, null 옵션을 주지 않은 것</li>\n  <li>필수필드이기 때문에 이전 데이터가 해당 컬럼값을 가지고 있지 않다면, 반드시 넣어줘야한다.</li>\n  <li>따라서 마이그레이션을 할 때, 아래와 같은 질의를 던진다.\n    <ul>\n      <li>선택1) 지금 값을 입력</li>\n      <li>선택2) 모델 클래스를 수정하고 다시 명령어를 수행</li>\n    </ul>\n  </li>\n</ul>\n\n<div class=\"language-text highlighter-rouge\"><pre class=\"highlight\"><code>You are trying to add a non-nullable field 'author' to post without a default; we can't do that (the database needs something to populate existing rows).\nPlease select a fix:\n 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)\n 2) Quit, and let me add a default in models.py\nSelect an option:\n\n# 추가한 필수 필드에 어떤 값을 채워넣어야할 지 모르겠으니\n1)장고 모델의 디폴트 값을 제공해주겠다.\n2)사용자가 임의로 값을 지정을 하든, 옵션 필드로 변경을 하든 하겠다.\n를 선택하시오\n</code></pre>\n</div>\n<h6 id=\"1번-선택-시--\">1번 선택 시 :-)</h6>\n<div class=\"language-text highlighter-rouge\"><pre class=\"highlight\"><code>Select an option: 1\nPlease enter the default value now, as valid Python\nThe datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now\nType 'exit' to exit this prompt\n&gt;&gt;&gt; 'anonymous'\n</code></pre>\n</div>\n<ul>\n  <li>빈 컬럼에 대하여 ‘anonymous’ 값을 주겠다.</li>\n  <li>반드시 필드 타입에 맞춰서 줄 것</li>\n</ul>\n\n<p><br /></p>\n<h3 id=\"결론\"><em>결론</em></h3>\n<p>마이그레이션은 모든 테이블 Row에 대한 컬럼이 추가되므로 데이터 양이 방대하면 문제가 발생할 수 있다. 애초에 설계를 신중하게 하는 것을 지향할 것</p>\n"
    } ,
  
    {
      "title"    : "[장고 기본편] 5. Model",
      "category" : "여행 블로그 만들기travel",
      "tags"     : "Django, AskDjango, View, FBVCBV",
      "url"      : "/%EC%97%AC%ED%96%89%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/travel/2017/06/07/askdjango-Model-and-Model-Fields.html",
      "date"     : "2017-06-07 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>| ٩(๑òωó๑)۶ 아, 아, 마이크 테스트 |<br />\n이 마크다운은 이진석 선생님의 ‘Ask Django VOD 장고 기본편(Feat.여행 블로그 만들기)’를 토대로 작성되었습니다.</p>\n</blockquote>\n\n<h2 id=\"sqlstructured-query-language\">SQL(Structured Query Language)</h2>\n<ul>\n  <li>Query : 정보 수집 요청에 쓰이는 컴퓨터 언어</li>\n  <li>SQL : 관계형 데이터베이스 관리 시스템(RDBMS)의 데이터를 관리하기 위해 설계된 프로그래밍 언어</li>\n  <li>장고의 <code class=\"highlighter-rouge\">Model</code>은 RDBMS만을 지원한다.</li>\n  <li>장고는 <code class=\"highlighter-rouge\">Model</code>을 통해 SQL을 생성하고 실행한다.</li>\n</ul>\n\n<h2 id=\"django-model\">Django Model</h2>\n<ul>\n  <li>장고 모델은 장고의 내장 ORM(Object Relational Mapping)이다.\n    <ul>\n      <li>ORM이란? 데이터베이스와 객체 지향 프로그래밍 언어 간의 호환되지 않는 데이터를 변환하는 프로그래밍 기법</li>\n    </ul>\n  </li>\n  <li>SQL을 직접 작성하지 않아도 장고 모델을 통해 데이터베이스로의 접근이 가능하다.</li>\n  <li>즉, <code class=\"highlighter-rouge\">Model</code>은 <파이썬 클래스=\"\"> 와 <데이터베이스 테이블=\"\"> 을 매핑한다.\n</데이터베이스></파이썬>    <ul>\n      <li>Model Instance : DB 테이블의 Row</li>\n      <li>예를 들어 blog앱 Post모델이면, 데이터베이스의 blog_post테이블과 매핑하고, blog앱 Comment모델이면, blog_comment테이블과 매핑을 한다.</li>\n    </ul>\n  </li>\n  <li>데이터베이스 테이블의 구조 및 타입을 먼저 설계하고 모델을 정의한다. 이 때 모델 클래스명은 단수형</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span>\n      <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n      <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s\">'제목'</span><span class=\"p\">,</span>\n      <span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"s\">'포스팅 제목을 입력해주세요. 최대 100자 내외'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"c\"># 길이 제한이 있는 문자열</span>\n\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">(</span>\n      <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s\">'내용'</span>\n    <span class=\"p\">)</span> <span class=\"c\"># 길이 제한이 없는 문자열</span>\n\n    <span class=\"n\">acreated_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span>\n      <span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"bp\">True</span>\n    <span class=\"p\">)</span> <span class=\"c\"># 최초 저장될 때 최초 저장 일시</span>\n\n    <span class=\"n\">updated_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span>\n      <span class=\"n\">auto_now</span><span class=\"o\">=</span><span class=\"bp\">True</span>\n    <span class=\"p\">)</span> <span class=\"c\"># 갱신 시 저장 일시</span>\n\n</code></pre>\n</div>\n\n<h4 id=\"장고에서-지원하는-모델-필드-타입\">장고에서 지원하는 모델 필드 타입</h4>\n<ul>\n  <li>Field Tyeps : AutoField, BooleanField, CharField, DateTimeField, FileField, ImangeField, TextField…</li>\n  <li>Relation ship Types : ForeignKey, ManyToManyField, OneToOneField…</li>\n</ul>\n\n<h3 id=\"필드-옵션\">필드 옵션</h3>\n<ul>\n  <li>필드마다 고유 옵션이 있고,</li>\n  <li>모든 필드에 공통으로 쓸 수 있는 옵션이 있다.\n    <ul>\n      <li>null(DB Option) : DB 필드에 NULL 허용 여부(Default : False)</li>\n      <li>unique(DB Option) : 유일성 여부</li>\n      <li>blank : 입력값 유효성(validation) 검사 시 empty 값 허용 여부(Default : False)</li>\n      <li>choices(form widget용) : select box (‘저장될 값’, ‘UI에 보여질 레이블’)</li>\n      <li>validators : 입력값 유효성 검사를 수행할 함수를 여러 개 지정\n        <ul>\n          <li>이메일만 받기, 최대 길이 제한, 최소값 제한…</li>\n          <li>인자로 받는 값이 해당 함수 목적에 맞지 않으면, 목적에 맞지 않다는 안내 메세지와 함께 실행이 중단됨</li>\n        </ul>\n      </li>\n      <li>verbose_name : 필드 레이블. 지정되지 않으면 필드명이 쓰여짐</li>\n      <li>help_text(form widget 용) : 필드 입력 도움말</li>\n    </ul>\n  </li>\n</ul>\n"
    } ,
  
    {
      "title"    : "TryHelloWorld 알고리즘 레벨 1-5",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/06/07/tryhelloworld-algorithm-level1-5.html",
      "date"     : "2017-06-07 00:00:00 +0900",
      "content"   : "<h2 id=\"딕셔너리-정렬\">딕셔너리 정렬</h2>\n<p>딕셔너리는 들어있는 값에 순서가 없지만, 키를 기준으로 정렬하고 싶습니다. 그래서 키와 값을 튜플로 구성하고, 이를 순서대로 리스트에 넣으려고 합니다.<br />\n예를들어 {“김철수”:78, “이하나”:97, “정진원”:88}이 있다면 각각의 키와 값을</p>\n<ul>\n  <li>(“김철수”, 78)</li>\n  <li>(“이하나”, 97)</li>\n  <li>(“정진원”, 88)</li>\n</ul>\n\n<p>과 같이 튜플로 분리하고 키를 기준으로 정렬해서 다음과 같은 리스트를 만들면 됩니다.<br />\n[ (“김철수”, 78), (“이하나”, 97), (“정진원”, 88) ]<br /></p>\n\n<p>다음 sort_dictionary 함수를 완성해 보세요.</p>\n\n<ul>\n  <li>내가 푼 것 ^0^/</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">sort_dictionary</span><span class=\"p\">(</span><span class=\"n\">dic</span><span class=\"p\">):</span>\n    <span class=\"n\">re_arrange</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">sort_name</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">dic</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sort_name</span><span class=\"p\">)):</span>\n    \t<span class=\"n\">re_arrange</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">sort_name</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dic</span><span class=\"p\">[</span><span class=\"n\">sort_name</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]))</span>\n    <span class=\"k\">return</span> <span class=\"n\">re_arrange</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"n\">sort_dictionary</span><span class=\"p\">(</span> <span class=\"p\">{</span><span class=\"s\">\"김철수\"</span><span class=\"p\">:</span><span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"s\">\"이하나\"</span><span class=\"p\">:</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"s\">\"정진원\"</span><span class=\"p\">:</span><span class=\"mi\">88</span><span class=\"p\">}</span> <span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">sort_dictionary</span><span class=\"p\">(</span><span class=\"n\">dic</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">dic</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n<p><br /><br /></p>\n<h2 id=\"같은-숫자는-싫어\">같은 숫자는 싫어</h2>\n<p>no_continuous함수는 스트링 s를 매개변수로 입력받습니다.<br /></p>\n\n<p>s의 글자들의 순서를 유지하면서, 글자들 중 연속적으로 나타나는 아이템은 제거된 배열(파이썬은 list)을 리턴하도록 함수를 완성하세요.<br />\n예를들어 다음과 같이 동작하면 됩니다.<br /></p>\n\n<p>s가 ‘133303’이라면 [‘1’, ‘3’, ‘0’, ‘3’]를 리턴<br />\ns가 ‘47330’이라면 [4, 7, 3, 0]을 리턴<br /></p>\n\n<ul>\n  <li>내가 푼 것 ^0^/</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">no_continuous</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"n\">bowl</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n    <span class=\"n\">num_value</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)):</span>\n        <span class=\"k\">if</span> <span class=\"n\">num_value</span> <span class=\"o\">!=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span>\n            <span class=\"n\">num_value</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n            <span class=\"n\">bowl</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">num_value</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">bowl</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"n\">no_continuous</span><span class=\"p\">(</span> <span class=\"s\">\"133303\"</span> <span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">no_continuous</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"c\"># 함수를 완성하세요</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span> <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[지킬 블로그] Disqus 댓글 기능 달기",
      "category" : "지킬 블로그 꾸미기jekyll",
      "tags"     : "Jekyll",
      "url"      : "/%EC%A7%80%ED%82%AC%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EA%BE%B8%EB%AF%B8%EA%B8%B0/jekyll/2017/06/06/jekyll-blog-comment.html",
      "date"     : "2017-06-06 00:00:00 +0900",
      "content"   : "<h3 id=\"지킬-블로그-댓글-기능-달기\">지킬 블로그 댓글 기능 달기</h3>\n<p>Disqus는 정적인 Jekyll에서 동적 기능인 댓글을 사용할 수 있게 한다.</p>\n\n<h3 id=\"step1-disqus-가입하기\">Step1) Disqus 가입하기</h3>\n<p><a href=\"https://disqus.com/\">Disqus</a> 에서 회원가입 하고, 이메일로 verify를 한다.</p>\n\n<h3 id=\"step2-사이트-등록하기\">Step2) 사이트 등록하기</h3>\n<ul>\n  <li>\n    <p>오른편 톱니바퀴 모양 아이콘을 클릭하고, 드롭다운 메뉴의 <code class=\"highlighter-rouge\">Add Disqus To Site</code> 페이지에서 <code class=\"highlighter-rouge\">GET STARTED</code>를 클릭한다.</p>\n  </li>\n  <li>\n    <p>2번 째 항목인 <code class=\"highlighter-rouge\">I want to install Disqus on my site</code>를 클릭한다.</p>\n  </li>\n  <li>\n    <p>웹사이트 이름과 카테고리를 임의로 지정해주고, 웹사이트 URL은 댓글 기능을 붙일 내 블로그 주소를 기입한다.</p>\n  </li>\n</ul>\n\n<h3 id=\"step3-installation과-jekyll에-적용\">Step3) Installation과 Jekyll에 적용</h3>\n<ul>\n  <li>\n    <p>Jekyll 항목을 선택하고, 아래와 같은 Universal Code를 얻는다.</p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">_includes</code> 디렉토리에 comments.html 을 생성하고 얻은 코드를\n<code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">%</span><span class=\"w\"> </span><span class=\"err\">if</span><span class=\"w\"> </span><span class=\"err\">page.comments</span><span class=\"w\"> </span><span class=\"err\">%</span><span class=\"p\">}</span></code> 와 <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">%</span><span class=\"w\"> </span><span class=\"err\">endif</span><span class=\"w\"> </span><span class=\"err\">%</span><span class=\"p\">}</span></code> 사이에 붙여넣는다.</p>\n  </li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"k\">if</span> <span class=\"n\">page</span><span class=\"o\">.</span><span class=\"n\">comments</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n  <span class=\"o\">&lt;</span><span class=\"n\">div</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s\">\"disqus_thread\"</span><span class=\"o\">&gt;&lt;/</span><span class=\"n\">div</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"n\">script</span><span class=\"o\">&gt;</span>\n\n  <span class=\"o\">/**</span>\n  <span class=\"o\">*</span>  <span class=\"n\">RECOMMENDED</span> <span class=\"n\">CONFIGURATION</span> <span class=\"n\">VARIABLES</span><span class=\"p\">:</span> <span class=\"n\">EDIT</span> <span class=\"n\">AND</span> <span class=\"n\">UNCOMMENT</span> <span class=\"n\">THE</span> <span class=\"n\">SECTION</span> <span class=\"n\">BELOW</span> <span class=\"n\">TO</span> <span class=\"n\">INSERT</span> <span class=\"n\">DYNAMIC</span> <span class=\"n\">VALUES</span> <span class=\"n\">FROM</span> <span class=\"n\">YOUR</span> <span class=\"n\">PLATFORM</span> <span class=\"n\">OR</span> <span class=\"n\">CMS</span><span class=\"o\">.</span>\n  <span class=\"o\">*</span>  <span class=\"n\">LEARN</span> <span class=\"n\">WHY</span> <span class=\"n\">DEFINING</span> <span class=\"n\">THESE</span> <span class=\"n\">VARIABLES</span> <span class=\"n\">IS</span> <span class=\"n\">IMPORTANT</span><span class=\"p\">:</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">disqus</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">admin</span><span class=\"o\">/</span><span class=\"n\">universalcode</span><span class=\"o\">/</span><span class=\"c\">#configuration-variables*/</span>\n  <span class=\"o\">/*</span>\n  <span class=\"n\">var</span> <span class=\"n\">disqus_config</span> <span class=\"o\">=</span> <span class=\"n\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">this</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"o\">.</span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">PAGE_URL</span><span class=\"p\">;</span>  <span class=\"o\">//</span> <span class=\"n\">Replace</span> <span class=\"n\">PAGE_URL</span> <span class=\"k\">with</span> <span class=\"n\">your</span> <span class=\"n\">page</span><span class=\"s\">'s canonical URL variable</span><span class=\"err\">\n</span><span class=\"s\">  this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page'</span><span class=\"n\">s</span> <span class=\"n\">unique</span> <span class=\"n\">identifier</span> <span class=\"n\">variable</span>\n  <span class=\"p\">};</span>\n  <span class=\"o\">*/</span>\n  <span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"o\">//</span> <span class=\"n\">DON</span><span class=\"s\">'T EDIT BELOW THIS LINE</span><span class=\"err\">\n</span><span class=\"s\">  var d = document, s = d.createElement('</span><span class=\"n\">script</span><span class=\"s\">');</span><span class=\"err\">\n</span><span class=\"s\">  s.src =</span><span class=\"err\">\n\n</span><span class=\"s\">  ...</span><span class=\"err\">\n\n</span><span class=\"s\">{</span><span class=\"si\">% </span><span class=\"s\">endif </span><span class=\"si\">%</span><span class=\"s\">}</span><span class=\"err\">\n\n</span></code></pre>\n</div>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">_layouts</code> 디렉토리의 <code class=\"highlighter-rouge\">post.html</code> 에서 댓글 기능을 붙일 위치에 다음과 같이 include를 한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"o\">&lt;</span><span class=\"n\">div</span><span class=\"o\">&gt;</span>\n  <span class=\"p\">{{</span> <span class=\"n\">content</span> <span class=\"p\">}}</span>\n  <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"n\">include</span> <span class=\"n\">comments</span><span class=\"o\">.</span><span class=\"n\">html</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">div</span><span class=\"o\">&gt;</span>\n\n</code></pre>\n</div>\n\n<h3 id=\"step4-포스트에-disqus-사용하기\">Step4) 포스트에 Disqus 사용하기</h3>\n<p>Disqus를 사용하려면, YAML frontmatter에 아래와 같이 comments: true를 삽입하면 된다. comments: false나 comments: 자체를 넣지 않으면 Disqus가 나타나지 않는다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"o\">---</span>\n<span class=\"n\">layout</span><span class=\"p\">:</span> <span class=\"n\">default</span>\n<span class=\"n\">comments</span><span class=\"p\">:</span> <span class=\"n\">true</span>\n<span class=\"c\"># other options</span>\n<span class=\"o\">---</span>\n\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "TryHelloWorld 알고리즘 레벨 1-4",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/06/06/tryhelloworld-algorithm-level1-4.html",
      "date"     : "2017-06-06 00:00:00 +0900",
      "content"   : "<h2 id=\"문자열-다루기-기본\">문자열 다루기 기본</h2>\n<p>alpha_string46함수는 문자열 s를 매개변수로 입력받습니다.<br />\ns의 길이가 4혹은 6이고, 숫자로만 구성되있는지 확인해주는 함수를 완성하세요.<br />\n예를들어 s가 “a234”이면 False를 리턴하고 “1234”라면 True를 리턴하면 됩니다<br /></p>\n\n<ul>\n  <li>내가 푼 것 ^0^/</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">alpha_string46</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"n\">num_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">num_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">4</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">6</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)):</span>\n        <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">num_list</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"n\">alpha_string46</span><span class=\"p\">(</span><span class=\"s\">\"a23415\"</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"n\">alpha_string46</span><span class=\"p\">(</span><span class=\"s\">\"031779\"</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">alpha_string46</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">isdigit</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n<p><br /><br /></p>\n<h2 id=\"문자열-내-p와-y의-개수\">문자열 내 p와 y의 개수</h2>\n<p>numPY함수는 대문자와 소문자가 섞여있는 문자열 s를 매개변수로 입력받습니다.<br />\ns에 ‘p’의 개수와 ‘y’의 개수를 비교해 같으면 True, 다르면 False를 리턴하도록 함수를 완성하세요. ‘p’, ‘y’ 모두 하나도 없는 경우는 항상 True를 리턴합니다.<br />\n예를들어 s가 “pPoooyY”면 True를 리턴하고 “Pyy”라면 False를 리턴합니다.<br /></p>\n\n<ul>\n  <li>내가 푼 것 ^0^/</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">numPY</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n\t<span class=\"n\">p_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\t<span class=\"n\">y_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"s\">\"p\"</span> <span class=\"ow\">or</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"s\">\"P\"</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">p_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\t\t<span class=\"k\">elif</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"s\">\"y\"</span> <span class=\"ow\">or</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"s\">\"Y\"</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">y_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">p_count</span><span class=\"p\">,</span> <span class=\"n\">y_count</span><span class=\"p\">)</span>\n\n\t<span class=\"k\">if</span> <span class=\"n\">p_count</span> <span class=\"o\">==</span> <span class=\"n\">y_count</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span> <span class=\"bp\">True</span>\n\t<span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"n\">numPY</span><span class=\"p\">(</span><span class=\"s\">\"YbYYYpppEPRm\"</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"n\">numPY</span><span class=\"p\">(</span><span class=\"s\">\"Pyy\"</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">numPY</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s\">'p'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s\">'y'</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n<p><br /><br /></p>\n<h4 id=\"소감\"><em>소감</em></h4>\n<ul>\n  <li>이번 알고리즘은 내 기준에서 매우 어려웠다. 코드 엄청 긴 것 보소&gt;.0 그에 비해 다른 사람이 한 줄로 풀어낸 것을 보노라면 어김없이 현타가 찾아온다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[장고 기본편] 4. View",
      "category" : "여행 블로그 만들기travel",
      "tags"     : "Django, AskDjango, View, FBVCBV",
      "url"      : "/%EC%97%AC%ED%96%89%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/travel/2017/06/04/askdjango-View-OverView.html",
      "date"     : "2017-06-04 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>| ٩(๑òωó๑)۶ 아, 아, 마이크 테스트 |<br />\n이 마크다운은 이진석 선생님의 ‘Ask Django VOD 장고 기본편(Feat.여행 블로그 만들기)’를 토대로 작성되었습니다.</p>\n</blockquote>\n\n<h2 id=\"view\">View</h2>\n<ul>\n  <li>URLConf로부터 받은 객체\n    <ul>\n      <li>첫번째 인자로 <code class=\"highlighter-rouge\">HttpRequest</code> 인스턴스를 받는다.</li>\n      <li>또한 반드시 <code class=\"highlighter-rouge\">HttpRequest</code> 인스턴스를 리턴해야한다.</li>\n    </ul>\n  </li>\n  <li>뷰는 크게 <code class=\"highlighter-rouge\">함수기반 뷰</code>와 <code class=\"highlighter-rouge\">클래스기반 뷰</code>로 구분된다.</li>\n</ul>\n\n<blockquote>\n  <p><em>Function Based View</em> 예시</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">post_list</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n  <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">'Hello'</span>\n  <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s\">'''\n    &lt;h1&gt;{}, World!&lt;/h1&gt;\n  '''</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<blockquote>\n  <p><em>Class Based View</em> 예시</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">View</span>\n<span class=\"c\"># 뷰 사용패턴을 일반화시켜놓은 뷰의 모음</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SampleTemplateView</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n  <span class=\"nd\">@classmethod</span>\n  <span class=\"k\">def</span> <span class=\"nf\">as_view</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"p\">,</span> <span class=\"n\">template_name</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">view_fn</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n      <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">template_name</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">view_fn</span>\n\n<span class=\"n\">fbv_view</span> <span class=\"o\">=</span> <span class=\"n\">SampleTemplateView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span><span class=\"s\">'myapp/sample_template.html'</span><span class=\"p\">)</span>\n<span class=\"c\"># as_view() 클래스 함수를 통해 함수기반 뷰에 입각한 객체 생성, 즉 클래스를 통해 함수를 호출</span>\n</code></pre>\n</div>\n<p><br /></p>\n\n<h3 id=\"template-공통\">Template 공통</h3>\n<p>[myapp/templates/myapp/post_form.html]<br /></p>\n<ul>\n  <li>table 태그 위에 <code class=\"highlighter-rouge\">csrf_token</code> 가 와야하는데 지킬 서버에서 오류를 일으키기 때문에 따로 기재합니다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"n\">form</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s\">\"\"</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s\">\"post\"</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"n\">table</span><span class=\"o\">&gt;</span>\n        \n  <span class=\"o\">&lt;/</span><span class=\"n\">table</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nb\">input</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s\">\"submit\"</span> <span class=\"o\">/&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">form</span><span class=\"o\">&gt;</span>\n</code></pre>\n</div>\n<p><br />\n뷰에 대한 더 자세한 내용이 궁금하다면 <a href=\"https://bbungsang.github.io/tutorial/2017/06/03/django-tutorial-part3-2.html\">Click!</a></p>\n"
    } ,
  
    {
      "title"    : "[장고 기본편] 3. URLConf와 정규표현식",
      "category" : "여행 블로그 만들기travel",
      "tags"     : "Django, AskDjango, URLConf, 정규표현식",
      "url"      : "/%EC%97%AC%ED%96%89%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/travel/2017/06/04/askdjango-URLConf-RegularExpression.html",
      "date"     : "2017-06-04 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>| ٩(๑òωó๑)۶ 아, 아, 마이크 테스트 |<br />\n이 마크다운은 이진석 선생님의 ‘Ask Django VOD 장고 기본편(Feat.여행 블로그 만들기)’를 토대로 작성되었습니다.</p>\n</blockquote>\n\n<ul>\n  <li>프로젝트/settings.py 최상위 URLConf 모듈을 지정한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">ROOT_URLCONF</span> <span class=\"o\">=</span> <span class=\"s\">'mysite/urls'</span> <span class=\"c\"># mysite/urls.py</span>\n</code></pre>\n</div>\n<ul>\n  <li>장고서버로 HTTP 요청이 들어올 때마다, URL 매핑 리스트를 처음부터 끝까지 순차적으로 검색한다.</li>\n  <li>적합한 URL 을 찾지 못 하면, 404 Page Not Found 페이지를 보여준다.</li>\n</ul>\n\n<p>[어플리케이션/urls.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span> <span class=\"c\"># 현재 디렉토리 어플리케이션/ 에서 views 파일 임포트</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">post_list</span><span class=\"p\">),</span> <span class=\"c\"># 포스팅 목록, views 에서 post_list 라는 함수 자체를 호출</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^new/$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">post_new</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'post_new'</span><span class=\"p\">),</span> <span class=\"c\"># 새 포스팅</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^(?P&lt;id&gt;</span><span class=\"err\">\\</span><span class=\"s\">d+)/$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">post_detail</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'post_detail'</span><span class=\"p\">),</span> <span class=\"c\"># 포스팅 보기</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<h3 id=\"정규표현식-풀이\">정규표현식 풀이</h3>\n<p>***r’^(?P<id>\\d+)/$'***</id></p>\n<ul>\n  <li><code class=\"highlighter-rouge\">^</code>와 <code class=\"highlighter-rouge\">$</code> : 시작과 끝을 표현한다.</li>\n  <li><code class=\"highlighter-rouge\">(?P)</code> : 이 영역의 문자열에 정규표현식을 적용해서</li>\n  <li><code class=\"highlighter-rouge\">\\d+</code> : 1이상의 숫자인 패턴에 부합된다면,</li>\n  <li><code class=\"highlighter-rouge\">&lt;id&gt;</code> : ‘id’라는 변수명으로 인자를 넘기겠다.</li>\n  <li><em>id 변수명으로 넘어간 인자의 모든 값들은 모두 문자열 타입이다.</em></li>\n</ul>\n\n<p>[Example]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># [어플리케이션/urls.py]</span>\n\n<span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^sum/(?P&lt;x&gt;</span><span class=\"err\">\\</span><span class=\"s\">d+)/(?P&lt;y&gt;</span><span class=\"err\">\\</span><span class=\"s\">d+)/$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">mysum</span><span class=\"p\">)</span>\n<span class=\"c\"># url 주소는 sum/ 으로 시작, 그 다음 들어갈 경로는 x 를 인자로 받으며 숫자 패턴이고, 그 다음 들어갈 경로는 y 를 인자로 받으며 숫자 패턴이다.</span>\n<span class=\"c\"># 뷰의 mysum 함수로 x, y값의 파라미터가 전달되어 함수를 실행하게 된다.</span>\n\n<span class=\"c\"># [어플리케이션/views.py]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">mysum</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"c\"># request와 url 경로를 통해 전달받은 x, y값을 인자를 받아서 x + y의 값으로 응답한다.</span>\n</code></pre>\n</div>\n<p><br /><br /></p>\n<h2 id=\"정리--프로젝트와-앱을-생성하기까지\"><em>정리 : 프로젝트와 앱을 생성하기까지</em></h2>\n<ol>\n  <li>프로젝트 생성 : <code class=\"highlighter-rouge\">django-admin startproject &lt;프로젝트명&gt;</code></li>\n  <li>프로젝트 디렉토리의 settings.py 설정</li>\n  <li>앱 생성 : <code class=\"highlighter-rouge\">python manage.py startapp &lt;앱이름&gt;</code></li>\n  <li>프로젝트/settings.py의 INSTALLED_APPS에 어플리케이션 등록</li>\n  <li>앱/urls.py 파일 생성 후, 프로젝트/urls.py 에서 앱 URLConf 설정 include</li>\n</ol>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">include</span><span class=\"p\">,</span> <span class=\"n\">urls</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^앱이름/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s\">'앱이름.urls'</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s\">'앱이름'</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[장고 기본편] 2. DjangoApp, URLConf, Template",
      "category" : "여행 블로그 만들기travel",
      "tags"     : "Django, AskDjango, URLConf, 템플릿",
      "url"      : "/%EC%97%AC%ED%96%89%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/travel/2017/06/04/aksdjango-DjangoApp-URLConf-Template.html",
      "date"     : "2017-06-04 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>| ٩(๑òωó๑)۶ 아, 아, 마이크 테스트 |<br />\n이 마크다운은 이진석 선생님의 ‘Ask Django VOD 장고 기본편(Feat.여행 블로그 만들기)’를 토대로 작성되었습니다.</p>\n</blockquote>\n\n<h2 id=\"프로젝트-시작\">프로젝트 시작!</h2>\n<h4 id=\"-항상-managepy-가-있는-디렉토리상에서-장고-커맨드를-입력할-것\">&gt; 항상 manage.py 가 있는 디렉토리상에서 장고 커맨드를 입력할 것</h4>\n\n<p>0) 프로젝트 생성 : <code class=\"highlighter-rouge\">django-admin startapp &lt;app-name&gt;</code><br />\n1) 앱 디렉토리 생성 : <code class=\"highlighter-rouge\">python manage.py startapp blog</code><br />\n2) 앱을 프로젝트에 등록 : <프로젝트명>/settings.py *콤파에 유의할 것*</프로젝트명></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">'django.contrib.admin'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.auth'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.contenttypes'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.sessions'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.messages'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.staticfiles'</span><span class=\"p\">,</span>\n    <span class=\"s\">'blog'</span><span class=\"p\">,</span> <span class=\"c\"># 'blog' 앱 등록</span>\n<span class=\"p\">]</span>\n<span class=\"c\"># 현재 장고 앱으로 위 6개가 등록되어 있음.</span>\n<span class=\"c\"># django.contrib : 단순한 디렉토리 경로 장고에서 기본으로 제공되는 앱들이 이 contrib 안에 있다.</span>\n</code></pre>\n</div>\n<p>3) 첫 뷰 생성\n[앱이름/views.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">post_list</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">'blog/post_list.html'</span><span class=\"p\">)</span> <span class=\"c\"># 반드시 앱 이름을 쓰고 그 뒤에 파일명 쓰기</span>\n</code></pre>\n</div>\n<p>4) 어플리케이션 디렉토리에 urls.py 생성 후 경로 설정<br />\n[앱이름/urls.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^$'</span><span class=\"p\">,</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">post_list</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<ul>\n  <li>기본 경로에 대한 url 을 지정해주지 않았기 때문에 page not found를 응답한다.</li>\n</ul>\n\n<p>5) 프로젝트 디렉토리의 urls.py 변경 include\n[프로젝트명/urls.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">include</span><span class=\"p\">,</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^admin/'</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"p\">,</span><span class=\"n\">urls</span><span class=\"p\">),</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^blog/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s\">'blog.urls'</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<ul>\n  <li>서버를 구동시킨 후, 해당 주소 끝에 <code class=\"highlighter-rouge\">/blog/</code> 를 붙이면 템플릿이 없어서 생기는 오류창이 뜬다.</li>\n</ul>\n\n<p>6) <code class=\"highlighter-rouge\">앱이름/templates/앱이름/post_list.html</code> 생성하고 <code class=\"highlighter-rouge\">http:lobcalhost:8000/blog/</code>로 접속해본다.</p>\n"
    } ,
  
    {
      "title"    : "Django Tutorial Part3 2",
      "category" : "",
      "tags"     : "",
      "url"      : "/2017/06/03/django-tutorial-part3-2.html",
      "date"     : "2017-06-03 00:00:00 +0900",
      "content"   : "<h4 id=\"-vote\"># vote</h4>\n<p><strong>[polls/views.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">,</span> <span class=\"n\">render</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">,</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">reverse</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Choice</span><span class=\"p\">,</span> <span class=\"n\">Question</span>\n\n<span class=\"o\">...</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">vote</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">question_id</span><span class=\"p\">):</span>\n      <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">(</span><span class=\"n\">Question</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">question_id</span><span class=\"p\">)</span>\n      <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'hi'</span><span class=\"p\">)</span>\n      <span class=\"k\">try</span><span class=\"p\">:</span>\n          <span class=\"n\">selected_choice</span> <span class=\"o\">=</span> <span class=\"n\">question</span><span class=\"o\">.</span><span class=\"n\">choice_set</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">[</span><span class=\"s\">'choice'</span><span class=\"p\">])</span>\n\n      <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"nb\">KeyError</span><span class=\"p\">,</span> <span class=\"n\">Choice</span><span class=\"o\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">):</span>\n          <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">'polls/detail.html'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n              <span class=\"s\">'question'</span><span class=\"p\">:</span> <span class=\"n\">question</span><span class=\"p\">,</span>\n              <span class=\"s\">'error_message'</span><span class=\"p\">:</span> <span class=\"s\">\"You didn't select a choice\"</span><span class=\"p\">,</span>\n          <span class=\"p\">})</span>\n      <span class=\"k\">else</span><span class=\"p\">:</span>\n          <span class=\"n\">selected_choice</span><span class=\"o\">.</span><span class=\"n\">votes</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n          <span class=\"n\">selected_choice</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n          <span class=\"k\">return</span> <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s\">'results'</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">question</span><span class=\"o\">.</span><span class=\"nb\">id</span><span class=\"p\">,)))</span>\n</code></pre>\n</div>\n<ul>\n  <li>requst.POST[‘choice’] 는 선택된 choice의 ID 값을 string 으로  반환한다. request.POST value는 항상 string 형이다.</li>\n  <li>choice count 를 증가시킨 후에 코드는 HttpResponseRedirect 를 반환한다.</li>\n  <li>HttpResponseRedirect 는 한 개의 인자(사용자에게 재반응하여 보여주는 URL)만 취한다.</li>\n  <li>POST 형식으로 전달한 뒤에 항상 HttpResponseRedirect 로 반환되어야한다. 장고라서가 아니라 웹 개발의 좋은 관행이다.</li>\n  <li>reverse() 는 이 예제에서 HttpResponseRedirect 생성자에 대해 사용된 것이다.</li>\n  <li>이 함수는 view 함수에 대응한 URL이 hardcode 하는 것을 피하도록 해준다.</li>\n  <li>우리가 제어를 통과하고 URL pattern의 다양한 부분에 대한 뷰 함수의 이름을 고려한다.</li>\n</ul>\n\n<p><strong>[polls/urls.py]</strong></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span> <span class=\"c\"># from polls import views</span>\n\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"o\">...</span>\n\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^(?P&lt;question_id&gt;</span><span class=\"err\">\\</span><span class=\"s\">d+)/vote/$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">vote</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'vote'</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<p><br /><br /></p>\n<h4 id=\"-results\"># results</h4>\n<p><strong>[polls/views.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">results</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">question_id</span><span class=\"p\">):</span>\n    <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">(</span><span class=\"n\">Question</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">question_id</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">'polls/results.html'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s\">'question'</span><span class=\"p\">:</span> <span class=\"n\">question</span><span class=\"p\">})</span>\n</code></pre>\n</div>\n<p><strong>[polls/urls.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span> <span class=\"c\"># from polls import views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"o\">...</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^(?P&lt;question_id&gt;</span><span class=\"err\">\\</span><span class=\"s\">d+)/results/$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'results'</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<p><strong>[polls/results.html]</strong></p>\n"
    } ,
  
    {
      "title"    : "Django Tutorial Part3 1",
      "category" : "",
      "tags"     : "",
      "url"      : "/2017/06/03/django-tutorial-part3-1.html",
      "date"     : "2017-06-03 00:00:00 +0900",
      "content"   : "<h2 id=\"overview\">Overview</h2>\n<ul>\n  <li>\n    <p><code class=\"highlighter-rouge\">view</code>는 장고 어플리케이션에서 특정한 함수와 특정한 템플릿을 가지는 웹 페이지의 형태이다.</p>\n  </li>\n  <li>이번 투표 어플리케이션에서는 4개의 <code class=\"highlighter-rouge\">view</code>가 있다.\n    <ul>\n      <li>Question 에 대한 <code class=\"highlighter-rouge\">index(메인페이지)</code> 구현 함수: 최근 기재된 순서로 질문 목록들을 나타낸다.</li>\n      <li>Question 에 대한 <code class=\"highlighter-rouge\">detail</code> 페이지 구현 함수: 투표에 대한 양식만 있는, 즉 질문과 선택지를 나타낸다.</li>\n      <li>Question 에 대한 <code class=\"highlighter-rouge\">result</code> 페이지 구현 함수: 질문에 대한 결과를 나타낸다.</li>\n      <li>투표를 할 수 있는 함수: 투표를 처리한다.</li>\n    </ul>\n  </li>\n  <li>\n    <p>장고에서 웹 페이지와 기타 내용을 <code class=\"highlighter-rouge\">view</code>를 통해 구현한다. 각각의 <code class=\"highlighter-rouge\">view</code>는 간단한 파이썬 함수로 표현된다.</p>\n  </li>\n  <li>\n    <p>장고는 요청된 URL을 검사함으로써 <code class=\"highlighter-rouge\">view</code>를 선택하며, URL 패턴은 대략 <code class=\"highlighter-rouge\">/polls(앱명)/detail(기능을 지칭)/26(페이지 번호)/...</code> 이러한 형태를 띈다.</p>\n  </li>\n  <li>URL 에서 <code class=\"highlighter-rouge\">view</code> 를 얻기 위해 장고는 ‘URLconfs’를 사용한다. 이는 <code class=\"highlighter-rouge\">view</code>에 대한 URL 패턴을 매핑한다.\n<br /><br /></li>\n</ul>\n\n<h3 id=\"index\">index</h3>\n<p><strong>[polls/views.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">latest_question_list</span> <span class=\"o\">=</span> <span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s\">'-pub_date'</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n    <span class=\"c\"># 발행일 기준으로 순서대로 정렬되어 있는 Question 테이블의 리스트를 5개 발췌</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">'latest_question_list'</span><span class=\"p\">:</span> <span class=\"n\">latest_question_list</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">'polls/index.html'</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n<ul>\n  <li><code class=\"highlighter-rouge\">render()</code> 은 첫번째 인자로서 request 객체를 취한다. 두번째 인자는 template 의 이름, 세번째 인자는 딕셔너리이다.</li>\n  <li>context 와 함께 걸러진 template 의 HttpResponse 객체를 반환한다.</li>\n</ul>\n\n<p><strong>[polls/urls.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span> <span class=\"c\"># from polls import views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'index'</span><span class=\"p\">),</span>\n</code></pre>\n</div>\n<ul>\n  <li>name 의 value(index) 는  {% url %} 로 템플릿의 태그에 쓰인다.</li>\n</ul>\n\n<p><strong>[polls/index.html]</strong></p>\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n{% if latest_question_list %}\n    <span class=\"nt\">&lt;ul&gt;</span>\n    {% for question in latest_question_list %}\n        <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"{% url 'detail' question.id %}\"</span><span class=\"nt\">&gt;</span>{{ question.question_text }}<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n    {% endfor %}\n    <span class=\"nt\">&lt;/ul&gt;</span>\n{% else %}\n    <span class=\"nt\">&lt;p&gt;</span>No polls are available.<span class=\"nt\">&lt;/p&gt;</span>\n{% endif %}\n\n</code></pre>\n</div>\n\n<h3 id=\"detail\">detail</h3>\n<p><strong>[polls/views.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">,</span> <span class=\"n\">render</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Choice</span><span class=\"p\">,</span> <span class=\"n\">Question</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">detail</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">question_id</span><span class=\"p\">):</span>\n    <span class=\"c\"># try:</span>\n    <span class=\"c\">#     question = Question.objects.get(pk=question_id)</span>\n    <span class=\"c\"># except Question.DoesNotExist:</span>\n    <span class=\"c\">#     raise Http404(\"Question does not exist\")</span>\n    <span class=\"c\"># 만약에 요청된 ID에 대한 question 이 존재하지 않으면 view 는 Http404 예외를 일으킨다.</span>\n\n    <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">(</span><span class=\"n\">Question</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">question_id</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">'polls/detail.html'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s\">'question'</span><span class=\"p\">:</span> <span class=\"n\">question</span><span class=\"p\">})</span>\n</code></pre>\n</div>\n<ul>\n  <li>모델의 관리자인 get_object_or_404()의 인자는 만약 객자가 존재하지 않으면 Http404를 일으킨다.</li>\n  <li>왜 DoesNotExist 예외처리를 안 하고 get_object_or_404()를 쓸까? 그 까닭은 장고 중요한 목표의 하나는 느슨한 결합을 유지하는 것이다.</li>\n  <li>몇 몇의 제어된 결합은 django.shortcuts 모듈에서 도입된다.</li>\n</ul>\n\n<p><strong>[polls/urls.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span> <span class=\"c\"># from polls import views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"o\">...</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^(?P&lt;question_id&gt;[0-9]+)/$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">detail</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'detail'</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<p><strong>[detail.html]</strong></p>\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"nt\">&lt;h1&gt;</span>{{ question.question_text }}<span class=\"nt\">&lt;/h1&gt;</span>\n{% if error_message %}\n    <span class=\"nt\">&lt;p&gt;&lt;strong&gt;</span>{{ error_message }}<span class=\"nt\">&lt;/strong&gt;&lt;/p&gt;</span>\n{% endif %}\n<span class=\"nt\">&lt;form</span> <span class=\"na\">action=</span><span class=\"s\">\"{% url 'vote' question.id %}\"</span> <span class=\"na\">method=</span><span class=\"s\">\"post\"</span><span class=\"nt\">&gt;</span>\n{% csrf_token %}\n{% for choice in question.choice_set.all %}\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"radio\"</span> <span class=\"na\">name=</span><span class=\"s\">\"choice\"</span> <span class=\"na\">id=</span><span class=\"s\">\"choice{{ forloop.counter }}\"</span> <span class=\"na\">value=</span><span class=\"s\">\"{{ choice.id }}\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;label</span> <span class=\"na\">for=</span><span class=\"s\">\"choice{{ forloop.counter }}\"</span><span class=\"nt\">&gt;</span>{{ choice.choice_text }}<span class=\"nt\">&lt;/label&gt;&lt;br</span> <span class=\"nt\">/&gt;</span>\n{% endfor %}\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">value=</span><span class=\"s\">\"Vote\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/form&gt;</span>\n\n</code></pre>\n</div>\n<ul>\n  <li>이름 인자를 polls.urls.py 에서 정의했기 떄문에, {%  url %} 템플릿 태그를 사용함으로써 url 설정에 정의된 URL 경로에 대한 의존을 제거할 수 있다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "구글캠퍼스 X 원티드 리쿠르팅 | 이승배님",
      "category" : "개발자 멘토링mentoring",
      "tags"     : "",
      "url"      : "/%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%98%ED%86%A0%EB%A7%81/mentoring/2017/06/02/mentoring1.html",
      "date"     : "2017-06-02 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>2017/06/02 구글캠퍼스 X 원티드 리쿠르팅</p>\n</blockquote>\n\n<h2 id=\"이승배-티몬cto님\">이승배 (티몬)CTO님</h2>\n<p>많은 사람들이 다음과 같이 물어본다.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>내가 무슨 기술이 부족합니까?\n무슨 기술을 배워야 합니까?\n장차 무슨 기술이 유망하겠습니까?\n</code></pre>\n</div>\n<ul>\n  <li>요즘 기술이 워낙 빠르게 바뀌기 때문에 정해진 답은 없다. 굳이 답을 말하자면 기술 습득 능력이 빠른 사람일 것이다.</li>\n  <li>‘나는 머신러닝 개발자가 될거야’, ‘나는 안드로이드 개발자가 될거야’ 등의 나만의 특기를 가지는 것은 좋지만 특정 주제에 국한하여  우물에 빠질 수 있는 요소가 될 수 있다.</li>\n  <li>중요한 것은 <strong>문제를 직면하는 자세</strong> 이다. 많은 기술을 어설프게 알고 개발자 코스프레를 하기보다는 처음 접하는 기술일지라도 <strong>근본적으로 주어진 문제를 풀 수 있느냐, 어떻게 접근하느냐</strong> 가 <code class=\"highlighter-rouge\">기술을 습득한 자</code>이다.</li>\n</ul>\n\n<h3 id=\"모두가-행복해지려면-어떻게-해야할까--창의성을-발휘하라\">모두가 행복해지려면 어떻게 해야할까? : 창의성을 발휘하라.</h3>\n<ul>\n  <li>대부분의 개발자는 스스로에게 주어진 요구사항에 대해 최선을 다해서 구현하는 것에 초점을 맞추고 있다.</li>\n  <li>모두가 행복해지기 위해서 창의성을 발휘한다는 것은 개발자에 입각해서 이 부분에서는 삼항 연산자를 쓰고, 저 부분에서 퀵소트를 쓰는 것을 뜻 하는 것이 아니다.</li>\n  <li>기술적인 창의력도 중요하지만 사실은 앞쪽(비즈니스, 기획, 디자인, 협업)이 더 중요하다.</li>\n  <li><code class=\"highlighter-rouge\">소프트 엔지니어링 측면에서 무엇을 잘 하는지 + 고객들이 충분히 쉽게 잘 활용할 수 있는지(비지니스적 마인드) + 회사의 일원이 되어 잘 어울릴 수 있는지</code> 의 삼박자(그 이상)를 고루 갖춰야한다.</li>\n</ul>\n\n<h3 id=\"무엇을-잘-한다는-것\">무엇을 잘 한다는 것</h3>\n<ul>\n  <li>남들과 잘 어울리기 위해서는 반드시 내가 잘하는 것이 있어야 한다. 무언가를 잘 한다는 것은 무엇일까?</li>\n  <li><strong>다독 + 다작 + 다상량</strong></li>\n  <li>남이 잘한 코드 책을 많이 보고, 많이 따라해보고, 직접 고민하여 구현해봐야 한다.</li>\n</ul>\n\n<h3 id=\"건전한-호기심\">건전한 호기심</h3>\n<ul>\n  <li>내가 오늘 무엇을 공부했는 데, 내가 공부한 것임에도 불구하고 이해가 안 된다면 알 때까지 해야한다.</li>\n  <li>개발자들이 오늘 어떤 문제를 해결했다고 보고한다. 그러면 그 문제의 원인, 현상에 대해서 말한다. 이 때 <strong>왜 해결 됐는지</strong> 에 대한 언급은 없다.</li>\n  <li>왜 해결 됐느냐고 물어보면, ‘그냥 스택오버 플로우를 찾아보고 따라해봤더니 해결됐다.’라고 한다.</li>\n  <li>아니, <strong>안 궁금한가??</strong> 문제의 근본적인 해결책을 모르고 궁금해하지 않는다면 이는 절대 ‘문제를 해결했다.’ 내지는 ‘해당 개념을 알고있다.’라고 할 수 없다.</li>\n  <li>개발을 하는데 스스로가 모르는 부분에 대한 <strong>건전한 호기심</strong> 은 정말 중요하다!</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Django Tutorial Part1 2",
      "category" : "",
      "tags"     : "",
      "url"      : "/2017/06/02/django-tutorial-part1-2.html",
      "date"     : "2017-06-02 00:00:00 +0900",
      "content"   : "<h3 id=\"the-development-server\">The development server</h3>\n<ul>\n  <li>바깥의 <code class=\"highlighter-rouge\">mysite</code> 디렉토리로 이동하세요. 만약 이미 그 지점에 있다면 아래와 같이 명령어를 입력해주세요.<br />\n    <blockquote>\n      <p><code class=\"highlighter-rouge\">python manage.py runserver</code></p>\n    </blockquote>\n  </li>\n  <li>입력후, <code class=\"highlighter-rouge\">http://127.0.0.1:8000</code>의 주소를 당신의 브라우저에 입력해보세요. <code class=\"highlighter-rouge\">\"Welcome to Django” page, in pleasant, light-blue pastel. It worked!</code>라는 페이지를 보게될 것입니다.</li>\n  <li>지금 당신은 작업을 할 프로젝트 환경을 설정한 것 입니다.</li>\n  <li>장고는 어플리케이션의 기본 디렉토리 구조를 자동으로 만드는 유틸리티를 제공합니다. 따라서 당신이 디렉토리들을 만드는 것보다는 코드를 작성하는 것에 초점을 맞추고 있습니다.</li>\n  <li>어플리케이션을 생성하기 위해서 당신은 <code class=\"highlighter-rouge\">manage.py</code>와 같은 디렉토리의 명령어 입력창에 다음과 같이 입력합니다.<br /></li>\n</ul>\n\n<blockquote>\n  <p><code class=\"highlighter-rouge\">python manage.py startapp polls</code></p>\n</blockquote>\n\n<ul>\n  <li>이러한 레이아웃과 같은 <code class=\"highlighter-rouge\">polls</code> 디렉토리를 생성할 것입니다.\n<code class=\"highlighter-rouge\">python\npolls/\n__init__.py\nadmin.py\napps.py\nmigrations/\n    __init__.py\nmodels.py\ntests.py\nviews.py\n</code><br /><br /></li>\n</ul>\n\n<h4 id=\"첫번-째-view-작성하기\">첫번 째 View 작성하기</h4>\n<p>[polls.views.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world. You're at the polls index\"</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n<ul>\n  <li>이것은 장고에서 가장 간단한 뷰 입니다. 뷰를 호출하기 위해서 URL을 매핑해야하는데 여기에서 우리는 URLconf가 필요합니다.</li>\n  <li>polls 디렉토리에서 URLconf를 생성하기 위해서 어플리케이션 디렉토리에서 urls.py를 생성하고 다음과 같이 코드를 작성합니다.</li>\n</ul>\n\n<p>[polls/urls.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">urls</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'index'</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<ul>\n  <li>polls.urls 모듈을 root URLconf 로 지정하기 위해 mysite/urls.py 에서 다음과 같이 include()를 삽입해야합니다.</li>\n</ul>\n\n<p>[mysite/urls.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">include</span><span class=\"p\">,</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^polls/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s\">'polls.urls'</span><span class=\"p\">)),</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^admin/'</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<ul>\n  <li><code class=\"highlighter-rouge\">include()</code> 함수는 다른 URLconf를 참조하도록 허용합니다. include()를 사용한 url 패턴에서 ‘/’ 다음에 정규표현식 ‘$’를 사용하지 않았다는 점을 주의하세요.</li>\n  <li>당신이 다른 URL 패턴을 포함시키고자 할 때 항상 include()를 사용하지만 admin.site.urls 는 이에 예외 사항입니다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Django Tutorial Part1 1",
      "category" : "",
      "tags"     : "",
      "url"      : "/2017/06/02/django-tutorial-part1-1.html",
      "date"     : "2017-06-02 00:00:00 +0900",
      "content"   : "<h2 id=\"장고-튜토리얼-어플리케이션-만들기-part1\">[장고 튜토리얼] 어플리케이션 만들기 part1</h2>\n<ul>\n  <li>이번 튜토리얼을 통해서 우리는 당신에게 기본 투표어플리케이션 만들기를 보여줄거에요.</li>\n  <li>이 어플리케이션은 사람들이 투표를 하고, 투표 결과를 볼 수 있는 사이트와 당신이 추가, 변경 그리고 삭제를 할 수 있는 관리자 사이트의 2개 파트로 구성되어있습니다.</li>\n  <li>우리는 당신이 장고를 이미 설치했다고 가정하고, 또한 당신은 장고가 설치되었으며, 아래의 명령 프롬프트를 따라함으로써 장고 버전을 말할 수 있을겁니다.<br /></li>\n</ul>\n\n<blockquote>\n  <p><code class=\"highlighter-rouge\">python -m django --version</code></p>\n</blockquote>\n\n<ul>\n  <li>만약 장고가 설치되어있다면, 당신은 장고 버전이 보여야만합니다. 그렇지 않다면, ‘No module named django’라는 에러 사항을 얻게될거에요.</li>\n  <li>이 튜토리얼은 장고 1.11 그리고 파이썬 3.4 혹은 최신버전으로 쓰여졌고, 장고 버전이 적절하지 않다면, 이 페이지의 오른쪽 아래에 버전 전환기를 사용함으로써 장고의 버전에 대한 튜토리얼을 참고하실 수 있습니다. 원하지 않다면 장고 최신버전을 업데이트하세요. <br /></li>\n</ul>\n\n<h3 id=\"creating-a-project\">Creating a project</h3>\n<ul>\n  <li>이 어플리케이션 만들기가 당신의 첫 장고 프로젝트라면, 당신은 초기 설정에 주의해야합니다. 당신은 장고 프로젝트를 설계하는 몇 몇의 코드를 자동 생성해야 할 것입니다.</li>\n  <li>데이터베이스, 컨피그레이션, 장고 특정 옵션들, 그리고 어플리케이션 설정들을 포함하는 장고 인스턴스에 대한 설정 모음이 바로 이에 해당하는 것입니다.</li>\n  <li>커맨드란에 당신이 코드를 저장하고자 하는 디렉토리로 이동하여 아래와 같이 명령어를 입력하세요.<br /></li>\n</ul>\n\n<blockquote>\n  <p><code class=\"highlighter-rouge\">django-admin startproject mysite</code></p>\n</blockquote>\n\n<ul>\n  <li>당신의 현재 디렉토리에 mysite 디렉토리가 생성될 것입니다.</li>\n  <li>생성된 startproject 로 무엇이 있는지 한 번 봐보세요.\n    <div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">mysite</span><span class=\"o\">/</span>\n  <span class=\"n\">manage</span><span class=\"o\">.</span><span class=\"n\">py</span>\n  <span class=\"n\">mysite</span><span class=\"o\">/</span>\n      <span class=\"n\">__init__</span><span class=\"o\">.</span><span class=\"n\">py</span>\n      <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">py</span>\n      <span class=\"n\">urls</span><span class=\"o\">.</span><span class=\"n\">py</span>\n      <span class=\"n\">wsgi</span><span class=\"o\">.</span><span class=\"n\">py</span>\n</code></pre>\n    </div>\n  </li>\n  <li>바깥에 위치한 <code class=\"highlighter-rouge\">mysite(루트디렉토리)</code>는 단지 당신의 프로젝트에 대한 상자일 뿐입니다. 이 디렉토리의 이름은 장고에게 전혀 영향이 없습니다. 따라서 당신은 언제든 이 디렉토리의 이름을 다시 지을 수 있습니다.</li>\n  <li><code class=\"highlighter-rouge\">manage.py</code> : 장고 프로젝트와 상호작용하는 커맨드라인 유틸리티입니다.</li>\n  <li>내부에 위치한 <code class=\"highlighter-rouge\">mysite</code>는 당신 프로젝트에 대한 실질적인 파이썬 패키지입니다. 따라서 이 디렉토리의 이름은 내부 요소를 호출하여 사용해야할 파이썬 패키지의 이름입니다.</li>\n  <li><code class=\"highlighter-rouge\">mysite/setting.py</code> : 장고 프로젝트의 환경설정하는 파일입니다.</li>\n  <li><code class=\"highlighter-rouge\">mysite/urls.py</code> : 이 장고 프로젝트에 대한 URL 선언을 다루는 파일입니다.</li>\n  <li><code class=\"highlighter-rouge\">mysite/wsgi.py</code> : 장고 프로젝트를 제공하는 웹 서버에 대한 진입 지점입니다.<br /></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Jekyll Blog Tags",
      "category" : "",
      "tags"     : "",
      "url"      : "/2017/05/31/jekyll-blog-tags.html",
      "date"     : "2017-05-31 00:00:00 +0900",
      "content"   : "<h3 id=\"1-블로그-루트-폴더에-tagsmd-넣기\">1. 블로그 루트 폴더에 tags.md 넣기</h3>\n<ul>\n  <li>이 tags.md 는 모든 태그들을 출력해준다.</li>\n</ul>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>bbungsang.github.io\n├─── _includes\n├─── _layouts\n├─── _posts\n├─── css\n├─── [tags.md]\n└─── ...\n</code></pre>\n</div>\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n---\nlayout: page\npermalink: /tags/\ntitle: Tags\n---\n\n<span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">\"tag-cloud\"</span><span class=\"nt\">&gt;</span>\n{% for tag in site.tags %}\n  <span class=\"nt\">&lt;span</span> <span class=\"na\">style=</span><span class=\"s\">\"font-size: {{ tag | last | size | times: 100 | divided_by: site.tags.size | plus: 70  }}%\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"#{{ tag | first | slugize }}\"</span><span class=\"nt\">&gt;</span>\n      {{ tag | first }}\n    <span class=\"nt\">&lt;/a&gt;</span> <span class=\"ni\">&amp;nbsp;&amp;nbsp;</span>\n  <span class=\"nt\">&lt;/span&gt;</span>\n{% endfor %}\n<span class=\"nt\">&lt;/ul&gt;</span>\n\n</code></pre>\n</div>\n\n<p><br /></p>\n<h3 id=\"2-_includestagshtml-추가해주기\">2. _includes/tags.html 추가해주기</h3>\n<ul>\n  <li>포스트 상단에 태그들을 출력해 주는 페이지다.</li>\n</ul>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"/images/tag-256.png\"</span> <span class=\"na\">alt=</span><span class=\"s\">\"Tags: \"</span> <span class=\"na\">class=</span><span class=\"s\">\"tag-img\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"post-tags\"</span><span class=\"nt\">&gt;</span>\n  {% if post %}\n    {% assign tags = post.tags %}\n  {% else %}\n    {% assign tags = page.tags %}\n  {% endif %}\n  {% for tag in tags %}\n  <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/tags/#{{tag|slugize}}\"</span><span class=\"nt\">&gt;</span>{{tag}}<span class=\"nt\">&lt;/a&gt;</span>{% unless forloop.last %},{% endunless %}\n  {% endfor %}\n<span class=\"nt\">&lt;/div&gt;</span>\n\n</code></pre>\n</div>\n\n<p><br /></p>\n<h3 id=\"3-_layoutsposthtml-에-include-해주기\">3. _layouts/post.html 에 include 해주기</h3>\n<ul>\n  <li>포스트에 태그가 나오도록 위의 tags.html 파일을 include 해준다.</li>\n</ul>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n---\nlayout: default\n---\n\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"post\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;h1</span> <span class=\"na\">class=</span><span class=\"s\">\"post-title\"</span><span class=\"nt\">&gt;</span>{{ page.title }}<span class=\"nt\">&lt;/h1&gt;</span>\n  <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">\"post-date\"</span><span class=\"nt\">&gt;</span>{{ page.date | date_to_string }}<span class=\"nt\">&lt;/span&gt;</span>\n  {% include post_tags.html %}\n  <span class=\"nt\">&lt;br/&gt;</span>\n  {{ content }}\n<span class=\"nt\">&lt;/div&gt;</span>\n\n</code></pre>\n</div>\n\n<p><br /></p>\n<h3 id=\"4-사용하기\">4. 사용하기</h3>\n<ul>\n  <li>아래와 같이 포스트에 태그를 붙일 수 있다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "장고 URL과 뷰",
      "category" : "Do 장고걸스!djangogirls",
      "tags"     : "Django, URL, Views",
      "url"      : "/do%20%EC%9E%A5%EA%B3%A0%EA%B1%B8%EC%8A%A4!/djangogirls/2017/05/30/djangogirls-url&view.html",
      "date"     : "2017-05-30 00:00:00 +0900",
      "content"   : "<h2 id=\"url\">URL</h2>\n<ul>\n  <li><code class=\"highlighter-rouge\">www.naver.com</code> (포스트 네임으로 특정 한대 이상의 서버를 가리킴) + 폴더 파일 구조와 비슷한 URL 리소스</li>\n  <li>?… <code class=\"highlighter-rouge\">GET 인자</code> : 단순한 파라미터로 신경쓰지 않아도 된다.</li>\n  <li>주소 요청 시, 관련 작업을 함수(function)로서 구현하여 호출. 이러한 함수 정의는 <code class=\"highlighter-rouge\">blog/views.py</code>에 한다.</li>\n  <li>즉, 브라우저에서 주소를 요청하면 값을 전달하여 해당하는 함수를 호출하는 역할은 <em>URL</em> 이 하고, 그 값에 대한 응답을 <em>VIEW</em> 에서 하는 것이다.</li>\n</ul>\n\n<p>[blog/urls.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">post_list</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'post_list'</span><span class=\"p\">),</span>\n    <span class=\"c\"># name='post_list' 는 URL에 이름을 붙인 것으로 뷰를 식별한다.</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<p>[mysite/urls.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^admin/'</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">),</span>\n<span class=\"c\"># 장고가 admin/ 로 시작하는 모든 URL을 VIEW와 대조하여 찾아낸다. URL은 무수히 많으므로 정규표현식을 사용한다.</span>\n\n<span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'blog/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s\">'blog.urls'</span><span class=\"p\">)),</span>\n<span class=\"c\"># http://127.0.0.1:8000/ 로 들어오는 모든 접속 요청을 blog.urls 로 전송</span>\n<span class=\"c\"># blog.urls 에 정의되어 있는 부분을 mysite.urls에서도 사용할 수 있도록 가져오는 역할 : include</span>\n<span class=\"c\"># blog/urls.py 에서 blog/... 주소를 사용할 때, 일일이 'blog/' 부분을 기입해야하는데, mysite/urls.py 에서 선언하면 그러한 수고를 덜 수 있다.</span>\n<span class=\"c\"># 또한 blog/ 뒤에 $를 붙이지 않도록 주의한다. blog/urls.py 에서 특정 view 함수를 연결할 때에만 붙여준다.</span>\n</code></pre>\n</div>\n\n<h4 id=\"사용된-정규표현식\">[사용된 정규표현식]</h4>\n<p><code class=\"highlighter-rouge\">^post/(]d+)/$</code><br />\n<strong>^post/</strong> : url이 <code class=\"highlighter-rouge\">post/</code> 로 <em>시작</em> <br />\n<strong>(\\d+)</strong> : <code class=\"highlighter-rouge\">숫자</code>가 한 개 이상 <br />\n<strong>/$</strong> : url 마지막이 <code class=\"highlighter-rouge\">/</code> 로 <em>끝남</em></p>\n\n<p><br /></p>\n<h2 id=\"뷰view\">뷰(view)</h2>\n<ul>\n  <li>어플리케이션의 ‘로직’을 넣는 곳. url과 연결되어있는 함수기반, 클래스기반. <br /></li>\n</ul>\n\n<h3 id=\"렌더\">렌더</h3>\n<p>장고에서 지원해주는 템플릿 기반 시스템, 복잡한 문자열을 보다 쉽게 작업할 수 있도록 도와줌</p>\n\n<p>[blog/view.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">post_list</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">'blog/post_list.html'</span><span class=\"p\">)</span> <span class=\"c\"># Template Loader</span>\n</code></pre>\n</div>\n\n<p>하지만 아직 <code class=\"highlighter-rouge\">blog/template/blog/post_list.html</code> 을 아직 안 만들었기 때문에 템플릿 오류 발생</p>\n"
    } ,
  
    {
      "title"    : "장고 모델",
      "category" : "Do 장고걸스!djangogirls",
      "tags"     : "Django, Djangogirls, Models",
      "url"      : "/do%20%EC%9E%A5%EA%B3%A0%EA%B1%B8%EC%8A%A4!/djangogirls/2017/05/30/djangogirls-models.html",
      "date"     : "2017-05-30 00:00:00 +0900",
      "content"   : "<h2 id=\"장고-모델\">장고 모델</h2>\n<blockquote>\n  <p><code class=\"highlighter-rouge\">User</code> &lt;—&gt; <code class=\"highlighter-rouge\">Django</code> &lt;—&gt; <code class=\"highlighter-rouge\">DataBase</code> <br /></p>\n</blockquote>\n\n<ul>\n  <li>유저가 데이터를 요청하면, 장고가 앞단에서 데이터를 받아서 데이터베이스에게 전달</li>\n  <li>\n    <p>데이터베이스가 데이터를 꺼내어 응답하면 그 응답을 다시 장고가 유저에게 전달</p>\n  </li>\n  <li>장고 프로젝트는 SQLite3 DB가 기본으로 설정되어 있다. (실 서비스에서는 그다지 적합하지는 않다.)</li>\n  <li>원래 DB Table을 만들고 조회/추가/수정/삭제 하기 위해서는 SQL을 써야만 한다. 하지만 장고가 지원해주는 Django Model을 쓰면, 직접 SQL을 작성하지 않고도 모델을 통해 SQL을 작성할 수 있다.</li>\n  <li>장고 모델은 파이썬 클래스 문법형태로 정의한다.<br /><br /></li>\n</ul>\n\n<h4 id=\"블로그에-어떤-내용을-저장할-것인지-설계하기\"><strong>&lt;블로그에 어떤 내용을 저장할 것인지 설계하기&gt;</strong></h4>\n<ul>\n  <li>다음은 모델 클래스명, 사용할 필드, 필드 목적에 대하여 설계한 것이다.</li>\n</ul>\n\n<p><strong>Post</strong> # 저장 단위에 대한 이름<br />\n—— 속성 ——<br />\n<strong>title</strong> # 제목<br />\n<strong>text</strong> # 내용<br />\n<strong>author</strong> # 작성자<br />\n<strong>created_date</strong> # 생성날짜<br />\n<strong>published_date</strong> # 발행날짜 <br /><br /></p>\n\n<h4 id=\"어플리케이션-제작하기\"><strong>&lt;어플리케이션 제작하기&gt;</strong></h4>\n<p><code class=\"highlighter-rouge\">python manage.py startapp &lt;생성할 앱의 이름&gt;</code><br /></p>\n<ul>\n  <li>manage.py 명령어를 입력할 시, 항상 manage.py 가 있는 디렉토리에서 입력할 것.</li>\n  <li>어플리케이션을 생성하면 장고에게 사용함을 알려줘야 한다.</li>\n</ul>\n\n<p>[settings.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"s\">'django.contrib.admin'</span><span class=\"p\">,</span>\n  <span class=\"s\">'django.contrib.auth'</span><span class=\"p\">,</span> <span class=\"o\">...</span>\n  <span class=\"s\">'blog'</span><span class=\"p\">,</span> <span class=\"c\"># 반드시 ,(콤마)를 붙일것</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<p>[models.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">timezone</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s\">'auth.User'</span><span class=\"p\">)</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_lenght</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span> <span class=\"c\"># 길이 제한 있는 문자열</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span> <span class=\"c\"># 길이 제한 없는 문자열</span>\n    <span class=\"n\">created_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">)</span> <span class=\"c\"># 포스트 생성시 현재 시간이 자동으로 기입된다.</span>\n    <span class=\"n\">published_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">publish</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">published_date</span> <span class=\"o\">=</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span>\n</code></pre>\n</div>\n<ul>\n  <li>코드를 작성했다고 해서 데이터베이스가 바로 생성되는 것은 아니다. 반드시 마이그레이션 작업을 해야 데이터베이스가 생성된다.\n    <blockquote>\n      <p>모델로부터 마이그레이션 파일을 생성 : <code class=\"highlighter-rouge\">python manage.py makemigrations blog</code><br /> # blog 앱을 타겟으로 마이그레이션 맵을 만들겠다는 명령어 <br />\n# 즉, 마이그레이션은 이를 통해 테이블을 어떤식으로 적용할 것인지에 대한 일종의 지시서와 같은 것이다.<br />\n마이그레이션 파일을 테이블에 적용 : <code class=\"highlighter-rouge\">python manage.py migrate blog</code><br /><br />\n# 마이그레이트는 마이그레이션 생성에 전혀 이상이 없으면, 이를 그대로 데이터베이스에 반영하겠다는 뜻이다.</p>\n    </blockquote>\n  </li>\n</ul>\n\n<p><br /></p>\n<h2 id=\"django-관리자\">Django 관리자</h2>\n<p>[blog/admin.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Post</span> <span class=\"c\"># 같은 경로의 models.py에서 Post 테이블을 불러옴.</span>\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Post</span><span class=\"p\">)</span> <span class=\"c\"># 이 등록만으로도 장고에서 모델로 사용할 수 있음.</span>\n</code></pre>\n</div>\n<ul>\n  <li>python manage.py runserver <code class=\"highlighter-rouge\">0:9000</code> : 9000번 포트에서 열겠다는 표현.</li>\n  <li>슈퍼유저를 생성해야한다. <code class=\"highlighter-rouge\">python manage.py createsuperuser</code></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "TryHelloWorld 알고리즘 레벨 1-3",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/05/29/tryhelloworld-algorithm-level1-3.html",
      "date"     : "2017-05-29 00:00:00 +0900",
      "content"   : "<h2 id=\"스트링을-숫자로-바꾸기\">스트링을 숫자로 바꾸기</h2>\n<p>strToInt 메소드는 String형 str을 매개변수로 받습니다.<br />\nstr을 숫자로 변환한 결과를 반환하도록 strToInt를 완성하세요.<br />\n예를들어 str이 “1234”이면 1234를 반환하고, “-1234”이면 -1234를 반환하면 됩니다.<br />\nstr은 부호(+,-)와 숫자로만 구성되어 있고, 잘못된 값이 입력되는 경우는 없습니다.</p>\n\n<ul>\n  <li>내가 푼 것 ^0^/</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">strToInt</span><span class=\"p\">(</span><span class=\"n\">String</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    \t<span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">strToInt</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">25</span><span class=\"p\">));</span>\n</code></pre>\n</div>\n\n<p><br /><br /></p>\n<h2 id=\"수박수박수박수박수박수\">수박수박수박수박수박수?</h2>\n<p>water_melon함수는 정수 n을 매개변수로 입력받습니다.<br />\n길이가 n이고, 수박수박수…와 같은 패턴을 유지하는 문자열을 리턴하도록 함수를 완성하세요.<br />\n예를들어 n이 4이면 ‘수박수박’을 리턴하고 3이라면 ‘수박수’를 리턴하면 됩니다.</p>\n\n<ul>\n  <li>내가 푼 것 ^0^/</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">water_melon</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">bowl</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">su</span> <span class=\"o\">=</span> <span class=\"s\">\"수\"</span>\n    <span class=\"n\">bak</span> <span class=\"o\">=</span> <span class=\"s\">\"박\"</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">bowl</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bak</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">bowl</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">su</span><span class=\"p\">)</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"s\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">bowl</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"n이 3인 경우: \"</span> <span class=\"o\">+</span> <span class=\"n\">water_melon</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">));</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"n이 4인 경우: \"</span> <span class=\"o\">+</span> <span class=\"n\">water_melon</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">));</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">water_melon</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"수박\"</span> <span class=\"o\">*</span> <span class=\"n\">n</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"p\">[:</span><span class=\"n\">n</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<blockquote>\n  <p>허무하게도 저렇게 간단한 방법이 있었다니… 분발해야겠다.</p>\n</blockquote>\n\n<p><br /><br /></p>\n<h2 id=\"서울에서-김서방-찾기\">서울에서 김서방 찾기</h2>\n<p>findKim 함수는 String형 배열 seoul을 매개변수로 받습니다.<br />\nseoul의 element중 “Kim”의 위치 x를 찾아, “김서방은 x에 있다”는 String을 반환하세요.<br />\nseoul에 “Kim”은 오직 한 번만 나타나며 잘못된 값이 입력되는 경우는 없습니다.</p>\n\n<ul>\n  <li>내가 푼 것 ^0^/</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">findKim</span><span class=\"p\">(</span><span class=\"n\">seoul</span><span class=\"p\">):</span>\n    <span class=\"n\">kimIdx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">seoul</span><span class=\"p\">)):</span>\n        <span class=\"k\">if</span> <span class=\"n\">seoul</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">\"Kim\"</span><span class=\"p\">:</span>\n            <span class=\"n\">kimIdx</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n\n    <span class=\"k\">return</span> <span class=\"s\">\"김서방은 {}에 있다\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">kimIdx</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">findKim</span><span class=\"p\">([</span><span class=\"s\">\"Queen\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tod\"</span><span class=\"p\">,</span> <span class=\"s\">\"Kim\"</span><span class=\"p\">]))</span>\n\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">findKim</span><span class=\"p\">(</span><span class=\"n\">seoul</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s\">\"김서방은 {}에 있다\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">seoul</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s\">'Kim'</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p><br /><br /></p>\n<h2 id=\"삼각형-출력하기\">삼각형 출력하기</h2>\n<p>printTriangle 메소드는 양의 정수 num을 매개변수로 입력받습니다.<br />\n다음을 참고해 *(별)로 높이가 num인 삼각형을 문자열로 리턴하는 printTriangle 메소드를 완성하세요.<br />\nprintTriangle이 return하는 String은 개행문자(‘\\n’)로 끝나야 합니다.</p>\n\n<ul>\n  <li>내가 푼 것 ^0^/</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">printTriangle</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n\t<span class=\"n\">star_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">star_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s\">\"*\"</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n\n\t<span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">star_list</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"n\">printTriangle</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">printTriangle</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"s\">'*'</span><span class=\"o\">*</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"s\">'</span><span class=\"se\">\\n</span><span class=\"s\">'</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">num</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)])</span>\n</code></pre>\n</div>\n\n<p><br /><br /></p>\n<h4 id=\"소감\"><em>소감</em></h4>\n<ul>\n  <li>내가 푸는 방식은 아무래도 파이써닉함에서 한참 벗어나는 것 같다. 알고리즘을 단계별로 차차 풀어나가고 다른 사람 풀이도 열심히 참고하여 문법을 익히는 게 우선인 듯 하다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "첫 장고 프로젝트!",
      "category" : "Do 장고걸스!djangogirls",
      "tags"     : "Django, Djangogirls, Blog",
      "url"      : "/do%20%EC%9E%A5%EA%B3%A0%EA%B1%B8%EC%8A%A4!/djangogirls/2017/05/28/djangogirs-first-project.html",
      "date"     : "2017-05-28 00:00:00 +0900",
      "content"   : "<h2 id=\"장고-설치-후-기본-골격-만들어주는-스크립트-실행\">장고 설치 후, 기본 골격 만들어주는 스크립트 실행</h2>\n<blockquote>\n  <h4 id=\"--장고-소스-코드-py-를-만들고-장고-스타일로-디렉토리를-구성한다는-의미다\">- 장고 소스 코드 .py 를 만들고 장고 스타일로 디렉토리를 구성한다는 의미다.</h4>\n  <h4 id=\"--모든-작업은-가상환경virtualenv-안에서-해야한다\">- 모든 작업은 가상환경(virtualenv) 안에서 해야한다.</h4>\n</blockquote>\n\n<p><br /></p>\n<h3 id=\"맥-os와-리눅스에서-프로젝트-생성하기\">[맥 OS와 리눅스]에서 프로젝트 생성하기</h3>\n<ul>\n  <li>명령어 끝에 .(마침표) : 현재 디렉토리에 장고를 설치하라는 표시이다.</li>\n</ul>\n\n<p><code class=\"highlighter-rouge\">django-admin startproject &lt;프로젝트명&gt; .</code></p>\n\n<ul>\n  <li>이를 통해 <code class=\"highlighter-rouge\">장고 rule</code>에 따른 새로운 프로젝트 디렉토리와 파일들을 생성해준다.</li>\n</ul>\n\n<div class=\"language-text highlighter-rouge\"><pre class=\"highlight\"><code>djangogirls\n├───manage.py -&gt; 사이트 관리를 도와줌, 다른 설치 작업 없이 바로 웹 서버를 시작할 수 있다.\n└───mysite\n        settings.py -&gt; 웹 설정이 있다.\n        urls.py -&gt; urlresolver가 사용하는 패턴 목록 포함, 즉 어디로 자원을 전달해야 하는지 판단\n        wsgi.py\n        __init__.py\n</code></pre>\n</div>\n<ul>\n  <li>디렉토리와 파일명 매우 중요하기 때문에 마음대로 변경하거나 다른 곳으로 옮겨서는 안된다.<br /></li>\n</ul>\n\n<h3 id=\"설정-변경\">설정 변경</h3>\n<p><strong>[&lt;프로젝트디렉토리&gt;/settings.py]</strong> <br /></p>\n<ul>\n  <li>현재 장고 프로젝트를 진행하기 위한 기본 설정이 담겨있는 코드이다. 추가적인 설정이 필요하다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"kn\">import</span> <span class=\"n\">abspath</span><span class=\"p\">,</span> <span class=\"n\">dirname</span><span class=\"p\">,</span> <span class=\"n\">join</span>\n\n<span class=\"n\">BASE_DIR</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">__file__</span><span class=\"p\">),</span> <span class=\"s\">'..'</span><span class=\"p\">,</span> <span class=\"s\">'..'</span><span class=\"p\">)</span>\n<span class=\"c\"># __file__ =&gt; /home/bbungsang/projects/django_/djangogirls/first_django_project/settings.py</span>\n<span class=\"c\"># .. =&gt; /home/bbungsang/projects/django_/djangogirls/</span>\n<span class=\"c\"># .. =&gt; /home/bbungsang/projects/django_/</span>\n</code></pre>\n</div>\n\n<p># 정확한 시간 넣기<br /></p>\n\n<blockquote>\n  <p>TIME_ZONE = ‘Asia/Soeul’<br /></p>\n  <ul>\n    <li>django 내에서 날짜/시간을 보여주고 저장할 때의 Time Zone</li>\n  </ul>\n</blockquote>\n\n<p># 정적파일 경로 추가 <br /></p>\n\n<blockquote>\n  <p>STATIC_URL = ‘/static’ <br />\nSTATIC_ROOT = os.path.join(BASE_DIR, ‘static’)<br /></p>\n  <ul>\n    <li>위와 같이 이 경로는 <code class=\"highlighter-rouge\">/home/bbungsang/projects/django_/static</code> 을 의미한다.</li>\n  </ul>\n</blockquote>\n\n<p><br /></p>\n\n<h4 id=\"데이터베이스-설정\">데이터베이스 설정</h4>\n\n<blockquote>\n  <p># sqlite3 사용 전제</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'default'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s\">'django.db.backends.sqlite3'</span><span class=\"p\">,</span>\n        <span class=\"s\">'NAME'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"s\">'db.sqlite3'</span><span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p><br /></p>\n\n<h3 id=\"설정이-다-끝났으면-단-3step-만으로-웹어플리케이션을-실행할-수-있다\">설정이 다 끝났으면 단 <em>3step</em> 만으로 웹어플리케이션을 실행할 수 있다.</h3>\n<p>그 전에 장고에는 2가지의 migration 과정이 있는데, <br />\n[manage.py]에서 <code class=\"highlighter-rouge\">makemigration</code>, <code class=\"highlighter-rouge\">migrate</code> 이다.</p>\n\n<blockquote>\n  <p>step1 : 데이터베이스를 생성하기 위해 콘솔 창에서 <code class=\"highlighter-rouge\">python manage.py migrate</code> 를 실행해야하는데, 이 때, <code class=\"highlighter-rouge\">djangogirs</code> 디렉토리 안에 있는 <code class=\"highlighter-rouge\">manage.py</code> 가 필요하다.<br /><br />\nstep2 : 콘솔창에 <code class=\"highlighter-rouge\">python manage.py runserver</code> 명령을 실행한다.<br /><br />\nstep3 : 끝으로, 브라우저에 <code class=\"highlighter-rouge\">http://127.0.0.1:8000/</code>를 입력하면 개발 서버가 뜬다.<br /><br /></p>\n</blockquote>\n\n<!-- ![it_worked](./images/it_worked.png) -->\n"
    } ,
  
    {
      "title"    : "TryHelloWorld 알고리즘 레벨 1-2",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/05/28/tryhelloworld-algorithm-level1-2.html",
      "date"     : "2017-05-28 00:00:00 +0900",
      "content"   : "<h2 id=\"짝수와-홀수\">짝수와 홀수</h2>\n<p>evenOrOdd 메소드는 int형 num을 매개변수로 받습니다.<br />\nnum이 짝수일 경우 “Even”을 반환하고 홀수인 경우 “Odd”를 반환하도록 evenOrOdd에 코드를 작성해 보세요.<br />\nnum은 0이상의 정수이며, num이 음수인 경우는 없습니다.</p>\n\n<ul>\n  <li>내가 푼 것 ^0^/</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">evenOrOdd</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s\">\"Even\"</span> <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"s\">\"Odd\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"결과 : \"</span> <span class=\"o\">+</span> <span class=\"n\">evenOrOdd</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"결과 : \"</span> <span class=\"o\">+</span> <span class=\"n\">evenOrOdd</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">evenOrOdd</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"s\">\"Odd\"</span> <span class=\"ow\">or</span> <span class=\"s\">\"Even\"</span>\n</code></pre>\n</div>\n\n<p><br /><br /></p>\n<h2 id=\"제일-작은-수-제거하기\">제일 작은 수 제거하기</h2>\n<p>rm_small함수는 list타입 변수 mylist을 매개변수로 입력받습니다.<br />\nmylist 에서 가장 작은 수를 제거한 리스트를 리턴하고, mylist의 원소가 1개 이하인 경우는 []를 리턴하는 함수를 완성하세요.<br />\n예를들어 mylist가 [4,3,2,1]인 경우는 [4,3,2]를 리턴 하고, [10, 8, 22]면 [10, 22]를 리턴 합니다.</p>\n\n<ul>\n  <li>내가 푼 것 ^0^/</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">rm_small</span><span class=\"p\">(</span><span class=\"n\">mylist</span><span class=\"p\">):</span>\n    <span class=\"nb\">min</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">mylist</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n    \t<span class=\"n\">mylist</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">min</span> <span class=\"o\">=</span> <span class=\"n\">mylist</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">mylist</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">min</span> <span class=\"o\">&gt;</span> <span class=\"n\">mylist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span>\n                <span class=\"nb\">min</span> <span class=\"o\">=</span> <span class=\"n\">mylist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n\n        <span class=\"n\">mylist</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">mylist</span>\n\n<span class=\"n\">my_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"결과 {} \"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rm_small</span><span class=\"p\">(</span><span class=\"n\">my_list</span><span class=\"p\">)))</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">rm_small</span><span class=\"p\">(</span><span class=\"n\">mylist</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">mylist</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">mylist</span><span class=\"p\">)]</span>\n</code></pre>\n</div>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">rm_small</span><span class=\"p\">(</span><span class=\"n\">mylist</span><span class=\"p\">):</span>\n    <span class=\"k\">del</span><span class=\"p\">(</span><span class=\"n\">mylist</span><span class=\"p\">[</span><span class=\"n\">mylist</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">mylist</span><span class=\"p\">))])</span>\n    <span class=\"k\">return</span> <span class=\"n\">mylist</span>\n</code></pre>\n</div>\n\n<p><br /><br /></p>\n<h2 id=\"정수제곱근-판별하기\">정수제곱근 판별하기</h2>\n<p>nextSqaure함수는 정수 n을 매개변수로 입력받습니다.<br />\nn이 임의의 정수 x의 제곱이라면 x+1의 제곱을 리턴하고, n이 임의의 정수 x의 제곱이 아니라면 ‘no’을 리턴하는 함수를 완성하세요.<br />\n예를들어 n이 121이라면 이는 정수 11의 제곱이므로 (11+1)의 제곱인 144를 리턴하고, 3이라면 ‘no’을 리턴하면 됩니다.</p>\n\n<ul>\n  <li>내가 푼 것 ^0^/</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">nextSqure</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">sqrt</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">**</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sqrt</span> <span class=\"o\">%</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    \t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">sqrt</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n    <span class=\"k\">return</span> <span class=\"s\">\"no\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"결과 : {}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">nextSqure</span><span class=\"p\">(</span><span class=\"mi\">169</span><span class=\"p\">)));</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">nextSqure</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"n\">n</span> <span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n    <span class=\"k\">return</span> <span class=\"s\">\"no\"</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "TryHelloWorld 알고리즘 레벨 1-1",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/05/28/tryhelloworld-algorithm-level1-1.html",
      "date"     : "2017-05-28 00:00:00 +0900",
      "content"   : "<h2 id=\"x만큼-간격이-있는-n개의-숫자\">x만큼 간격이 있는 n개의 숫자</h2>\n<p>number_generator함수는 x와 n을 입력 받습니다.\n2와 5를 입력 받으면 2부터 시작해서 2씩 증가하는 숫자를 5개 가지는 리스트를 만들어서 리턴합니다.\n[2,4,6,8,10]</p>\n\n<p>4와 3을 입력 받으면 4부터 시작해서 4씩 증가하는 숫자를 3개 가지는 리스트를 만들어서 리턴합니다.\n[4,8,12]</p>\n\n<p>이를 일반화 하면 x부터 시작해서 x씩 증가하는 숫자를 n개 가지는 리스트를 리턴하도록 함수 number_generator를 완성하면 됩니다.</p>\n\n<ul>\n  <li>내가 푼 것^0^;</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">number_generator</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"nb\">list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">list</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">number_generator</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">number_generator</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">number_generator</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p><br /><br /></p>\n<h2 id=\"핸드폰-번호-가리기\">핸드폰 번호 가리기</h2>\n\n<p>별이는 헬로월드텔레콤에서 고지서를 보내는 일을 하고 있습니다. 개인정보 보호를 위해 고객들의 전화번호는 맨 뒷자리 4자리를 제외한 나머지를 ` * ` 으로 바꿔야 합니다.\n전화번호를 문자열 s로 입력받는 hide_numbers함수를 완성해 별이를 도와주세요\n예를들어 s가 “ 01033334444 “ 면 ` <strong>**</strong><em>4444 <code class=\"highlighter-rouge\">를 리턴하고, \" 027778888 \"인 경우는 </code> **</em>**8888 `을 리턴하면 됩니다</p>\n\n<ul>\n  <li>내가 푼 것^0^;</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">hide_numbers</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"n\">hide</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">4</span>\n    <span class=\"n\">change</span> <span class=\"o\">=</span> <span class=\"s\">'*'</span> <span class=\"o\">*</span> <span class=\"n\">hide</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">hide</span><span class=\"p\">],</span> <span class=\"n\">change</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"결과 : \"</span> <span class=\"o\">+</span> <span class=\"n\">hide_numbers</span><span class=\"p\">(</span><span class=\"s\">'01033334444'</span><span class=\"p\">));</span>\n</code></pre>\n</div>\n\n<p><br /><br /></p>\n<h2 id=\"평균-구하기\">평균 구하기</h2>\n<p>함수를 완성해서 매개변수 list의 평균값을 return하도록 만들어 보세요.\n어떠한 크기의 list가 와도 평균값을 구할 수 있어야 합니다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">average</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">):</span>\n    <span class=\"n\">avg</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n    \t<span class=\"nb\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">i</span>\n\n    <span class=\"n\">avg</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">avg</span>\n\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"평균값 : {}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">average</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)));</span>\n</code></pre>\n</div>\n\n<p><br /><br /></p>\n<h2 id=\"자릿수-더하기\">자릿수 더하기</h2>\n<p>sum_digit함수는 자연수를 전달 받아서 숫자의 각 자릿수의 합을 구해서 return합니다.\n예를들어 number = 123이면 1 + 2 + 3 = 6을 return하면 됩니다.\nsum_digit함수를 완성해보세요.</p>\n\n<ul>\n  <li>내가 푼 것^0^;</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">sum_digit</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">):</span>\n    <span class=\"n\">str_num</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n    <span class=\"c\"># bowl = \"\"</span>\n    <span class=\"nb\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">str_num</span><span class=\"p\">)):</span>\n        <span class=\"nb\">sum</span> <span class=\"o\">+=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">str_num</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"c\"># if i == len(str_num) - 1:</span>\n        <span class=\"c\">#     bowl += str_num[i] + \"=\"</span>\n        <span class=\"c\"># else:</span>\n        <span class=\"c\">#     bowl += str_num[i] + \"+\"</span>\n\n    <span class=\"k\">return</span> <span class=\"nb\">sum</span>\n\n<span class=\"c\"># 아래는 테스트로 출력해 보기 위한 코드입니다.</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"결과 : {}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">sum_digit</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)));</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">sum_digit</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">number</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">number</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">number</span> <span class=\"o\">%</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">sum_digit</span><span class=\"p\">(</span><span class=\"n\">number</span> <span class=\"o\">//</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">average</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">):</span>\n    <span class=\"n\">avg</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n    \t<span class=\"nb\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">i</span>\n\n    <span class=\"n\">avg</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">avg</span>\n\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"평균값 : {}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">average</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)));</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "파이썬 크롤링 라이브러리 - 뷰티풀수프",
      "category" : "파이썬 라이브러리library",
      "tags"     : "Python, BeautifulSoup, Crawling",
      "url"      : "/%ED%8C%8C%EC%9D%B4%EC%8D%AC%20%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC/library/2017/05/27/python-beautifulsoup1.html",
      "date"     : "2017-05-27 00:00:00 +0900",
      "content"   : "<h2 id=\"뷰티풀수프beautifulsoup\">뷰티풀수프(BeautifulSoup)</h2>\n<ul>\n  <li>뷰티풀수프는 HTML과 XML로부터 데이터를 뽑기위한 라이브러리이다.</li>\n  <li>문서를 뷰티풀수프에 넣으면 객체가 나오는데, 이 객체는 문서롤 내포한 데이터 구조로 나타낸다.<br /><br /></li>\n</ul>\n\n<h4 id=\"데이터-구조를-파싱하는-방법\">데이터 구조를 파싱하는 방법</h4>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">title</span>\n<span class=\"c\"># &lt;title&gt;The bbungsnag's story&lt;/title&gt;</span>\n\n<span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"o\">.</span><span class=\"n\">string</span>\n<span class=\"c\"># The bbugnsang's story</span>\n\n<span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"s\">'class'</span><span class=\"p\">]</span>\n<span class=\"c\"># return class value</span>\n\n<span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"s\">'a'</span><span class=\"p\">)</span>\n<span class=\"c\"># a 태그에 해당하는 모든 값을 리스트로 반환</span>\n\n<span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s\">'bbungsang'</span><span class=\"p\">)</span>\n<span class=\"c\"># id='bbungsang'에 해당하는 a 태그 값 파싱</span>\n\n<span class=\"k\">for</span> <span class=\"n\">link</span> <span class=\"ow\">in</span> <span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"s\">'a'</span><span class=\"p\">):</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">link</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'href'</span><span class=\"p\">))</span>\n<span class=\"c\"># a href 값 연속해서 파싱</span>\n\n<span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">get_text</span><span class=\"p\">()</span>\n<span class=\"c\"># 페이지 텍스트 모두 파싱</span>\n</code></pre>\n</div>\n<p><br /></p>\n<h2 id=\"해석기\">해석기</h2>\n<p>뷰티플수프는 파이썬 기본 라이브러리에 있는 HTML 해석기를 지원하지만, 또한 제 3의 해석기도 지원한다. 그 대표적인 해석기로 lxml 해석기가 있다.</p>\n\n<h4 id=\"각-해석기의-장단점\">&lt;각 해석기의 장단점&gt;</h4>\n<ul>\n  <li><strong>BeautifulSoup(markup, ‘html.parser’)</strong>\n    <ul>\n      <li>장점 : 적절한 속도</li>\n      <li>단점 : 특정 버전에서만 관대함</li>\n    </ul>\n  </li>\n  <li><strong>BeautifulSoup(markup, ‘lxml’)</strong>\n    <ul>\n      <li>장점 : 아주 빠름</li>\n      <li>단점 : 외부 C 라이브러리 의존</li>\n    </ul>\n  </li>\n  <li><strong>BeautifulSoup(‘lxml’, ‘lxml’)</strong>\n    <ul>\n      <li>아주 빠르고 유일하게 XML 해석기 지원</li>\n      <li>외부 C 라이브러리 의존</li>\n    </ul>\n  </li>\n</ul>\n\n<p><br /></p>\n<h2 id=\"객체의-종류\">객체의 종류</h2>\n<h3 id=\"태그\">태그</h3>\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- 태그 객체 생성 --&gt;</span>\nsoup = BeautifulSoup('<span class=\"nt\">&lt;b</span> <span class=\"na\">class=</span><span class=\"s\">\"boldest\"</span><span class=\"nt\">&gt;</span>Bold<span class=\"nt\">&lt;/b&gt;</span>')\ntag = soup.b\n</code></pre>\n</div>\n\n<ul>\n  <li>\n    <p>태그마다 이름이 있고 <code class=\"highlighter-rouge\">&lt;태그객체&gt;.name</code>으로 접근한다.</p>\n  </li>\n  <li>\n    <p>태그는 속성을 여러개 가질 수 있다. <code class=\"highlighter-rouge\">&lt;태그객체&gt;['class']</code> 으로 접근하면 해당 값인 <code class=\"highlighter-rouge\">boldest</code>가 반환된다.</p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">&lt;태그객체&gt;.attrs</code>로 접근하면 <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">'class'</span><span class=\"w\"> </span><span class=\"err\">:</span><span class=\"w\"> </span><span class=\"err\">'boldest'</span><span class=\"w\"> </span><span class=\"p\">}</span></code> 딕셔너리 형태로 반환된다.</p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">&lt;태그객체&gt;.string.replace_with(NotBold)</code> 문자열을 다른 문자열로 바꾼다 <br />\n<code class=\"highlighter-rouge\">&lt;b class='boldest'&gt;NotBold&lt;/b&gt;</code></p>\n  </li>\n</ul>\n"
    } ,
  
    {
      "title"    : "문자열, List, Tuple",
      "category" : "파이썬 문법basic",
      "tags"     : "Python, List, Tuple",
      "url"      : "/%ED%8C%8C%EC%9D%B4%EC%8D%AC%20%EB%AC%B8%EB%B2%95/basic/2017/05/27/python-basic-string-list-tuple.html",
      "date"     : "2017-05-27 00:00:00 +0900",
      "content"   : "<h2 id=\"문자열\">문자열</h2>\n\n<h3 id=\"split\">Split</h3>\n<p><code class=\"highlighter-rouge\">&lt;문자열 변수&gt;.split('구분자')</code></p>\n<ul>\n  <li>문자열을 리스트 타입으로 반환한다.</li>\n  <li>인자를 주지 않을 경우, 공백문자를 구분자로 사용한다.</li>\n</ul>\n\n<h3 id=\"join\">Join</h3>\n<p><code class=\"highlighter-rouge\">'구분자'.join(&lt;문자열 변수&gt;)</code></p>\n<ul>\n  <li>리스트를 하나의 문자열로 결합한다.</li>\n</ul>\n\n<h3 id=\"대소문자\">대소문자</h3>\n<p><code class=\"highlighter-rouge\">&lt;문자열 변수&gt;.upper()</code></p>\n<ul>\n  <li>대문자로 변환\n<code class=\"highlighter-rouge\">&lt;문자열 변수&gt;.lower()</code></li>\n  <li>소문자로 변환</li>\n</ul>\n\n<p><br /></p>\n<h2 id=\"list\">List</h2>\n<ul>\n  <li>리스트는 순차적인 데이터를 나타내는 데 유용하며, 문자여로가 달리 원소를 변경할 수 있다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># 리스트의 생성</span>\n<span class=\"n\">empty_list1</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">empty_list2</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>\n<span class=\"n\">sample_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"s\">'b'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>\n    <p><strong>슬라이스 :</strong> 리스트[start : end : step]</p>\n  </li>\n  <li>\n    <p><strong>append :</strong> 리스트에 원소 추가, 리스트로 할당된 변수에 또 다른 리스트로 할당된 변수를 ‘append’하면 리스트 안에 리스트가 중복 삽입된다.</p>\n  </li>\n</ul>\n\n<p><code class=\"highlighter-rouge\">&lt;리스트1&gt;.append(&lt;리스트2&gt;)</code></p>\n\n<ul>\n  <li><strong>extend :</strong> 마찬가지로 리스트에 원소 추가, 하지만 리스트에 리스트를 ‘extend’하면 병합되어 리스트 중복을 피할 수 있다.</li>\n</ul>\n\n<p><code class=\"highlighter-rouge\">&lt;리스트1&gt;.extend(&lt;리스트2&gt;)</code><br />\n<!-- 즉, 내용을 ` `하면 중복된 부분은 탈락된다. --></p>\n<ul>\n  <li><strong>remove :</strong> 값으로 리스트 항목 삭제, 중복되는 값이 하나의 리스트에 여러 개 존재하더라도 그 첫번째 값만 삭제한다.</li>\n</ul>\n\n<p><code class=\"highlighter-rouge\">&lt;list&gt;.remove('value')</code></p>\n\n<ul>\n  <li><strong>index :</strong> 값으로 리스트 오프셋 찾기, 마찬가지로 중복되는 값이 하나의 리스트에 여러 개 존재하더라도 그 첫번째 항목의 오프셋만 찾을 수 있다.</li>\n</ul>\n\n<p><code class=\"highlighter-rouge\">&lt;리스트&gt;.index('value')</code></p>\n\n<ul>\n  <li><strong>in :</strong> 존재여부 확인, 존재하면 True, 존재하지 않으면 False를 반환한다.</li>\n</ul>\n\n<p><code class=\"highlighter-rouge\">'value' in &lt;list&gt;</code></p>\n\n<ul>\n  <li><strong>count :</strong> 리스트 안의 값을 센다.</li>\n</ul>\n\n<p><br /></p>\n<h2 id=\"tuple\">Tuple</h2>\n<p>리스트와 비슷하나, 내부 항목의 삭제나 수정이 불가능하다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\">#빈 튜플의 생성</span>\n<span class=\"n\">empty_tuple</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n<span class=\"c\"># 튜플이 하나의 항목만 가질 경우, 쉼표로서 튜플임을 명시한다.</span>\n<span class=\"n\">colors</span> <span class=\"o\">=</span> <span class=\"s\">'red'</span><span class=\"p\">,</span>\n<span class=\"n\">fruits</span> <span class=\"o\">=</span> <span class=\"s\">'apple'</span><span class=\"p\">,</span> <span class=\"s\">'banana'</span><span class=\"p\">,</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>\n    <p><strong>튜플 언패킹 :</strong> 튜플 항목의 값을 각 변수에 할당한다. <code class=\"highlighter-rouge\">f1, f2 = fruits</code></p>\n  </li>\n  <li>\n    <p><strong>튜플을 사용하는 이유</strong></p>\n    <ul>\n      <li>리스트보다 적은 메모리 사용</li>\n      <li>정의 후에는 변하지 않는 내부 값</li>\n    </ul>\n  </li>\n</ul>\n\n<p><br /></p>\n<h3 id=\"실습\"><em>실습</em></h3>\n<p>1 . 문자열 ‘Fastcampus’를 리스트, 튜플 타이으로 형편환하여 새 변수에 할당한다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"n\">fc_string</span> <span class=\"o\">=</span> <span class=\"s\">'Fastcampus'</span>\n  <span class=\"c\"># 출력 결과 : Fastcampus</span>\n\n  <span class=\"n\">fc_tuple</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">fc_string</span><span class=\"p\">)</span> <span class=\"c\"># tuple('스트링형으로^^*')</span>\n  <span class=\"c\"># 출력 결과 : ('F', 'a', 's', 't', 'c', 'a', 'm', 'p', 'u', 's')</span>\n\n  <span class=\"n\">fc_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">fc_tuple</span><span class=\"p\">)</span>\n  <span class=\"c\"># 출력 결과 : ['F', 'a', 's', 't', 'c', 'a', 'm', 'p', 'u', 's']</span>\n</code></pre>\n</div>\n"
    } 
  
  ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
        "title"    : "Search",
        "category" : "",
        "tags"     : "",
        "url"      : "/search/",
        "date"     : "",
        "content"  : "\t<div id=\"results\">\n\t  <h1><!-- `key` listing for `value` --></h1>\n\n\t  <ul class=\"results\" height=\"100px\">\n\t    <!-- results lists -->\n\t  </ul>\n\t</div>\n\n\t<!-- <script>\n\t  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\t    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n\t\t  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\n\t  ga('create', , 'auto'); // config google_analytics ua에 저장한 추적 ID가 들어감\n\t    ga('send', 'pageview');\n\t</script> -->\n\n\t<script src=\"/dest/jekyll-search.js\" type=\"text/javascript\"></script>\n\n\t<script type=\"text/javascript\">\n      SimpleJekyllSearch({\n        searchInput: document.getElementById('search-input'),\n        resultsContainer: document.getElementById('results-container'),\n        json: '/search.json',\n        searchResultTemplate: '<li><a href=\"{url}\" title=\"{desc}\">{title}</a></li>',\n        noResultsText: 'No results found',\n        limit: 10,\n        fuzzy: true,\n        exclude: ['Welcome']\n      })\n\t</script>\n"
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
        "title"    : "Tags",
        "category" : "",
        "tags"     : "",
        "url"      : "/tags/",
        "date"     : "",
        "content"  : "<div class=\"tags\">\n  <div class=\"tag-cloud\">\n    {% for tag in site.tags %}\n      <span style=\"font-size: {{ tag | last | size | times: 100 | divided_by: site.tags.size | plus: 70  }}%\">\n        <a href=\"#{{ tag | first | slugize }}\">\n          {{ tag | first }}\n        </a> &nbsp;&nbsp;\n      </span>\n    {% endfor %}\n  </div>\n</div>\n\n<div id=\"archives\">\n{% for tag in site.tags %}\n  <div class=\"archive-group\">\n    {% capture tag_name %}{{ tag | first }}{% endcapture %}\n    <h3 id=\"#{{ tag_name | slugize }}\">{{ tag_name }}</h3>\n    <a name=\"{{ tag_name | slugize }}\"></a>\n    {% for post in site.tags[tag_name] %}\n    <article class=\"archive-item\">\n      <h4><a href=\"{{ root_url }}{{ post.url }}\">{{post.title}}</a></h4>\n    </article>\n    {% endfor %}\n  </div>\n{% endfor %}\n</div>\n"
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } 
  
]
